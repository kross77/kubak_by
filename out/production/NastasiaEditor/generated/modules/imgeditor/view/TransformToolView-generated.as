
/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    modules.imgeditor.view
 *  Class:      TransformToolView
 *  Source:     D:\a.krasovsky\Dropbox\projects\my\site\NastasiaEditor\src\modules\imgeditor\view\TransformToolView.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2014.01.15 05:00:19 AST
 */

package modules.imgeditor.view
{

import examples.components.GuideContainer;
import flash.accessibility.*;
import flash.debugger.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.events.MouseEvent;
import flash.external.*;
import flash.geom.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import modules.imgeditor.event.renderer.LayerItemRendererEvent;
import modules.imgeditor.view.components.LayersList;
import mx.binding.*;
import mx.binding.IBindingClient;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.mx_internal;
import mx.events.FlexEvent;
import mx.filters.*;
import mx.graphics.SolidColor;
import mx.graphics.SolidColorStroke;
import mx.styles.*;
import spark.components.Button;
import spark.components.Group;
import spark.primitives.Rect;



//  begin class def
public class TransformToolView
    extends spark.components.Group
    implements mx.binding.IBindingClient
{

    //  instance variables
    [Bindable]
	/**
 * @private
 **/
    public var addImageButton : spark.components.Button;

    [Bindable]
	/**
 * @private
 **/
    public var border : spark.primitives.Rect;

    [Bindable]
	/**
 * @private
 **/
    public var designArea : spark.components.Group;

    [Bindable]
	/**
 * @private
 **/
    public var guideContainer : examples.components.GuideContainer;

    [Bindable]
	/**
 * @private
 **/
    public var imageGroup : spark.components.Group;

    [Bindable]
	/**
 * @private
 **/
    public var layerList : modules.imgeditor.view.components.LayersList;


    //  type-import dummies



    //  constructor (Flex display object)
    /**
     * @private
     **/
    public function TransformToolView()
    {
        super();

        mx_internal::_document = this;


        var bindings:Array = _TransformToolView_bindingsSetup();
        var watchers:Array = [];

        var target:Object = this;

        if (_watcherSetupUtil == null)
        {
            var watcherSetupUtilClass:Object = getDefinitionByName("_modules_imgeditor_view_TransformToolViewWatcherSetupUtil");
            watcherSetupUtilClass["init"](null);
        }

        _watcherSetupUtil.setup(this,
                    function(propertyName:String):* { return target[propertyName]; },
                    function(propertyName:String):* { return TransformToolView[propertyName]; },
                    bindings,
                    watchers);

        mx_internal::_bindings = mx_internal::_bindings.concat(bindings);
        mx_internal::_watchers = mx_internal::_watchers.concat(watchers);


        // layer initializers

       
        // properties
        this.width = 460;
        this.height = 300;
        this.mouseEnabled = false;
        this.mxmlContent = [_TransformToolView_Group2_i(), _TransformToolView_GuideContainer1_i(), _TransformToolView_Button1_i(), _TransformToolView_LayersList1_i()];


        // events
        this.addEventListener("preinitialize", ___TransformToolView_Group1_preinitialize);
        this.addEventListener("creationComplete", ___TransformToolView_Group1_creationComplete);










        for (var i:uint = 0; i < bindings.length; i++)
        {
            Binding(bindings[i]).execute();
        }


    }

    /**
     * @private
     **/ 
    private var __moduleFactoryInitialized:Boolean = false;

    /**
     * @private
     * Override the module factory so we can defer setting style declarations
     * until a module factory is set. Without the correct module factory set
     * the style declaration will end up in the wrong style manager.
     **/ 
    override public function set moduleFactory(factory:IFlexModuleFactory):void
    {
        super.moduleFactory = factory;
        
        if (__moduleFactoryInitialized)
            return;

        __moduleFactoryInitialized = true;


        // our style settings



                         
    }
 
    //  initialize()
    /**
     * @private
     **/
    override public function initialize():void
    {


        super.initialize();
    }


    //  scripts
    //  <Script>, line 11 - 153

        import com.vstyran.transform.events.GuidelineEvent;
        import com.vstyran.transform.model.Guideline;

        import examples.components.UIGuideTransformTool;
        import examples.delegate.GuideLinesDelegate;

        import modules.imgeditor.event.ImageEditorEvent;
        import modules.imgeditor.event.ToolsEvent;
        import modules.imgeditor.event.renderer.LayerItemRendererEvent;

        import modules.imgeditor.model.LayersModel;
        import modules.imgeditor.view.components.BitmapLayerDisplObj;
        import modules.imgeditor.view.components.ILayerDisplObj;

        import mx.collections.ArrayCollection;
        import mx.controls.Alert;
        import mx.core.UIComponentGlobals;
        import mx.events.DynamicEvent;
        import mx.events.FlexEvent;

        import spark.components.Image;

        [Dispatcher]
        public var dispatcher:IEventDispatcher;

        [Inject]
        [Bindable]
        public var layersModel:LayersModel;

        [Bindable]
        private var deletedObjects:ArrayCollection = new ArrayCollection();

        protected function designArea_clickHandler(event:MouseEvent):void {
            if (event.target == designArea) {
                deselect();
            }
        }

        protected function tool_deleteTargetHandler(event:Event):void {
            deletedObjects.addItem(tool.target);
            designArea.removeElement(tool.target);
            deselect();

        }

        private function deselect():void {
            if (tool.target != null) {
                tool.targets = null;
                tool.visible = false;
                tool.includeInLayout = false;
            }

        }

        private function select(event:MouseEvent):void {
            tool.targets = [event.currentTarget];
            tool.visible = true;
            tool.includeInLayout = true;
            updateGuides();
            tool.startMoving(event);

        }

        protected function button1_clickHandler(event:MouseEvent):void {
            for each (var image:Image in deletedObjects) {
                designArea.addElement(image);
            }

            deletedObjects.removeAll();
        }

        protected function updateGuides():void {
            var guidelines:Vector.<Guideline> = GuideLinesDelegate.createGuidelines(imageGroup, tool);
            tool.guidelines = guidelines;
        }


        private function creationCompleteHandler(event:FlexEvent):void {
            addImages();
            updateGuides();
        }

        private function addImages():void {


        }

        public function addItem(image:Image, index:int = 0):void
        {
            imageGroup.addElementAt(image, index);
            image.addEventListener(MouseEvent.MOUSE_DOWN, image_mouseDownHandler);
        }


        private function tool_guidelinesUpdateHandler(event:GuidelineEvent):void {
            guideContainer.updateGuideLines(event);
        }

        private function image_mouseDownHandler(event:MouseEvent):void {
            select(event);
        }

        private function addImageButton_clickHandler(event:MouseEvent):void {
            dispatcher.dispatchEvent(new ImageEditorEvent(ImageEditorEvent.ADD_IMAGE));
        }

        private var _tool:UIGuideTransformTool;
        public function get tool():UIGuideTransformTool {
            if (_tool == null) {
                _tool = new UIGuideTransformTool();
                _tool.addEventListener("deleteTarget", tool_deleteTargetHandler);
                _tool.addEventListener(GuidelineEvent.GUIDELINES_UPDATE, tool_guidelinesUpdateHandler);
                designArea.addElement(_tool);
            }
            return _tool;
        }

        private function layerList_selectImageHandler(event:LayerItemRendererEvent):void {
            var layer:ILayerDisplObj = layersModel.layers[event.data] as BitmapLayerDisplObj;
            dispatcher.dispatchEvent(new ToolsEvent(ToolsEvent.SELECTION_TOOL, layer));
        }

        private function preinitializeHandler(event:FlexEvent):void {

                // setup global error handling
                UIComponentGlobals.catchCallLaterExceptions = true;
                systemManager.addEventListener("callLaterError", handleErrors);
        }

        public function handleErrors(event:Event):void {
            if (event is DynamicEvent && event.hasOwnProperty("error")) {
                // you could also send this back to your server
                var error:Error = DynamicEvent(event).error as Error;
                trace("Error!\n" + error.getStackTrace());
                Alert.show("There has been an error in the application", "", Alert.OK);

                if (ExternalInterface.available) {
                    ExternalInterface.call("handleApplicationError");
                }
            }
        }
        

    //  end scripts


    //  supporting function definitions for properties, events, styles, effects
private function _TransformToolView_Group2_i() : spark.components.Group
{
	var temp : spark.components.Group = new spark.components.Group();
	temp.width = 460;
	temp.height = 300;
	temp.verticalCenter = 0;
	temp.horizontalCenter = 0;
	temp.mxmlContent = [_TransformToolView_Rect1_c(), _TransformToolView_Rect2_i(), _TransformToolView_Group3_i()];
	temp.id = "designArea";
	if (!temp.document) temp.document = this;
	designArea = temp;
	mx.binding.BindingManager.executeBindings(this, "designArea", designArea);
	return temp;
}

private function _TransformToolView_Rect1_c() : spark.primitives.Rect
{
	var temp : spark.primitives.Rect = new spark.primitives.Rect();
	temp.top = 0;
	temp.right = 0;
	temp.left = 0;
	temp.bottom = 0;
	temp.fill = _TransformToolView_SolidColor1_c();
	temp.initialized(this, null)
	return temp;
}

private function _TransformToolView_SolidColor1_c() : mx.graphics.SolidColor
{
	var temp : mx.graphics.SolidColor = new mx.graphics.SolidColor();
	temp.color = 14540253;
	return temp;
}

private function _TransformToolView_Rect2_i() : spark.primitives.Rect
{
	var temp : spark.primitives.Rect = new spark.primitives.Rect();
	temp.top = 45;
	temp.right = 30;
	temp.left = 30;
	temp.bottom = 25;
	temp.stroke = _TransformToolView_SolidColorStroke1_c();
	temp.initialized(this, "border")
	border = temp;
	mx.binding.BindingManager.executeBindings(this, "border", border);
	return temp;
}

private function _TransformToolView_SolidColorStroke1_c() : mx.graphics.SolidColorStroke
{
	var temp : mx.graphics.SolidColorStroke = new mx.graphics.SolidColorStroke();
	temp.color = 11316396;
	return temp;
}

private function _TransformToolView_Group3_i() : spark.components.Group
{
	var temp : spark.components.Group = new spark.components.Group();
	temp.mouseEnabled = false;
	temp.id = "imageGroup";
	if (!temp.document) temp.document = this;
	imageGroup = temp;
	mx.binding.BindingManager.executeBindings(this, "imageGroup", imageGroup);
	return temp;
}

private function _TransformToolView_GuideContainer1_i() : examples.components.GuideContainer
{
	var temp : examples.components.GuideContainer = new examples.components.GuideContainer();
	temp.width = 460;
	temp.height = 300;
	temp.verticalCenter = 0;
	temp.horizontalCenter = 0;
	temp.id = "guideContainer";
	if (!temp.document) temp.document = this;
	guideContainer = temp;
	mx.binding.BindingManager.executeBindings(this, "guideContainer", guideContainer);
	return temp;
}

private function _TransformToolView_Button1_i() : spark.components.Button
{
	var temp : spark.components.Button = new spark.components.Button();
	temp.label = "add";
	temp.left = 0;
	temp.top = 0;
	temp.addEventListener("click", __addImageButton_click);
	temp.id = "addImageButton";
	if (!temp.document) temp.document = this;
	addImageButton = temp;
	mx.binding.BindingManager.executeBindings(this, "addImageButton", addImageButton);
	return temp;
}

/**
 * @private
 **/
public function __addImageButton_click(event:flash.events.MouseEvent):void
{
	addImageButton_clickHandler(event)
}

private function _TransformToolView_LayersList1_i() : modules.imgeditor.view.components.LayersList
{
	var temp : modules.imgeditor.view.components.LayersList = new modules.imgeditor.view.components.LayersList();
	temp.top = 30;
	temp.addEventListener("selectImage", __layerList_selectImage);
	temp.id = "layerList";
	if (!temp.document) temp.document = this;
	layerList = temp;
	mx.binding.BindingManager.executeBindings(this, "layerList", layerList);
	return temp;
}

/**
 * @private
 **/
public function __layerList_selectImage(event:modules.imgeditor.event.renderer.LayerItemRendererEvent):void
{
	layerList_selectImageHandler(event)
}

/**
 * @private
 **/
public function ___TransformToolView_Group1_preinitialize(event:mx.events.FlexEvent):void
{
	preinitializeHandler(event)
}

/**
 * @private
 **/
public function ___TransformToolView_Group1_creationComplete(event:mx.events.FlexEvent):void
{
	creationCompleteHandler(event)
}


    //  binding mgmt
    private function _TransformToolView_bindingsSetup():Array
    {
        var result:Array = [];

        result[0] = new mx.binding.Binding(this,
            function():Object
            {

                return (layersModel.layersList);
            },
            null,
            "layerList.dataProvider"
            );


        return result;
    }


    /**
     * @private
     **/
    public static function set watcherSetupUtil(watcherSetupUtil:IWatcherSetupUtil2):void
    {
        (TransformToolView)._watcherSetupUtil = watcherSetupUtil;
    }

    private static var _watcherSetupUtil:IWatcherSetupUtil2;



    //  embed carrier vars
    //  end embed carrier vars

    //  binding management vars
    /**
     * @private
     **/
    mx_internal var _bindings : Array = [];
    /**
     * @private
     **/
    mx_internal var _watchers : Array = [];
    /**
     * @private
     **/
    mx_internal var _bindingsByDestination : Object = {};
    /**
     * @private
     **/
    mx_internal var _bindingsBeginWithWord : Object = {};

//  end class def
}

//  end package def
}

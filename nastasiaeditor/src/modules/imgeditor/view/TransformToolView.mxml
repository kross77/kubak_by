<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
               xmlns:s="library://ns.adobe.com/flex/spark"
               xmlns:components="examples.components.*" xmlns:vcomponents="modules.imgeditor.view.components.*"
               width="460" height="300"
               mouseEnabled="false"
               preinitialize="preinitializeHandler(event)"
               creationComplete="creationCompleteHandler(event)">

    <fx:Script>
		<![CDATA[
        import by.kross77.select.event.SelectEvent;

        import com.vstyran.transform.events.GuidelineEvent;
        import com.vstyran.transform.model.Guideline;

        import examples.components.UIGuideTransformTool;
        import examples.delegate.GuideLinesDelegate;

        import modules.imgeditor.event.ImageEditorEvent;
        import modules.imgeditor.event.LayerManagerEvent;
        import modules.imgeditor.event.ToolsEvent;
        import modules.imgeditor.event.renderer.LayerItemRendererEvent;

        import modules.imgeditor.model.LayersModel;
        import modules.imgeditor.model.vo.LayerVO;
        import modules.imgeditor.service.LayerManagerFactory;
        import modules.imgeditor.view.components.types.BitmapLayerDisplObj;
        import modules.imgeditor.view.components.ILayerDisplObj;
        import modules.imgeditor.view.components.LayerDispObjType;

        import mx.collections.ArrayCollection;
        import mx.controls.Alert;
        import mx.core.UIComponentGlobals;
        import mx.events.DynamicEvent;
        import mx.events.FlexEvent;

        import spark.components.Image;

        [Dispatcher]
        public var dispatcher:IEventDispatcher;

        [Inject]
        [Bindable]
        public var layersModel:LayersModel;

        [Bindable]
        private var deletedObjects:ArrayCollection = new ArrayCollection();

        [Inject]
        public var factory:LayerManagerFactory;

        protected function designArea_clickHandler(event:MouseEvent):void {
            if (event.target == designArea) {
                deselect();
            }
        }

        protected function tool_deleteTargetHandler(event:Event):void {
            deletedObjects.addItem(tool.target);
            designArea.removeElement(tool.target);
            deselect();

        }

        private function deselect():void {
            if (tool.target != null) {
                tool.targets = null;
                tool.visible = false;
                tool.includeInLayout = false;
            }

        }

        private function select(event:MouseEvent):void {
            tool.targets = [event.currentTarget];
            tool.visible = true;
            tool.includeInLayout = true;
            updateGuides();
            tool.startMoving(event);

        }

        protected function button1_clickHandler(event:MouseEvent):void {
            for each (var image:Image in deletedObjects) {
                designArea.addElement(image);
            }

            deletedObjects.removeAll();
        }

        protected function updateGuides():void {
            var guidelines:Vector.<Guideline> = GuideLinesDelegate.createGuidelines(imageGroup, tool);
            tool.guidelines = guidelines;
        }


        private function creationCompleteHandler(event:FlexEvent):void {
            addImages();
            updateGuides();
        }

        private function addImages():void {


        }

        public function addItem(image:ILayerDisplObj, index:int = 0):void {
            imageGroup.addElementAt(image, index);
            image.addEventListener(MouseEvent.MOUSE_DOWN, image_mouseDownHandler);
        }


        private function tool_guidelinesUpdateHandler(event:GuidelineEvent):void {
            guideContainer.updateGuideLines(event);
        }

        private function image_mouseDownHandler(event:MouseEvent):void {
            select(event);
        }

       /* private function addImageButton_clickHandler(event:MouseEvent):void {
            dispatcher.dispatchEvent(new SelectEvent(SelectEvent.BROWSE, LayerDispObjType.FILL_IMAGE));
        }*/

        private function addImageButton_clickHandler(event:MouseEvent):void {
            var layerVO:LayerVO = LayerVO.create(LayerDispObjType.FILL_TEST);
            var layer:ILayerDisplObj = factory.getLayer(layerVO);
            layersModel.addLayer(layer);
            //dispatcher.dispatchEvent(new LayerManagerEvent(LayerManagerEvent.CREATE_LAYER, layerVO));
        }

        private var _tool:UIGuideTransformTool;
        public function get tool():UIGuideTransformTool {
            if (_tool == null) {
                _tool = new UIGuideTransformTool();
                _tool.addEventListener("deleteTarget", tool_deleteTargetHandler);
                _tool.addEventListener(GuidelineEvent.GUIDELINES_UPDATE, tool_guidelinesUpdateHandler);
                designArea.addElement(_tool);
            }
            return _tool;
        }

        private function layerList_selectImageHandler(event:LayerItemRendererEvent):void {
            var layer:ILayerDisplObj = layersModel.layers[event.data] as BitmapLayerDisplObj;
            dispatcher.dispatchEvent(new ToolsEvent(ToolsEvent.SELECTION_TOOL, layer));
        }

        private function preinitializeHandler(event:FlexEvent):void {

            // setup global error handling
            UIComponentGlobals.catchCallLaterExceptions = true;
            systemManager.addEventListener("callLaterError", handleErrors);
        }

        public function handleErrors(event:Event):void {
            if (event is DynamicEvent && event.hasOwnProperty("error")) {
                // you could also send this back to your server
                var error:Error = DynamicEvent(event).error as Error;
                trace("Error!\n" + error.getStackTrace());
                Alert.show("There has been an error in the application", "", Alert.OK);

                if (ExternalInterface.available) {
                    ExternalInterface.call("handleApplicationError");
                }
            }
        }
        ]]>
	</fx:Script>


	<s:Group id="designArea" width="460" height="300" verticalCenter="0" horizontalCenter="0">

		<!-- background fill -->
		<s:Rect top="0" right="0" left="0" bottom="0">                                                                    
			<s:fill>                                                                                                      
				<s:SolidColor color="#dddddd"/>                                                                           
			</s:fill>                                                                                                     
		</s:Rect>                                                                                                         
		<s:Rect id="border" top="45" right="30" left="30" bottom="25">                                                    
			<s:stroke>                                                                                                    
				<s:SolidColorStroke color="#ACACAC"/>                                                                     
			</s:stroke>                                                                                                   
		</s:Rect>


        <s:Group id="imageGroup" mouseEnabled="false"/>

	</s:Group>
    <components:GuideContainer id="guideContainer" width="460" height="300" verticalCenter="0" horizontalCenter="0" />

    <s:Button
            id="addImageButton"
            label="add"
            click="addImageButton_clickHandler(event)"
            left="0" top="0"
            />

    <vcomponents:LayersList
            id="layerList"
            top="30"
            selectImage="layerList_selectImageHandler(event)"
            dataProvider="{layersModel.layersList}"
            >
    </vcomponents:LayersList>
</s:Group>

<asdoc>

<packageRec name='org.as3commons.collections.framework.null' fullname='org.as3commons.collections.framework.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<interfaceRec name='IDataProvider' fullname='org.as3commons.collections.framework:IDataProvider' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\framework\IDataProvider.as' namespace='org.as3commons.collections.framework' access='public' baseClasses='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Data provider definition.
	 
	 <p><strong>Description</strong></p>
	 
	 <p>A data provider is a data structure with a known size and an index
	 based read access. The data provider interface is required by data
	 driven user interface controls.</p>
	 
	 <p><strong>Note</strong></p>
	 
	 <p>This library provides only two implementors of this interface (<code>ArrayList,
	 SortedList</code>).</p>
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 09.03.2010
	 ]]></author>
</interfaceRec>
<method name='itemAt' fullname='org.as3commons.collections.framework:IDataProvider/org.as3commons.collections.framework:IDataProvider:itemAt' isStatic='false' isFinal='false' isOverride='false'  param_names='index' param_types='uint' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 Returns the item at the specified position.
		 
		 ]]></description>
<param><![CDATA[index The position of the item to get.
		 ]]></param>
<return><![CDATA[The item or <code>undefined</code> if the position is invalid.
		 ]]></return>
</method>
<method name='size' fullname='org.as3commons.collections.framework:IDataProvider/org.as3commons.collections.framework:IDataProvider:size/get' isStatic='false' isFinal='false' isOverride='false'  result_type='uint'>
<description><![CDATA[
		 The number of items contained by the data provider.
		 ]]></description>
</method>
<packageRec name='org.as3commons.collections.framework.null' fullname='org.as3commons.collections.framework.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<interfaceRec name='IIterator' fullname='org.as3commons.collections.framework:IIterator' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\framework\IIterator.as' namespace='org.as3commons.collections.framework' access='public' baseClasses='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Base iterator definition.
	 
	 <p><strong>Description</strong></p>
	 
	 <p>An <code>IIterator</code> provides basic sequential access to its underlying
	 data structure while hiding the specific implementation aspects.</p>
	 
	 <p><strong>Notes</strong></p>
	 
	 <p>An iterator basically does not have the ability to modify its associated structure. However,
	 subtypes of this interface may add such functionality.</p>
	 
	 <p>The order in which the iterator returns the items of the iterable data structure
	 depends on the particular data structure implementation. Unordered collection such as
	 <code>Map</code> or <code>Set</code> do not have a predictable order and the order of
	 items returned by two iterators of the same collection may differ.</p>
	 
	 <p>Iterators generally do not take notice if the associated data structure changes. Modifying the
	 structure within an iteration loop (except through the iterator) may cause unpredictable results.</p>
	    
	 ]]></description>
<author><![CDATA[Jens Struwe 17.02.2010
	 ]]></author>
<see><![CDATA[ICollectionIterator ICollectionIterator interface - Description of the feature richer collection iterator features.
	 ]]></see>
</interfaceRec>
<method name='hasNext' fullname='org.as3commons.collections.framework:IIterator/org.as3commons.collections.framework:IIterator:hasNext' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		 Returns <code>true</code> if there are succeeding items to be enumerated.
		 
		 <p>Returns <code>false</code>, if the internal cursor is placed after the
		 last item or the collection is empty.</p>
		 
		 ]]></description>
<return><![CDATA[<code>true</code> if there are items left to be enumerated.
		 ]]></return>
</method>
<method name='next' fullname='org.as3commons.collections.framework:IIterator/org.as3commons.collections.framework:IIterator:next' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Returns the next item and places the internal cursor after that item.
		 
		 <p>Returnes <code>undefined</code> if no next item exists or the collection is empty.</p>
		 
		 ]]></description>
<return><![CDATA[The next item of iteration or <code>undefined</code> if no such item exists.
		 ]]></return>
</method>
<packageRec name='org.as3commons.collections.framework.null' fullname='org.as3commons.collections.framework.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<interfaceRec name='IIterable' fullname='org.as3commons.collections.framework:IIterable' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\framework\IIterable.as' namespace='org.as3commons.collections.framework' access='public' baseClasses='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Iterable data structure definition.
	 
	 <p><strong>Description</strong></p>
	 
	 <p>Any object implementing <code>IIterable</code> can be sequentially enumerated using an iterator.</p>
	 
	 <p>Any <code>IIterable</code> instance can then also be recursively iterated using an <code>IRecursiveIterator</code>
	 implementation (<code>RecursiveIterator, RecursiveFilterIterator</code>) or convenient filtered using
	 a filter iterator (<code>FilterIterator, RecursiveFilterIterator</code>).</p>
	 
	 <p><strong>Notes</strong></p>
	 
	 <p>The iterator obtained by the <code>iterator()</code> method returns always the actual item added
	 to the data structure regardless of the specific internal storage such as Node, MapEntry
	 and so on.</p>
	 
	 <p>The iterator of an <code>IIterable</code> instance returned by the <code>iterator()</code>
	 method is always a basic <code>IIterator</code>. Subtypes of this interface may return here a
	 specialised iterator with richer functionality (such as adding or removing of items during
	 an iteration loop). It is then possible to downcast the returned iterator to the specialised
	 iterator type.</p>
	    
	 <p id="link_IteratorDowncastExample"><strong>Iterator downcast example</strong></p>
	 
	 <a class="exampleCollapsed" href="#link_IteratorDowncastExample" onClick="toggleExample(this, 'IteratorDowncastExample');">Show example</a><br /><div id="IteratorDowncastExample" style='display:none'><listing version="3.0">package {
    import org.as3commons.collections.ArrayList;
    import org.as3commons.collections.framework.ICollectionIterator;
    import org.as3commons.collections.framework.IIterator;
    import org.as3commons.collections.framework.IListIterator;
    import org.as3commons.collections.framework.IOrderedList;
    import org.as3commons.collections.framework.IOrderedListIterator;
    import flash.display.Sprite;

    public class IteratorDowncastExample extends Sprite {

        public function IteratorDowncastExample() {
            var list : IOrderedList = new ArrayList();
            var i : IIterator = list.iterator();
            
            trace ("i", i is IIterator); // true
            trace ("ci", i is ICollectionIterator); // true
            trace ("li", i is IListIterator); // true
            trace ("ali", i is IOrderedListIterator); // true
            
            var ci : ICollectionIterator = list.iterator() as ICollectionIterator;

            trace ("i", ci is IIterator); // true
            trace ("ci", ci is ICollectionIterator); // true
            trace ("li", ci is IListIterator); // true
            trace ("ali", ci is IOrderedListIterator); // true

            var li : IListIterator = list.iterator() as IListIterator;

            trace ("i", li is IIterator); // true
            trace ("ci", li is ICollectionIterator); // true
            trace ("li", li is IListIterator); // true
            trace ("ali", li is IOrderedListIterator); // true

            var ali : IOrderedListIterator = list.iterator() as IOrderedListIterator;

            trace ("i", ali is IIterator); // true
            trace ("ci", ali is ICollectionIterator); // true
            trace ("li", ali is IListIterator); // true
            trace ("ali", ali is IOrderedListIterator); // true
        }
    }
}
</listing></div>
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 17.03.2010
	 ]]></author>
<see><![CDATA[org.as3commons.collections.iterators.RecursiveIterator RecursiveIterator - Recursive iterator usage example.
	 ]]></see>
<see><![CDATA[org.as3commons.collections.iterators.RecursiveFilterIterator RecursiveFilterIterator - Recursive filter iterator usage example.
	 ]]></see>
<see><![CDATA[org.as3commons.collections.iterators.FilterIterator FilterIterator - Filter iterator usage example.
	 ]]></see>
</interfaceRec>
<method name='iterator' fullname='org.as3commons.collections.framework:IIterable/org.as3commons.collections.framework:IIterable:iterator' isStatic='false' isFinal='false' isOverride='false'  param_names='cursor' param_types='*' param_defaults='unknown' result_type='org.as3commons.collections.framework:IIterator'>
<description><![CDATA[
		 Returns an iterator over the iterable data structure.
		 
		 <p>The <code>cursor</code> parameter is optional and not considered by all iterable
		 data structures. E.g. the iterator of an unordered collection such as <code>Map</code>
		 or <code>Set</code> starts always with the first item found. Still passing a parameter to
		 such a data structure does not throw an error and will simply show no effect.</p>
		 
		 <p>The type of the cursor is unspecified and depends on the particular data structure.
		 E.g. lists allow to specify an index, sets to specify an item and maps to specify a key.</p>
		 
		 <p>If <code>cursor</code> is specified, the iterator returns the item that is related
		 to that cursor with the first call to <code>next()</code> (and its predecessor with
		 the first call to <code>previous()</code> if the iterator allows bidirectional
		 navigation.</p>
		 
		 ]]></description>
<param><![CDATA[cursor The initial cursor position.
		 ]]></param>
<return><![CDATA[An iterator.
		 ]]></return>
</method>
<packageRec name='org.as3commons.collections.framework.null' fullname='org.as3commons.collections.framework.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<interfaceRec name='IComparator' fullname='org.as3commons.collections.framework:IComparator' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\framework\IComparator.as' namespace='org.as3commons.collections.framework' access='public' baseClasses='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Comparator definition.
	 
	 <p><strong>Description</strong></p>
	 
	 <p>A comparator defines the order of items in sorted collections or in sort operations.</p>
	 
	 <p><strong>Notes</strong></p>
	 
	 <p>To setup a comparator it is necessary to create a new class which
	 implements this interface.</p>
	 
	 <p>Two basic comparators are provided by this library. A <code>StringComparator</code> in
	 order to sort string literals and a <code>NumericComparator</code> to sort numbers.</p>
	 
	 <p id="link_ComparatorImplementationExample"><strong>Comparator implementation example</strong></p>
	 
	 <a class="exampleCollapsed" href="#link_ComparatorImplementationExample" onClick="toggleExample(this, 'ComparatorImplementationExample');">Show example</a><br /><div id="ComparatorImplementationExample" style='display:none'><listing version="3.0">package {
    import org.as3commons.collections.ArrayList;
    import flash.display.Sprite;

    public class ComparatorImplementationExample extends Sprite {

        public function ComparatorImplementationExample() {
            var list : ArrayList = new ArrayList();
            list.array = [3, 2, 5, 9, 4, 1, 3, 4, 6, 8];
            list.sort(new OddEvenComparator());
            trace (list.toArray()); // 1,3,3,5,9,2,4,4,6,8
        }
    }
}

import org.as3commons.collections.framework.IComparator;
import org.as3commons.collections.utils.UncomparableType;

internal class OddEvenComparator implements IComparator {

    public function compare(item1 :  item2 :  : int {
        if (isNaN(item1)) throw new UncomparableType(Number, item1);
        if (isNaN(item2)) throw new UncomparableType(Number, item2);
        
        // sort numeric if both items odd or even
        if ((item1 + item2) % 2 == 0) {
            if (item1 &lt; item2) return -1;
            if (item1 &gt; item2) return 1;
            return 0;
        }
        
        // sort odd numbers before even numbers
        if (item1 % 2) return -1; // item1 odd, item2 even
        return 1; // item1 even, item2 odd
    }
}
</listing></div>
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 17.02.2010
	 ]]></author>
<see><![CDATA[org.as3commons.collections.utils.NumericComparator NumericComparator - Numeric comparator implementation.
	 ]]></see>
<see><![CDATA[org.as3commons.collections.utils.StringComparator StringComparator - Literal comparator implementation.
	 ]]></see>
</interfaceRec>
<method name='compare' fullname='org.as3commons.collections.framework:IComparator/org.as3commons.collections.framework:IComparator:compare' isStatic='false' isFinal='false' isOverride='false'  param_names='item1;item2' param_types='*;*' param_defaults='undefined;undefined' result_type='int'>
<description><![CDATA[
		 Compares two items.
		 
		 <p>There are two requirements to implementations of this method.</p>
		 <ol>
		 <li>The method is supposed to throw an exception, if an item cannot be
		 compared due to a type mismatch. In such a case the sort operation
		 cannot be performed, which is a critical error.</li>
		 <li>Comparing a wrong typed item with oneself should throw an error.
		 Adding a wrong typed item as the first element in a still empty sorted
		 structure (such as <code>Treap</code> or <code>SortedList</code>) would
		 be successful without that exception, since there is no comparision
		 to other elements, that could fail. Thus, the sorted structures test
		 the initial item against itself.</li>
		 </ol>
		 
		 ]]></description>
<param><![CDATA[item1 The first operant.
		 ]]></param>
<param><![CDATA[item1 The second operant.
		 ]]></param>
<throws><![CDATA[org.as3commons.collections.utils.UncomparableType if eather of the items cannot be compared.
		 ]]></throws>
<returns><![CDATA[<code>-1</code> if the first operant is lesser, <code>1</code> if greater
		 and <code>0</code> if both items are equal.
		 ]]></returns>
</method>
<packageRec name='org.as3commons.collections.framework.null' fullname='org.as3commons.collections.framework.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<interfaceRec name='ICollection' fullname='org.as3commons.collections.framework:ICollection' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\framework\ICollection.as' namespace='org.as3commons.collections.framework' access='public' baseClasses='org.as3commons.collections.framework:IIterable' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Base collection definition.
	 
	 <p><strong>Description</strong></p>
	 
	 <p>This is the base definition of all collections in this library. A collection is defined
	 as a data structure with a generalised interface.</p>
	 
	 <ul>
	 <li>Elements are accessed (at least) sequentially accessed using an iterator.</li>
	 <li>No predefined oder of items.</li>
	 <li>May or may not contain duplicates.</li>
	 </ul>
	 
	 <p><strong>Features</strong></p>
	 
	 <p>Each collection in this library provides:</p>
	 
	 <ul>
	 <li>Rich sequential access using an <code>ICollectionIterator</code>.<br />
	 <code>iterator()</code></li>
	 <li>Current size information (in constant time).<br />
	 <code>size</code></li>
	 <li>Conversion into an array.<br />
	 <code>toArray()</code></li>
	 <li>Existance test and removal of items (by instance).<br />
	 <code>has(), remove()</code></li>
	 <li>Removing of the entire content.<br />
	 <code>clear()</code></li>
	 </ul>
	 
	 <p><strong>Collection types and subinterfaces</strong></p>
	 
	 <p>A collection can be classified by different criterias.</p>
	 
	 <p><u>Access type</u></p>
	 
	 <p>All collections enable sequential access using an iterator. Lists, sets and maps
	 additionally provide (constant time) access using a unique identifier.</p>
	 	 <ul>
	 <li><code>ICollection</code> - Items can be always sequentially accessed using an iterator.</li>
	 <li><code>IList</code> - Items can be accessed using an (unique) index.</li>
	 <li><code>ISet</code> - Items can be accessed using the (unique) item itself.</li>
	 <li><code>IMap</code> - Items can be accessed using a (unique) key.</li>
	 </ul>
	 
	 <p><u>Order of items</u></p>
	 
	 <p>The <code>ICollection</code> interface does not prescribe the order in which items
	 are stored or returned.</p>
	 
	 <ul>
	 <li><code>ICollection</code> - Items may have an order (or not).</li>
	 <li><code>IOrder</code> - Items are ordered - either by insertion or by a sort order.</li>
	 <li><code>IInsertionOrder</code> - Items are stored in the order they were inserted.</li>
	 <li><code>ISortOrder</code> - Items are ordered depending on a sort criterion.</li>
	 </ul>
	 
	 <p><u>Multiplicity of items</u></p>
	 
	 <p>The <code>ICollection</code> interface does not prescribe whether a collection
	 is permitted to host mulitple entries of the same instance (or not).</p>
	 
	 <ul>
	 <li><code>ICollection</code> - Duplicates may be allowed (or not).</li>
	 <li><code>IDuplicateItemsCollection</code> - Duplicates are explicitly permitted.</li>
	 </ul>
	 
	 <p><u>Binding capabilities</u></p>
	 
	 <p>Certain collections (all lists, sets and maps) are offered in an additional bindable
	 version which enables the external tracking of its state in a performant way.</p>
	 
	 <ul>
	 <li><code>ICollection</code> - Bindable (or not).</li>
	 <li><code>ICollectionFx</code> - Bindable.</li>
	 </ul>
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 17.03.2010
	 ]]></author>
</interfaceRec>
<method name='clear' fullname='org.as3commons.collections.framework:ICollection/org.as3commons.collections.framework:ICollection:clear' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		 Removes all items from the collection.
		 
		 <p>If the collection is already empty, the method aborts with <code>false</code>.</p>
		 
		 ]]></description>
<return><![CDATA[<code>true</code> if items have been removed.
		 ]]></return>
</method>
<method name='has' fullname='org.as3commons.collections.framework:ICollection/org.as3commons.collections.framework:ICollection:has' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 Tests if an item is contained by the collection.
		 
		 ]]></description>
<param><![CDATA[item The item to test.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item is contained.
		 ]]></return>
</method>
<method name='remove' fullname='org.as3commons.collections.framework:ICollection/org.as3commons.collections.framework:ICollection:remove' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 Removes an item from the collection.
		 
		 <p>Trying to remove an item which is not contained by the collection
		 leaves the collection untouched and returns <code>false</code>.</p>
		 
		 <p>If the collection contains multiple entries of the given item
		 the first occurrence of the item will be removed.</p>
		 
		 ]]></description>
<param><![CDATA[item The item to remove.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item has been removed.
		 ]]></return>
</method>
<method name='toArray' fullname='org.as3commons.collections.framework:ICollection/org.as3commons.collections.framework:ICollection:toArray' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[
		 Returns an array of all items.
		 
		 <p>The order of items in the array is the same as in the particular collection.</p>
		 
		 <p>Certain collections do not have an explicit order (<code>Map</code>, <code>Set</code>).
		 The order of the items in the array is then not predictable.</p>  
		 
		 <p>If the collection maintains an array as its data source, a copy
		 of the internal array is returned rather than the original array.</p>
		 
		 ]]></description>
<return><![CDATA[An array of the items of the collection.
		 ]]></return>
</method>
<method name='size' fullname='org.as3commons.collections.framework:ICollection/org.as3commons.collections.framework:ICollection:size/get' isStatic='false' isFinal='false' isOverride='false'  result_type='uint'>
<description><![CDATA[
		 The number of items contained by the collection.
		 ]]></description>
</method>
<packageRec name='org.as3commons.collections.framework.null' fullname='org.as3commons.collections.framework.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<interfaceRec name='IRecursiveIterator' fullname='org.as3commons.collections.framework:IRecursiveIterator' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\framework\IRecursiveIterator.as' namespace='org.as3commons.collections.framework' access='public' baseClasses='org.as3commons.collections.framework:IIterator' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Recursive iterator definition.
	 
	 <p><strong>Description</strong></p>
	 
	 <p>A recursive iterator enables the recursive enumeration of an iterable data structure,
	 where the contained elements are either also iterable or single items.</p>
	 
	 <p><strong>Features</strong></p>
	 
	 <p>This interface adds a recursion <code>depth</code> information to the <code>IIterable</code> definition.</p>
	 
	 <p><strong>Notes</strong></p>
	 
	 <p>There are 2 resursive iterators provided by this library. The <code>RecursiveIterator</code>
	 returns all items of a recursive structure. The <code>RecursiveFilterIterator</code> lets
	 apply a filter function and returns only items that pass this filter.</p>
	 
	 <p>A recursive iterator does not have the ability to modify its underlying data structure.</p>
	 
	 <p>A recursive iterator recognises recursions and skips the iteration over items
	 that are direct or later children of itself.</p>
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 17.02.2010
	 ]]></author>
<see><![CDATA[IIterator IIterator interface - Description of the basic iterator features.
	 ]]></see>
<see><![CDATA[org.as3commons.collections.iterators.RecursiveIterator RecursiveIterator - RecursiveIterator usage example.
	 ]]></see>
<see><![CDATA[org.as3commons.collections.iterators.RecursiveFilterIterator RecursiveFilterIterator - RecursiveFilterIterator usage example.
	 ]]></see>
</interfaceRec>
<method name='depth' fullname='org.as3commons.collections.framework:IRecursiveIterator/org.as3commons.collections.framework:IRecursiveIterator:depth/get' isStatic='false' isFinal='false' isOverride='false'  result_type='uint'>
<description><![CDATA[
		 The recursion depth of the current item.
		 ]]></description>
</method>
<packageRec name='org.as3commons.collections.framework.null' fullname='org.as3commons.collections.framework.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<interfaceRec name='ICollectionIterator' fullname='org.as3commons.collections.framework:ICollectionIterator' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\framework\ICollectionIterator.as' namespace='org.as3commons.collections.framework' access='public' baseClasses='org.as3commons.collections.framework:IIterator' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Base collection iterator definition.
	 
	 <p><strong>Description</strong></p>
	 
	 <p>An <code>ICollectionIterator</code> is an iterator with extended navigation and
	 modification possibilities.</p>
	 
	 <p><strong>Features</strong></p>
	 
	 <ul>
	 <li>Resetting the cursor before the first or after the last item.<br />
	 <code>start(), end()</code></li>
	 <li>Retrieving items in the back direction.<br />
	 <code>hasPrevious(), previous()</code></li>
	 <li>Caching of the last returned item.<br />
	 <code>current</code></li>
	 <li>Removing of items during the iteration.<br />
	 <code>remove()</code></li>
	 </ul>
	 
	 <p><strong>Cursor and current element</strong></p>
	 
	 <p>The internal cursor of an <code>ICollectionIterator</code> can have n + 1 positions: Before the
	 first item, between two items and after the last item. To each possible cursor position
	 is a next and a previous item defined (except to the start and end position where either
	 a next or a previous item is defined).</p>
	 
	 <table class="innertable">
	 
	 <tr>
	 <th>Position</th>
	 <th>Iterator state</th>
	 </tr>
	 
	 <tr>
	 <td>At start</td>
	 <td><pre> ^  1  2  3  4 </pre></td>
	 </tr>
	 
	 <tr>
	 <td>Between two items</td>
	 <td><pre> 1  2  ^  3  4 </pre></td>
	 </tr>
	 
	 <tr>
	 <td>At end</td>
	 <td><pre> 1  2  3  4  ^ </pre></td>
	 </tr>
	 
	 </table>
	 ^ = cursor
	 
	 <p>A current element is available only after a prior <code>next()</code> or
	 <code>previous()</code> call. The current item is nullified after all operations
	 that modify the underlying collection order (<code>add(), remove()</code>)
	 or the cursor position (<code>start(), end()</code>).</p>
	 
	 <table class="innertable">
	 
	 <tr>
	 <th>Operation</th>
	 <th>Return value</th>
	 <th>Current item</th>
	 <th>Iterator state</th>
	 </tr>
	 
	 <tr>
	 <td>initial</td>
	 <td></td>
	 <td>undefined</td>
	 <td><pre> ^  1  2  3  4 </pre></td>
	 </tr>
	 
	 <tr>
	 <td>next()</td>
	 <td>1</td>
	 <td>1</td>
	 <td><pre>[1] ^  2  3  4 </pre></td>
	 </tr>
	 
	 <tr>
	 <td>next()</td>
	 <td>2</td>
	 <td>2</td>
	 <td><pre> 1 [2] ^  3  4 </pre></td>
	 </tr>
	 
	 <tr>
	 <td>remove()</td>
	 <td>true</td>
	 <td>undefined</td>
	 <td><pre> 1  ^  3  4 </pre></td>
	 </tr>
	 
	 <tr>
	 <td>remove()</td>
	 <td>false</td>
	 <td>undefined</td>
	 <td><pre> 1  ^  3  4 </pre></td>
	 </tr>
	 
	 <tr>
	 <td>next()</td>
	 <td>3</td>
	 <td>3</td>
	 <td><pre> 1 [3] ^  4 </pre></td>
	 </tr>
	 
	 <tr>
	 <td>start()</td>
	 <td></td>
	 <td>undefined</td>
	 <td><pre> ^  1  3  4 </pre></td>
	 </tr>
	 
	 </table>
	 ^ = cursor, [n] = current
	 
	 <p>Subsequent calls to <code>next()</code> and <code>previous()</code> return
	 the same item repeatedly since the cursor is placed alternately after or before
	 the item that is returned.</p>
	 
	 <table class="innertable">
	 
	 <tr>
	 <th>Operation</th>
	 <th>Return value</th>
	 <th>Current item</th>
	 <th>Iterator state</th>
	 </tr>
	 
	 <tr>
	 <td>initial</td>
	 <td></td>
	 <td>undefined</td>
	 <td><pre> 1  2  ^  3  4 </pre></td>
	 </tr>
	 
	 <tr>
	 <td>next()</td>
	 <td>3</td>
	 <td>3</td>
	 <td><pre> 1  2 [3] ^  4 </pre></td>
	 </tr>
	 
	 <tr>
	 <td>previous()</td>
	 <td>3</td>
	 <td>3</td>
	 <td><pre> 1  2  ^ [3] 4 </pre></td>
	 </tr>
	 
	 <tr>
	 <td>next()</td>
	 <td>3</td>
	 <td>3</td>
	 <td><pre> 1  2 [3] ^  4 </pre></td>
	 </tr>
	 
	 </table>
	 ^ = cursor, [n] = current
	 
	 <p id="link_CollectionIteratorExample"><strong>Collection iterator example</strong></p>
	 
	 <a class="exampleCollapsed" href="#link_CollectionIteratorExample" onClick="toggleExample(this, 'CollectionIteratorExample');">Show example</a><br /><div id="CollectionIteratorExample" style='display:none'><listing version="3.0">package {
    import org.as3commons.collections.ArrayList;
    import org.as3commons.collections.framework.ICollectionIterator;
    import flash.display.Sprite;

    public class CollectionIteratorExample extends Sprite {

        public function CollectionIteratorExample() {
            var list : ArrayList = new ArrayList();
            var iterator : ICollectionIterator;
            var item : 
            
            // ^ = cursor, [n] = current
            
            // Navigation
            
            list.array = [1, 2, 3];
            iterator = list.iterator() as ICollectionIterator;
            
                                      //  ^  1  2  3
            iterator.next();          // [1] ^  2  3
            iterator.next();          //  1 [2] ^  3
            iterator.next();          //  1  2 [3] ^
            iterator.next();          //  1  2  3  ^
            iterator.previous();      //  1  2  ^ [3]
            iterator.previous();      //  1  ^ [2] 3
            iterator.previous();      //  ^ [1] 2  3
            iterator.previous();      //  ^  1  2  3

            iterator.next();          // [1] ^  2  3
            iterator.next();          //  1 [2] ^  3
            iterator.start();         //  ^  1  2  3

            iterator.next();          // [1] ^  2  3
            iterator.next();          //  1 [2] ^  3
            iterator.end();           //  1  2  3  ^
            
            // Current item

            iterator = list.iterator() as ICollectionIterator;

            trace (iterator.current);   // undefined
            iterator.next();
            trace (iterator.current);   // 1
            iterator.next();
            trace (iterator.current);   // 2
            iterator.next();
            trace (iterator.current);   // 3
            iterator.next();
            trace (iterator.current);   // undefined

            // Remove

            list.array = [1, 2, 3];
            iterator = list.iterator() as ICollectionIterator;
            
                                      //  ^  1  2  3
            iterator.next();          // [1] ^  2  3
            iterator.next();          //  1 [2] ^  3
            iterator.remove();        //  1  ^  3
            iterator.next();          //  1 [3] ^
            iterator.remove();        //  1  ^
            iterator.remove();        //  1  ^

            // Remove during iteration

            list.array = [1, 2, 3, 4, 5];
            iterator = list.iterator() as ICollectionIterator;
            while (iterator.hasNext()) {
                item = iterator.next();
                trace (item); // 1,2,3,4,5

                if (item == 1) iterator.remove();   //  ^  2  3  4  5
                if (item == 3) iterator.remove();   //  2  ^  4  5
                if (item == 5) iterator.remove();   //  2  4  ^
            }
            trace (list.toArray()); // 2,4

            // Reverse iteration

            list.array = [1, 2, 3, 4, 5];
            iterator = list.iterator() as ICollectionIterator;
            iterator.end();
            while (iterator.hasPrevious()) {
                trace (iterator.previous()); // 5,4,3,2,1
            }
        }
    }
}
</listing></div>
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 18.02.2010
	 ]]></author>
<see><![CDATA[IIterator IIterator interface - Description of the basic iterator features.
	 ]]></see>
</interfaceRec>
<method name='end' fullname='org.as3commons.collections.framework:ICollectionIterator/org.as3commons.collections.framework:ICollectionIterator:end' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 Resets the iterator to the position after the last item.
		 
		 <p>The last item of the collection is then returned with a subsequent
		 call to <code>previous()</code>.</p>
		 ]]></description>
</method>
<method name='hasPrevious' fullname='org.as3commons.collections.framework:ICollectionIterator/org.as3commons.collections.framework:ICollectionIterator:hasPrevious' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		 Returns <code>true</code> if there are preceeding items to be enumerated.
		 
		 <p>Returns <code>false</code>, if the internal cursor is placed before the
		 first item or the collection is empty.</p>
		 
		 ]]></description>
<return><![CDATA[<code>true</code> if there are items left to be enumerated.
		 ]]></return>
</method>
<method name='previous' fullname='org.as3commons.collections.framework:ICollectionIterator/org.as3commons.collections.framework:ICollectionIterator:previous' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Returns the previous item and places the internal cursor before that item. 
		 
		 <p>Returnes <code>undefined</code> if no previous item exists or the collection is empty.</p>
		 
		 ]]></description>
<return><![CDATA[The previous item of iteration or <code>undefined</code> if no such item exists.
		 ]]></return>
</method>
<method name='remove' fullname='org.as3commons.collections.framework:ICollectionIterator/org.as3commons.collections.framework:ICollectionIterator:remove' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		 Removes the current item from the collection if any.
		 
		 ]]></description>
<return><![CDATA[<code>true</code> if an item has been removed.
		 ]]></return>
</method>
<method name='start' fullname='org.as3commons.collections.framework:ICollectionIterator/org.as3commons.collections.framework:ICollectionIterator:start' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 Resets the iterator to the position before the first item.
		 
		 <p>The first item of the collection is then returned with a subsequent
		 call to <code>next()</code>.</p>
		 ]]></description>
</method>
<method name='current' fullname='org.as3commons.collections.framework:ICollectionIterator/org.as3commons.collections.framework:ICollectionIterator:current/get' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 The item that most recently has been returned by <code>next()</code>
		 or <code>previous()</code>.
		 
		 <p>Returns <code>undefined</code> if the iterator points to the postion before the first
		 or after the last item or the collection is empty.</p>
		 
		 <p>The current item is nullified after all operations that modify the underlying
		 collection order (<code>add(), remove()</code>) or modify the cursor position
		 (<code>start(), end()</code>).</p>
		 
		 <p>Returns initially <code>undefined</code>.</p>
		 
		 ]]></description>
<return><![CDATA[The last returned item or <code>undefined</code> if no such item.
		 ]]></return>
</method>
<packageRec name='org.as3commons.collections.framework.null' fullname='org.as3commons.collections.framework.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<interfaceRec name='IBasicMapIterator' fullname='org.as3commons.collections.framework:IBasicMapIterator' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\framework\IBasicMapIterator.as' namespace='org.as3commons.collections.framework' access='public' baseClasses='org.as3commons.collections.framework:IIterator' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Base map iterator iterator definition.
	 
	 <p><strong>Description</strong></p>
	 
	 <p>An <code>IMapIterator</code> is an extended <code>IIterator</code> available
	 for all map collections.</p>
	 
	 <p><strong>Features</strong></p>
	 
	 <p>Additionally to the base iterator the <code>IMapIterator</code>
	 provides information about the key of the item:</p>
	 
	 <ul>
	 <li>Key of the last returned item.<br />
	 <code>key</code></li>
	 </ul>
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 15.04.2011
	 ]]></author>
<see><![CDATA[IIterator IIterator interface - Description of the basic iterator features.
	 
	 ]]></see>
<TODO><![CDATA[Rename to IMapIterator while IMapIterator has to be renamed to IMapCollectionIterator.
	 ]]></TODO>
</interfaceRec>
<method name='key' fullname='org.as3commons.collections.framework:IBasicMapIterator/org.as3commons.collections.framework:IBasicMapIterator:key/get' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 The key of the last returned item.
		 
		 <p><code>undefined</code> if the iterator points to the postion before the first
		 or after the last item or the map is empty.</p>
		 
		 <p>The key is reset to <code>undefined</code> after all operations that modify the underlying
		 map order (<code>add(), remove()</code>) or modify the cursor position
		 (<code>start(), end()</code>).</p>
		 
		 <p>Initially <code>undefined</code>.</p>
		 ]]></description>
</method>
<packageRec name='org.as3commons.collections.framework.null' fullname='org.as3commons.collections.framework.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<interfaceRec name='IOrder' fullname='org.as3commons.collections.framework:IOrder' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\framework\IOrder.as' namespace='org.as3commons.collections.framework' access='public' baseClasses='org.as3commons.collections.framework:ICollection' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Definition of a collection whose items are stored in a stable (insertion or sort) order. 
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 12.04.2010
	 ]]></author>
</interfaceRec>
<method name='removeFirst' fullname='org.as3commons.collections.framework:IOrder/org.as3commons.collections.framework:IOrder:removeFirst' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Removes the first item of the ordered collection.
		 
		 ]]></description>
<return><![CDATA[The formerly first item or <code>undefined</code> if the collection is empty.
		 ]]></return>
</method>
<method name='removeLast' fullname='org.as3commons.collections.framework:IOrder/org.as3commons.collections.framework:IOrder:removeLast' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Removes the last item of the ordered collection.
		 
		 ]]></description>
<return><![CDATA[The formerly last item or <code>undefined</code> if the collection is empty.
		 ]]></return>
</method>
<method name='first' fullname='org.as3commons.collections.framework:IOrder/org.as3commons.collections.framework:IOrder:first/get' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 The first item or <code>undefined</code> if the collection is empty.
		 ]]></description>
</method>
<method name='last' fullname='org.as3commons.collections.framework:IOrder/org.as3commons.collections.framework:IOrder:last/get' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 The last item or <code>undefined</code> if the collection is empty.
		 ]]></description>
</method>
<packageRec name='org.as3commons.collections.framework.null' fullname='org.as3commons.collections.framework.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<interfaceRec name='ISet' fullname='org.as3commons.collections.framework:ISet' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\framework\ISet.as' namespace='org.as3commons.collections.framework' access='public' baseClasses='org.as3commons.collections.framework:ICollection' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Base set definition.
	 
	 <p><strong>Description</strong></p>
	 
	 <p>A set cannot contain duplicate elements:</p>
	 
	 <ul>
	 <li>Elements are addressed by instance directly or sequentially accessed using an iterator.</li>
	 <li>No predefined oder of items.</li>
	 <li>Cannot contain duplicates.</li>
	 </ul>
	 
	 <p><strong>Features</strong></p>
	 
	 <p>Additionally to the <code>ICollection</code>, a set offers:</p>
	 
	 <ul>
	 <li>Rich sequential access using an <code>ISetIterator</code>.<br />
	 <code>iterator()</code></li>
	 <li>Adding of items.<br />
	 <code>add()</code></li>
	 </ul>
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 17.03.2010
	 ]]></author>
<see><![CDATA[ICollection ICollection interface - Detailed description of the base collection features.
	 ]]></see>
</interfaceRec>
<method name='add' fullname='org.as3commons.collections.framework:ISet/org.as3commons.collections.framework:ISet:add' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 Adds an item to the set.
		 
		 <p>If the set already contains the given item, the method abords with <code>false</code>.</p>
		 
		 <p>The <code>LinkedSet</code> appends the item.</p>
		 
		 <p>The position of items that are added to a <code>SortedSet</code>
		 depends on its sort order.</p>
		 
		 ]]></description>
<param><![CDATA[item The item to add.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item has been added.
		 ]]></return>
</method>
<packageRec name='org.as3commons.collections.framework.null' fullname='org.as3commons.collections.framework.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<interfaceRec name='IListIterator' fullname='org.as3commons.collections.framework:IListIterator' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\framework\IListIterator.as' namespace='org.as3commons.collections.framework' access='public' baseClasses='org.as3commons.collections.framework:ICollectionIterator' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Base list iterator definition.
	 
	 <p><strong>Description</strong></p>
	 
	 <p>An <code>IListIterator</code> is an extended <code>ICollectionIterator</code> available
	 for all list collections.</p>
	 
	 <p><strong>Features</strong></p>
	 
	 <p>Additionally to the base collection iterator the <code>IListIterator</code>
	 provides information about the index of the item at the current iterator position:</p>
	 
	 <ul>
	 <li>Index of the last returned item.<br />
	 <code>index</code></li>
	 <li>Lookup for the index of the next or previous item.<br />
	 <code>nextIndex, previousIndex</code></li>
	 </ul>
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 18.03.2010
	 ]]></author>
<see><![CDATA[ICollectionIterator ICollectionIterator interface - Detailed description of the base collection iterator features.
	 ]]></see>
</interfaceRec>
<method name='index' fullname='org.as3commons.collections.framework:IListIterator/org.as3commons.collections.framework:IListIterator:index/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
		 The index of the last returned item.
		 
		 <p><code>-1</code> if the iterator points to the postion before the first
		 or after the last item or the list is empty.</p>
		 
		 <p>The index is reset to <code>-1</code> after all operations that modify the underlying
		 list order (<code>add(), remove()</code>) or modify the cursor position
		 (<code>start(), end()</code>).</p>
		 
		 <p>Initially <code>-1</code>.</p>
		 ]]></description>
</method>
<method name='nextIndex' fullname='org.as3commons.collections.framework:IListIterator/org.as3commons.collections.framework:IListIterator:nextIndex/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
		 The index of the item right to the current cursor position.
		 
		 <p>The item at this index is returned with the next call
		 to <code>next()</code>.</p>
		 
		 <p><code>-1</code> if the iterator is positioned at end or
		 the list is emtpy.</p>
		 ]]></description>
</method>
<method name='previousIndex' fullname='org.as3commons.collections.framework:IListIterator/org.as3commons.collections.framework:IListIterator:previousIndex/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
		 The index of the item left to the current cursor position.
		 
		 <p>The item at this index is returned with the next call
		 to <code>previous()</code>.</p>
		 
		 <p><code>-1</code> if the iterator is positioned at start or
		 the list is emtpy.</p>
		 ]]></description>
</method>
<packageRec name='org.as3commons.collections.framework.null' fullname='org.as3commons.collections.framework.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<interfaceRec name='IBinarySearchTreeIterator' fullname='org.as3commons.collections.framework:IBinarySearchTreeIterator' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\framework\IBinarySearchTreeIterator.as' namespace='org.as3commons.collections.framework' access='public' baseClasses='org.as3commons.collections.framework:ICollectionIterator' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Binary search tree data structure iterator definition.
	 
	 <p><strong>Features</strong></p>
	 
	 <p>Additionally to the base collection iterator the <code>IBinarySearchTreeIterator</code>
	 provides information about the item at the current iterator position:</p>
	 
	 <ul>
	 <li>Lookup for the next or previous item.<br />
	 <code>nextItem, previousItem</code></li>
	 </ul>
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 01.04.2010
	 ]]></author>
<see><![CDATA[ICollectionIterator ICollectionIterator interface - Detailed description of the base collection iterator features.
	 ]]></see>
</interfaceRec>
<method name='nextItem' fullname='org.as3commons.collections.framework:IBinarySearchTreeIterator/org.as3commons.collections.framework:IBinarySearchTreeIterator:nextItem/get' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 The item right to the current cursor position.
		 
		 <p><code>undefined</code> if the iterator is positioned at end or
		 the tree is emtpy.</p>
		 ]]></description>
</method>
<method name='previousItem' fullname='org.as3commons.collections.framework:IBinarySearchTreeIterator/org.as3commons.collections.framework:IBinarySearchTreeIterator:previousItem/get' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 The item left to the current cursor position.
		 
		 <p><code>undefined</code> if the iterator is positioned at start or
		 the tree is emtpy.</p>
		 ]]></description>
</method>
<packageRec name='org.as3commons.collections.framework.null' fullname='org.as3commons.collections.framework.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<interfaceRec name='IDuplicates' fullname='org.as3commons.collections.framework:IDuplicates' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\framework\IDuplicates.as' namespace='org.as3commons.collections.framework' access='public' baseClasses='org.as3commons.collections.framework:ICollection' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Definition of a collection that may contain duplicates.
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 12.04.2010
	 ]]></author>
</interfaceRec>
<method name='count' fullname='org.as3commons.collections.framework:IDuplicates/org.as3commons.collections.framework:IDuplicates:count' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='uint'>
<description><![CDATA[
		 Returns the number of occurrences of an item.
		 
		 ]]></description>
<return><![CDATA[Number of occurrences of the given item.
		 ]]></return>
</method>
<method name='removeAll' fullname='org.as3commons.collections.framework:IDuplicates/org.as3commons.collections.framework:IDuplicates:removeAll' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='uint'>
<description><![CDATA[
		 Removes all occurrences of a particular item from the collection.
		 
		 <p>The items are removed in the order they are stored.</p>
		 
		 ]]></description>
<param><![CDATA[item The item to remove completely from the collection.
		 ]]></param>
<return><![CDATA[Number of items removed.
		 ]]></return>
</method>
<packageRec name='org.as3commons.collections.framework.null' fullname='org.as3commons.collections.framework.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<interfaceRec name='IMapIterator' fullname='org.as3commons.collections.framework:IMapIterator' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\framework\IMapIterator.as' namespace='org.as3commons.collections.framework' access='public' baseClasses='org.as3commons.collections.framework:ICollectionIterator;org.as3commons.collections.framework:IBasicMapIterator' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Base map iterator iterator definition.
	 
	 <p><strong>Description</strong></p>
	 
	 <p>An <code>IMapIterator</code> is an extended <code>IBasicMapIterator</code> and
	 <code>ICollectionIterator</code> available for all map collections.</p>
	 
	 <p><strong>Features</strong></p>
	 
	 <p>Additionally to the base map iterator the <code>IMapIterator</code>
	 provides information about the current iterator position. The <code>IMapIterator</code>
	 provides all functionality of the <code>ICollectionIterator</code>.</p>
	 
	 <ul>
	 <li>Lookup for the key of the next or previous item.<br />
	 <code>nextKey, previousKey</code></li>
	 </ul>
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 18.03.2010
	 ]]></author>
<see><![CDATA[IBasicMapIterator IBasicMapIterator interface - Detailed description of the base map iterator features.
	 ]]></see>
<see><![CDATA[ICollectionIterator ICollectionIterator interface - Detailed description of the base collection iterator features.
	 
	 ]]></see>
<TODO><![CDATA[Rename to IMapCollectionIterator while IBasicMapIterator has to be renamed to IMapIterator.
	 ]]></TODO>
</interfaceRec>
<method name='nextKey' fullname='org.as3commons.collections.framework:IMapIterator/org.as3commons.collections.framework:IMapIterator:nextKey/get' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 The key of the item right to the current cursor position.
		 
		 <p>The item stored under this key is returned with the next call
		 to <code>next()</code>.</p>
		 
		 <p><code>undefined</code> if the iterator is positioned at end or
		 the map is emtpy.</p>
		 ]]></description>
</method>
<method name='previousKey' fullname='org.as3commons.collections.framework:IMapIterator/org.as3commons.collections.framework:IMapIterator:previousKey/get' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 The key of the item left to the current cursor position.
		 
		 <p>The item stored under this key is returned with the next call
		 to <code>previous()</code>.</p>
		 
		 <p><code>undefined</code> if the iterator is positioned at start or
		 the map is emtpy.</p>
		 ]]></description>
</method>
<packageRec name='org.as3commons.collections.framework.null' fullname='org.as3commons.collections.framework.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<interfaceRec name='ICollectionFx' fullname='org.as3commons.collections.framework:ICollectionFx' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\framework\ICollectionFx.as' namespace='org.as3commons.collections.framework' access='public' baseClasses='org.as3commons.collections.framework:ICollection;flash.events:IEventDispatcher' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Bindable collection marker interface.
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 22.03.2010
	 ]]></author>
<see><![CDATA[org.as3commons.collections.fx.events.CollectionEvent CollectionEvent - Collection event description and usage examples. 
	 ]]></see>
</interfaceRec>
<packageRec name='org.as3commons.collections.framework.null' fullname='org.as3commons.collections.framework.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<interfaceRec name='ILinkedListIterator' fullname='org.as3commons.collections.framework:ILinkedListIterator' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\framework\ILinkedListIterator.as' namespace='org.as3commons.collections.framework' access='public' baseClasses='org.as3commons.collections.framework:ICollectionIterator' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Linked list data structure iterator definition.
	 
	 <p><strong>Features</strong></p>
	 
	 <p>An <code>ILinkedListIterator</code> provides additionally to the base collection iterator:</p>
	 
	 <ul>
	 <li>Insertion operations.<br />
	 <code>addBefore(), addAfter()</code></li>
	 <li>Replacing of items.<br />
	 <code>replace()</code></li></li>
	 </ul>
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 04.03.2010
	 ]]></author>
<see><![CDATA[ICollectionIterator ICollectionIterator interface - Detailed description of the base collection iterator features.
	 ]]></see>
</interfaceRec>
<method name='addAfter' fullname='org.as3commons.collections.framework:ILinkedListIterator/org.as3commons.collections.framework:ILinkedListIterator:addAfter' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Adds an item after the current cursor position.
		 
		 <p>The item added will be returned with a subsequent call to <code>next()</code>.</p>
		 
		 ]]></description>
<param><![CDATA[item The item to add.
		 ]]></param>
</method>
<method name='addBefore' fullname='org.as3commons.collections.framework:ILinkedListIterator/org.as3commons.collections.framework:ILinkedListIterator:addBefore' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Adds an item before the current cursor position.
		 
		 <p>The item added will be returned with a subsequent call to <code>previous()</code>.</p>
		 
		 ]]></description>
<param><![CDATA[item The item to add.
		 ]]></param>
</method>
<method name='replace' fullname='org.as3commons.collections.framework:ILinkedListIterator/org.as3commons.collections.framework:ILinkedListIterator:replace' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 Replaces the current item if any.
		 
		 <p>If the iterator has no current item or the replacing item
		 strictly equals the existing one, this method aborts with <code>false</code>.</p>
		 
		 ]]></description>
<param><![CDATA[item The replacing item.
		 ]]></param>
<return><![CDATA[<code>true</code> if the current item has been replaced.
		 ]]></return>
</method>
<method name='nextItem' fullname='org.as3commons.collections.framework:ILinkedListIterator/org.as3commons.collections.framework:ILinkedListIterator:nextItem/get' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 The item right to the current cursor position.
		 
		 <p>This item is returned with the next call to <code>next()</code>.</p>
		 
		 <p><code>undefined</code> if the iterator is positioned at end or
		 the list is emtpy.</p>
		 ]]></description>
</method>
<method name='previousItem' fullname='org.as3commons.collections.framework:ILinkedListIterator/org.as3commons.collections.framework:ILinkedListIterator:previousItem/get' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 The item left to the current cursor position.
		 
		 <p>This item is returned with the next call to <code>previous()</code>.</p>
		 
		 <p><code>undefined</code> if the iterator is positioned at start or
		 the list is emtpy.</p>
		 ]]></description>
</method>
<packageRec name='org.as3commons.collections.framework.null' fullname='org.as3commons.collections.framework.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<interfaceRec name='ISetIterator' fullname='org.as3commons.collections.framework:ISetIterator' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\framework\ISetIterator.as' namespace='org.as3commons.collections.framework' access='public' baseClasses='org.as3commons.collections.framework:ICollectionIterator' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Base set iterator definition.
	 
	 <p><strong>Description</strong></p>
	 
	 <p>An <code>ISetIterator</code> is an extended <code>ICollectionIterator</code> available
	 for all set collections.</p>
	 
	 <p><strong>Features</strong></p>
	 
	 <p>Additionally to the base collection iterator the <code>ISetIterator</code>
	 provides information about the item at the current iterator position:</p>
	 
	 <ul>
	 <li>Lookup for the next or previous item.<br />
	 <code>nextItem, previousItem</code></li>
	 </ul>
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 01.04.2010
	 ]]></author>
<see><![CDATA[ICollectionIterator ICollectionIterator interface - Detailed description of the base collection iterator features.
	 ]]></see>
</interfaceRec>
<method name='nextItem' fullname='org.as3commons.collections.framework:ISetIterator/org.as3commons.collections.framework:ISetIterator:nextItem/get' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 The item right to the current cursor position.
		 
		 <p>This item is returned with the next call to <code>next()</code>.</p>
		 
		 <p><code>undefined</code> if the iterator is positioned at end or
		 the set is emtpy.</p>
		 ]]></description>
</method>
<method name='previousItem' fullname='org.as3commons.collections.framework:ISetIterator/org.as3commons.collections.framework:ISetIterator:previousItem/get' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 The item left to the current cursor position.
		 
		 <p>This item is returned with the next call to <code>previous()</code>.</p>
		 
		 <p><code>undefined</code> if the iterator is positioned at start or
		 the set is emtpy.</p>
		 ]]></description>
</method>
<packageRec name='org.as3commons.collections.framework.null' fullname='org.as3commons.collections.framework.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<interfaceRec name='IOrderedSetIterator' fullname='org.as3commons.collections.framework:IOrderedSetIterator' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\framework\IOrderedSetIterator.as' namespace='org.as3commons.collections.framework' access='public' baseClasses='org.as3commons.collections.framework:ISetIterator' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Insertion ordered set iterator definition.
	 
	 <p><strong>Features</strong></p>
	 
	 <p>An <code>IOrderedSetIterator</code> provides additionally to the base set iterator:</p>
	 
	 <ul>
	 <li>Insertion operations.<br />
	 <code>addBefore(), addAfter()</code></li>
	 <li>Replacing of items.<br />
	 <code>replace()</code></li></li>
	 </ul>
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 18.03.2010
	 ]]></author>
<see><![CDATA[ISetIterator ISetIterator interface - Detailed description of the base set iterator features.
	 ]]></see>
</interfaceRec>
<method name='addAfter' fullname='org.as3commons.collections.framework:IOrderedSetIterator/org.as3commons.collections.framework:IOrderedSetIterator:addAfter' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 Adds an item after the current cursor position.
		 
		 <p>If the item is already contained, the method aborts with <code>false</code>.</p>
		 
		 <p>The item added will be returned with a subsequent call to <code>next()</code>.</p>
		 
		 ]]></description>
<param><![CDATA[item The item to add.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item has been added.
		 ]]></return>
</method>
<method name='addBefore' fullname='org.as3commons.collections.framework:IOrderedSetIterator/org.as3commons.collections.framework:IOrderedSetIterator:addBefore' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 Adds an item before the current cursor position.
		 
		 <p>If the item is already contained, the method aborts with <code>false</code>.</p>
		 
		 <p>The item added will be returned with a subsequent call to <code>previous()</code>.</p>
		 
		 ]]></description>
<param><![CDATA[item The item to add.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item has been added.
		 ]]></return>
</method>
<method name='replace' fullname='org.as3commons.collections.framework:IOrderedSetIterator/org.as3commons.collections.framework:IOrderedSetIterator:replace' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 Replaces the current item if any.
		 
		 <p>If the iterator has no current item or the replacing item
		 strictly equals the existing one, this method aborts with <code>false</code>.</p>
		 
		 ]]></description>
<param><![CDATA[item The replacing item.
		 ]]></param>
<return><![CDATA[<code>true</code> if the current item has been replaced.
		 ]]></return>
</method>
<packageRec name='org.as3commons.collections.framework.null' fullname='org.as3commons.collections.framework.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<interfaceRec name='IList' fullname='org.as3commons.collections.framework:IList' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\framework\IList.as' namespace='org.as3commons.collections.framework' access='public' baseClasses='org.as3commons.collections.framework:IOrder;org.as3commons.collections.framework:IDuplicates' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Base list definition.
	 
	 <p><strong>Description</strong></p>
	 
	 <p>A list is an index based ordered sequence of elements.</p>
	 
	 <ul>
	 <li>Elements are addressed by an index or sequentially accessed using an iterator.</li>
	 <li>Always ordered, by insertion or by a specific sort criterion.</li>
	 <li>May contain duplicates.</li>
	 </ul>
	 
	 <p><strong>Features</strong></p>
	 
	 <p>Additionally to the <code>ICollection</code>, a list offers:</p>
	 
	 <ul>
	 <li>Rich sequential access using an <code>IListIterator</code>.<br />
	 <code>iterator()</code></li>
	 <li>Access to the first and the last element (from <code>IOrder</code>).<br />
	 <code>first, last, removeFirst(), removeLast()</code></li>
	 <li>Methods to handle duplicates (from <code>IDuplicates</code>).<br />
	 <code>count(), removeAll()</code></li>
	 <li>Index based inspection, retrieval and removal methods.<br />
	 <code>firstIndexOf(), lastIndexOf(), itemAt(), removeAt(), removeAllAt()</code></li>
	 <li>Methods to populate a list.<br />
	 <code>array, add()</code></li>
	 </ul>
	 
	 <p><strong>Notes</strong></p>
	 
	 <p>There is no direct implementor of this interface.</p>
	 
	 <p>The collection <code>LinkedList</code> does not implement this interface since
	 it does not provide index based access to its items.</p>
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 17.02.2010
	 ]]></author>
<see><![CDATA[ICollection ICollection interface - Detailed description of the base collection features.
	 ]]></see>
</interfaceRec>
<method name='add' fullname='org.as3commons.collections.framework:IList/org.as3commons.collections.framework:IList:add' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='uint'>
<description><![CDATA[
		 Adds an item to the list.
		 
		 <p>The <code>ArrayList</code> appends the item.</p>
		 
		 <p>The position of items that are added to a <code>SortedList</code>
		 depends on its sort order.</p>
		 
		 ]]></description>
<param><![CDATA[item The item to add.
		 ]]></param>
<return><![CDATA[The position where the item has been added.
		 ]]></return>
</method>
<method name='firstIndexOf' fullname='org.as3commons.collections.framework:IList/org.as3commons.collections.framework:IList:firstIndexOf' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='int'>
<description><![CDATA[
		 Returns the index of the first occurrence of an item.
		 
		 ]]></description>
<param><![CDATA[item The item to test.
		 ]]></param>
<return><![CDATA[The first position of the item or <code>-1</code> if the item is not contained.
		 ]]></return>
</method>
<method name='itemAt' fullname='org.as3commons.collections.framework:IList/org.as3commons.collections.framework:IList:itemAt' isStatic='false' isFinal='false' isOverride='false'  param_names='index' param_types='uint' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 Returns the item at the specified position.
		 
		 ]]></description>
<param><![CDATA[index The position of the item to get.
		 ]]></param>
<return><![CDATA[The item or <code>undefined</code> if the position is invalid.
		 ]]></return>
</method>
<method name='lastIndexOf' fullname='org.as3commons.collections.framework:IList/org.as3commons.collections.framework:IList:lastIndexOf' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='int'>
<description><![CDATA[
		 Returns the index of the last occurrence of an item.
		 
		 ]]></description>
<param><![CDATA[item The item to test.
		 ]]></param>
<return><![CDATA[The last position of the item or <code>-1</code> if the item is not contained.
		 ]]></return>
</method>
<method name='removeAllAt' fullname='org.as3commons.collections.framework:IList/org.as3commons.collections.framework:IList:removeAllAt' isStatic='false' isFinal='false' isOverride='false'  param_names='index;numItems' param_types='uint;uint' param_defaults='undefined;undefined' result_type='Array'>
<description><![CDATA[
		 Removes a number of items starting at the specified position.
		 
		 <p>If the given position exceeds the list size, the method aborts with <code>false</code>.</p>
		 
		 <p>If the number of items exceeds the list size, the method
		 removes all items starting at the given index.</p>
		 
		 <p>Returns an empty array if the index is invalid.</p>
		 
		 ]]></description>
<param><![CDATA[index The position of the first item to remove.
		 ]]></param>
<param><![CDATA[numItems The number of items to remove.
		 ]]></param>
<return><![CDATA[An array of all removed items.
		 ]]></return>
</method>
<method name='removeAt' fullname='org.as3commons.collections.framework:IList/org.as3commons.collections.framework:IList:removeAt' isStatic='false' isFinal='false' isOverride='false'  param_names='index' param_types='uint' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 Removes the item at the specified position.
		 
		 ]]></description>
<param><![CDATA[index The position of the item to remove.
		 ]]></param>
<return><![CDATA[The removed item or <code>undefined</code> if there is no item at that position.
		 ]]></return>
</method>
<method name='array' fullname='org.as3commons.collections.framework:IList/org.as3commons.collections.framework:IList:array/set' isStatic='false' isFinal='false' isOverride='false'  param_names='array' param_types='Array' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Specifies an array to be maintained by the list.
		 
		 <p>Already contained elements will be removed beforehand.</p>
		 
		 <p>The list stores a copy of the given array not the array itself.</p>
		 
		 ]]></description>
<param><![CDATA[array The array.
		 ]]></param>
</method>
<packageRec name='org.as3commons.collections.framework.null' fullname='org.as3commons.collections.framework.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<interfaceRec name='IOrderedListIterator' fullname='org.as3commons.collections.framework:IOrderedListIterator' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\framework\IOrderedListIterator.as' namespace='org.as3commons.collections.framework' access='public' baseClasses='org.as3commons.collections.framework:IListIterator' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Insertion ordered list iterator definition.
	 
	 <p><strong>Features</strong></p>
	 
	 <p>An <code>IOrderedListIterator</code> provides additionally to the base list iterator:</p>
	 
	 <ul>
	 <li>Insertion operations.<br />
	 <code>addBefore(), addAfter()</code></li>
	 <li>Replacing of items.<br />
	 <code>replace()</code></li></li>
	 </ul>
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 08.03.2010
	 ]]></author>
<see><![CDATA[IListIterator IListIterator interface - Detailed description of the base list iterator features.
	 ]]></see>
</interfaceRec>
<method name='addAfter' fullname='org.as3commons.collections.framework:IOrderedListIterator/org.as3commons.collections.framework:IOrderedListIterator:addAfter' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='uint'>
<description><![CDATA[
		 Adds an item after the current cursor position.
		 
		 <p>The item added will be returned with a subsequent call to <code>next()</code>.</p>
		 
		 ]]></description>
<param><![CDATA[item The item to add.
		 ]]></param>
<return><![CDATA[The position where the item has been added.
		 ]]></return>
</method>
<method name='addBefore' fullname='org.as3commons.collections.framework:IOrderedListIterator/org.as3commons.collections.framework:IOrderedListIterator:addBefore' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='uint'>
<description><![CDATA[
		 Adds an item before the current cursor position.
		 
		 <p>The item added will be returned with a subsequent call to <code>previous()</code>.</p>
		 
		 ]]></description>
<param><![CDATA[item The item to add.
		 ]]></param>
<return><![CDATA[The position where the item has been added.
		 ]]></return>
</method>
<method name='replace' fullname='org.as3commons.collections.framework:IOrderedListIterator/org.as3commons.collections.framework:IOrderedListIterator:replace' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 Replaces the current item if any.
		 
		 <p>If the iterator has no current item or the replacing item
		 strictly equals the existing one, this method aborts with <code>false</code>.</p>
		 
		 ]]></description>
<param><![CDATA[item The replacing item.
		 ]]></param>
<return><![CDATA[<code>true</code> if the current item has been replaced.
		 ]]></return>
</method>
<packageRec name='org.as3commons.collections.framework.null' fullname='org.as3commons.collections.framework.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<interfaceRec name='ISortOrder' fullname='org.as3commons.collections.framework:ISortOrder' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\framework\ISortOrder.as' namespace='org.as3commons.collections.framework' access='public' baseClasses='org.as3commons.collections.framework:IOrder' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Definition of a collection whose items are stored in a sorted order. 
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 09.04.2010
	 ]]></author>
</interfaceRec>
<method name='hasEqual' fullname='org.as3commons.collections.framework:ISortOrder/org.as3commons.collections.framework:ISortOrder:hasEqual' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 Tests if the collection contains an item that is equal to the given item.
		 
		 <p>Returns of course <code>true</code> if the given item is contained.</p>
		 
		 ]]></description>
<param><![CDATA[item The item to test.
		 ]]></param>
<return><![CDATA[<code>true</code> if there is an equal item contained.
		 ]]></return>
</method>
<method name='comparator' fullname='org.as3commons.collections.framework:ISortOrder/org.as3commons.collections.framework:ISortOrder:comparator/get' isStatic='false' isFinal='false' isOverride='false'  result_type='org.as3commons.collections.framework:IComparator'>
<description><![CDATA[
		 Returns or sets the initial comparator of the collection.
		 
		 <p>You cannot reset a comparator of a collection that contains items.
		 In that case an <code>ArgumentError</code> is thrown.</p>
		 
		 ]]></description>
<throws><![CDATA[ArgumentError if set to a collection with a size > 0.
		 ]]></throws>
</method>
<method name='comparator' fullname='org.as3commons.collections.framework:ISortOrder/org.as3commons.collections.framework:ISortOrder:comparator/set' isStatic='false' isFinal='false' isOverride='false'  param_names='comparator' param_types='org.as3commons.collections.framework:IComparator' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<packageRec name='org.as3commons.collections.framework.null' fullname='org.as3commons.collections.framework.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<interfaceRec name='IMap' fullname='org.as3commons.collections.framework:IMap' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\framework\IMap.as' namespace='org.as3commons.collections.framework' access='public' baseClasses='org.as3commons.collections.framework:IDuplicates' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Base map definition.
	 
	 <p><strong>Description</strong></p>
	 
	 <p>A map stores key-value-pairs and adresses its items over a key.</p>
	 
	 <ul>
	 <li>Elements are addressed by a key.</li>
	 <li>No predefined oder of items.</li>
	 <li>May contain duplicates but no duplicate keys.</li>
	 </ul>
	 
	 <p><strong>Features</strong></p>
	 
	 <p>Additionally to the <code>ICollection</code>, a map offers:</p>
	 
	 <ul>
	 <li>Rich sequential access using an <code>IMapIterator</code>.<br />
	 <code>iterator()</code></li>
	 <li>Methods to handle duplicates (from <code>IDuplicates</code>).<br />
	 <code>count(), removeAll()</code></li>
	 <li>Key based inspection, retrieval and removal methods.<br />
	 <code>hasKey(), itemFor(), replaceFor(), removeKey(), keysToArray()</code></li>
	 <li>Adding of items.<br />
	 <code>add()</code></li>
	 </ul>
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 17.03.2010
	 ]]></author>
<see><![CDATA[ICollection ICollection interface - Detailed description of the base collection features.
	 ]]></see>
</interfaceRec>
<method name='add' fullname='org.as3commons.collections.framework:IMap/org.as3commons.collections.framework:IMap:add' isStatic='false' isFinal='false' isOverride='false'  param_names='key;item' param_types='*;*' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[
		 Adds an item to the map.
		 
		 <p>If the map already contains the given key, the method abords with <code>false</code>.</p>
		 
		 <p>The <code>LinkedMap</code> appends the item.</p>
		 
		 <p>The position of items that are added to a <code>SortedMap</code>
		 depends on its sort order.</p>
		 
		 ]]></description>
<param><![CDATA[key The key of the item to add.
		 ]]></param>
<param><![CDATA[item The item to add.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item has been added.
		 ]]></return>
</method>
<method name='hasKey' fullname='org.as3commons.collections.framework:IMap/org.as3commons.collections.framework:IMap:hasKey' isStatic='false' isFinal='false' isOverride='false'  param_names='key' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 Returns <code>true</code> if the map contains the given key.
		 
		 ]]></description>
<param><![CDATA[key The key to test.
		 ]]></param>
<return><![CDATA[<code>true</code> if the key is contained.
		 ]]></return>
</method>
<method name='itemFor' fullname='org.as3commons.collections.framework:IMap/org.as3commons.collections.framework:IMap:itemFor' isStatic='false' isFinal='false' isOverride='false'  param_names='key' param_types='*' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 Returns the item associated with the given key.
		 
		 ]]></description>
<param><![CDATA[key The key.
		 ]]></param>
<return><![CDATA[The item if the key is contained, else <code>undefined</code>.
		 ]]></return>
</method>
<method name='keyIterator' fullname='org.as3commons.collections.framework:IMap/org.as3commons.collections.framework:IMap:keyIterator' isStatic='false' isFinal='false' isOverride='false'  result_type='org.as3commons.collections.framework:IIterator'>
<description><![CDATA[
		 Returns an iterator over the keys of the map.
		 
		 <p>The order of keys returned by the iterator is the same as in the particular collection.</p>
		 
		 ]]></description>
<return><![CDATA[An iterator over the map keys.
		 ]]></return>
</method>
<method name='keysToArray' fullname='org.as3commons.collections.framework:IMap/org.as3commons.collections.framework:IMap:keysToArray' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[
		 Returns an array of all keys in the order of the particular map.
		 
		 <p>The order of keys in the array is the same as in the particular collection.</p>
		 
		 ]]></description>
<return><![CDATA[An array of the keys of the map.
		 ]]></return>
</method>
<method name='removeKey' fullname='org.as3commons.collections.framework:IMap/org.as3commons.collections.framework:IMap:removeKey' isStatic='false' isFinal='false' isOverride='false'  param_names='key' param_types='*' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 Removes the given key and its associated item from the map.
		 
		 <p>If the key is not contained the method abords with <code>undefined</code>.</p>
		 ]]></description>
<param><![CDATA[key The key.
		 ]]></param>
<return><![CDATA[The item associated with the removed key or <code>undefined</code> if the key is not contained.
		 ]]></return>
</method>
<method name='replaceFor' fullname='org.as3commons.collections.framework:IMap/org.as3commons.collections.framework:IMap:replaceFor' isStatic='false' isFinal='false' isOverride='false'  param_names='key;item' param_types='*;*' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[
		 Replaces the item associated with the given key.
		 
		 <p>If the key is not contained or the given item equals the item
		 stored with the given key, the method abords with <code>false</code>.</p>
		 
		 ]]></description>
<param><![CDATA[key The key.
		 ]]></param>
<param><![CDATA[item The replacing item.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item has been replaced.
		 ]]></return>
</method>
<packageRec name='org.as3commons.collections.framework.null' fullname='org.as3commons.collections.framework.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<interfaceRec name='IOrderedMapIterator' fullname='org.as3commons.collections.framework:IOrderedMapIterator' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\framework\IOrderedMapIterator.as' namespace='org.as3commons.collections.framework' access='public' baseClasses='org.as3commons.collections.framework:IMapIterator' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Insertion ordered map iterator definition.
	 
	 <p><strong>Features</strong></p>
	 
	 <p>An <code>IOrderedMapIterator</code> provides additionally to the base map iterator:</p>
	 
	 <ul>
	 <li>Insertion operations.<br />
	 <code>addBefore(), addAfter()</code></li>
	 <li>Replacing of items.<br />
	 <code>replace()</code></li></li>
	 </ul>
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 10.03.2010
	 ]]></author>
<see><![CDATA[IMapIterator IMapIterator interface - Detailed description of the base map iterator features.
	 ]]></see>
</interfaceRec>
<method name='addAfter' fullname='org.as3commons.collections.framework:IOrderedMapIterator/org.as3commons.collections.framework:IOrderedMapIterator:addAfter' isStatic='false' isFinal='false' isOverride='false'  param_names='key;item' param_types='*;*' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[
		 Adds an item after the current cursor position.
		 
		 <p>If the key is already contained, the method aborts with <code>false</code>.</p>
		 
		 <p>The item added will be returned with a subsequent call to <code>next()</code>.</p>
		 
		 ]]></description>
<param><![CDATA[key The key of the item to add.
		 ]]></param>
<param><![CDATA[item The item to add.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item has been added.
		 ]]></return>
</method>
<method name='addBefore' fullname='org.as3commons.collections.framework:IOrderedMapIterator/org.as3commons.collections.framework:IOrderedMapIterator:addBefore' isStatic='false' isFinal='false' isOverride='false'  param_names='key;item' param_types='*;*' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[
		 Adds an item before the current cursor position.
		 
		 <p>If the key is already contained, the method aborts with <code>false</code>.</p>
		 
		 <p>The item added will be returned with a subsequent call to <code>previous()</code>.</p>
		 
		 ]]></description>
<param><![CDATA[key The key of the item to add.
		 ]]></param>
<param><![CDATA[item The item to add.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item has been added.
		 ]]></return>
</method>
<method name='replace' fullname='org.as3commons.collections.framework:IOrderedMapIterator/org.as3commons.collections.framework:IOrderedMapIterator:replace' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 Replaces the current item if any.
		 
		 <p>The key of the old item points now to the given item.</p>
		 
		 <p>If the iterator has no current item or the replacing item
		 strictly equals the existing one, this method aborts with <code>false</code>.</p>
		 
		 ]]></description>
<param><![CDATA[item The replacing item.
		 ]]></param>
<return><![CDATA[<code>true</code> if the current item has been replaced.
		 ]]></return>
</method>
<packageRec name='org.as3commons.collections.framework.null' fullname='org.as3commons.collections.framework.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<interfaceRec name='IInsertionOrder' fullname='org.as3commons.collections.framework:IInsertionOrder' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\framework\IInsertionOrder.as' namespace='org.as3commons.collections.framework' access='public' baseClasses='org.as3commons.collections.framework:IOrder' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Definition of a collection that enables precise control over where items are inserted.
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 09.04.2010
	 ]]></author>
</interfaceRec>
<method name='reverse' fullname='org.as3commons.collections.framework:IInsertionOrder/org.as3commons.collections.framework:IInsertionOrder:reverse' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		 Reverses the collection order.
		 
		 <p>If the collection size is less than 2, the method aborts with <code>false</code>.</p>
		 
		 ]]></description>
<return><![CDATA[<code>true</code> if the collection has been reversed.
		 ]]></return>
</method>
<method name='sort' fullname='org.as3commons.collections.framework:IInsertionOrder/org.as3commons.collections.framework:IInsertionOrder:sort' isStatic='false' isFinal='false' isOverride='false'  param_names='comparator' param_types='org.as3commons.collections.framework:IComparator' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 Sorts the linked collection using the given comparator.
		 
		 <p>The sort algorithm used by implementors of this interface is stable which
		 means that equal items are sorted in the same order they had before the sorting.</p>
		 
		 <p>If the collection size is less than 2, the method aborts with <code>false</code>.</p>
		 
		 ]]></description>
<param><![CDATA[comparator The sort criterion.
		 ]]></param>
<return><![CDATA[<code>true</code> if the linked collection has been sorted.
		 ]]></return>
</method>
<packageRec name='org.as3commons.collections.framework.null' fullname='org.as3commons.collections.framework.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<interfaceRec name='ISortedList' fullname='org.as3commons.collections.framework:ISortedList' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\framework\ISortedList.as' namespace='org.as3commons.collections.framework' access='public' baseClasses='org.as3commons.collections.framework:IList;org.as3commons.collections.framework:ISortOrder' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Sort ordered list definition.
	 
	 <p><strong>Description</strong></p>
	 
	 <p>A sorted list is a list that orders its items by a sort criterion.</p>
	 
	 <ul>
	 <li>Elements are addressed by an index or sequentially accessed using an iterator.</li>
	 <li>Always ordered by a specific sort criterion.</li>
	 <li>May contain duplicates.</li>
	 </ul>
	 
	 <p><strong>Features</strong></p>
	 
	 <p>Addionally to or refining the basic list definition, a sorted list provides:</p>
	 
	 <ul>
	 <li>Order related methods (from <code>ISortOrder</code>).<br />
	 <code>hasEqual()</code></li>
	 <li>Order related methods.<br />
	 <code>lesserIndex(), higherIndex(), equalIndices()</code></li>
	 </ul>
	 
	 <p><strong>Note</strong></p>
	 
	 <p>The sort algorithm of a sorted list is stable. Multiple equal items are sorted in the
	 order they are added.</p>
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 18.03.2010
	 ]]></author>
<see><![CDATA[IList IList interface - Detailed description of the basic list features.
	 ]]></see>
</interfaceRec>
<method name='equalIndices' fullname='org.as3commons.collections.framework:ISortedList/org.as3commons.collections.framework:ISortedList:equalIndices' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='Array'>
<description><![CDATA[
		 Returns an array of the indices of all items that are equal to the given item.
		 
		 <p>If there is no equal item, the method returns an empty array.</p>
		 
		 ]]></description>
<param><![CDATA[item The item to test.
		 ]]></param>
<return><![CDATA[An array of the indices of all equal items.
		 ]]></return>
</method>
<method name='higherIndex' fullname='org.as3commons.collections.framework:ISortedList/org.as3commons.collections.framework:ISortedList:higherIndex' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='int'>
<description><![CDATA[
		 Returns the index of the first item that is higher than the given item.
		 
		 ]]></description>
<param><![CDATA[item The item to test.
		 ]]></param>
<return><![CDATA[The index of the next higher item or <code>-1</code> if there is no higher item.
		 ]]></return>
</method>
<method name='lesserIndex' fullname='org.as3commons.collections.framework:ISortedList/org.as3commons.collections.framework:ISortedList:lesserIndex' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='int'>
<description><![CDATA[
		 Returns the index of the last item that is lesser than the given item.
		 
		 ]]></description>
<param><![CDATA[item The item to test.
		 ]]></param>
<return><![CDATA[The index of the last lesser item or <code>-1</code> if there is no lesser item.
		 ]]></return>
</method>
<packageRec name='org.as3commons.collections.framework.null' fullname='org.as3commons.collections.framework.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<interfaceRec name='ILinkedList' fullname='org.as3commons.collections.framework:ILinkedList' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\framework\ILinkedList.as' namespace='org.as3commons.collections.framework' access='public' baseClasses='org.as3commons.collections.framework:IInsertionOrder;org.as3commons.collections.framework:IDuplicates' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Linked list data structure definition.
	 
	 <p><strong>Description</strong></p>
	 
	 <p>A linked list is an ordered sequence of items made up of mutually linking nodes.
	 Insertion and removal operations at start, in between or at end only require
	 constant time regardless of the size of the list.</p>
	 
	 <ul>
	 <li>Elements are accessed sequentially using an iterator.</li>
	 <li>Always ordered by insertion.</li>
	 <li>May contain duplicates.</li>
	 </ul>
	 
	 <p><strong>Features</strong></p>
	 
	 <p>Addionally to or refining the basic collection definition, the <code>LinkedList</code> provides:</p>
	 
	 <ul>
	 <li>Rich sequential access using an <code>IListIterator</code>.<br />
	 <code>iterator()</code></li>
	 <li>Access to the first and the last element (from <code>IOrder</code>).<br />
	 <code>first, last, removeFirst(), removeLast()</code></li>
	 <li>Order modification operations (from <code>IInsertionOrder</code>).<br />
	 <code>sort(), reverse()</code></li>
	 <li>Methods to handle duplicates (from <code>IDuplicates</code>).<br />
	 <code>count(), removeAll()</code></li>
	 <li>Random adding of items.<br />
	 <code>add(), addFirst(), addLast()</code></li>
	 </ul>
	 
	 <p><strong>Notes</strong></p>
	 
	 <p>A linked does not implement the <code>IList</code> interface since it does not provide
	 index based access to its items.</p>
	 
	 <p>The internal node structure is hidden to the user and cannot be accessed.</p>
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 04.03.2010
	 ]]></author>
<see><![CDATA[ICollection ICollection interface - Detailed description of the base collection features.
	 ]]></see>
</interfaceRec>
<method name='addFirst' fullname='org.as3commons.collections.framework:ILinkedList/org.as3commons.collections.framework:ILinkedList:addFirst' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Adds an item in front of the list.
		 
		 ]]></description>
<param><![CDATA[item The item to add.
		 ]]></param>
</method>
<method name='addLast' fullname='org.as3commons.collections.framework:ILinkedList/org.as3commons.collections.framework:ILinkedList:addLast' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Adds an item at the end of the list.
		 
		 ]]></description>
<param><![CDATA[item The item to add.
		 ]]></param>
</method>
<method name='add' fullname='org.as3commons.collections.framework:ILinkedList/org.as3commons.collections.framework:ILinkedList:add' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Adds an item at the end of the list.
		 
		 ]]></description>
<param><![CDATA[item The item to add.
		 ]]></param>
</method>
<packageRec name='org.as3commons.collections.framework.null' fullname='org.as3commons.collections.framework.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<interfaceRec name='IOrderedMap' fullname='org.as3commons.collections.framework:IOrderedMap' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\framework\IOrderedMap.as' namespace='org.as3commons.collections.framework' access='public' baseClasses='org.as3commons.collections.framework:IMap;org.as3commons.collections.framework:IInsertionOrder' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Insertion ordered map definition.
	 
	 <p><strong>Description</strong></p>
	 
	 <p>An ordered map is a map that orders its items by insertion.</p>
	 
	 <ul>
	 <li>Elements are addressed by a key or sequentially accessed using an iterator.</li>
	 <li>Always ordered by insertion.</li>
	 <li>May contain duplicates but no duplicate keys.</li>
	 </ul>
	 
	 <p><strong>Features</strong></p>
	 
	 <p>Addionally to or refining the basic map definition, an ordered map provides:</p>
	 
	 <ul>
	 <li>Rich sequential access using an <code>IOrderedMapIterator</code>.<br />
	 <code>iterator()</code></li>
	 <li>Access to the first and the last element (from <code>IOrder</code>).<br />
	 <code>first, last, removeFirst(), removeLast()</code></li>
	 <li>Order modification operations (from <code>IInsertionOrder</code>).<br />
	 <code>sort(), reverse()</code></li>
	 <li>Random adding of items.<br />
	 <code>addFirst(), addLast(), addBefore(), addAfter()</code></li>
	 </ul>
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 18.03.2010
	 ]]></author>
<see><![CDATA[IMap IMap interface - Detailed description of the basic map features.
	 ]]></see>
</interfaceRec>
<method name='addAfter' fullname='org.as3commons.collections.framework:IOrderedMap/org.as3commons.collections.framework:IOrderedMap:addAfter' isStatic='false' isFinal='false' isOverride='false'  param_names='previousKey;key;item' param_types='*;*;*' param_defaults='undefined;undefined;undefined' result_type='Boolean'>
<description><![CDATA[
		 Adds an item after an existing one.
		 
		 <p>If the key is already contained, the method aborts with <code>false</code>.</p>
		 
		 ]]></description>
<param><![CDATA[previousKey The key of the item to add after.
		 ]]></param>
<param><![CDATA[item The item to add.
		 ]]></param>
<param><![CDATA[key The key of the item to add.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item has been added.
		 ]]></return>
</method>
<method name='addBefore' fullname='org.as3commons.collections.framework:IOrderedMap/org.as3commons.collections.framework:IOrderedMap:addBefore' isStatic='false' isFinal='false' isOverride='false'  param_names='nextKey;key;item' param_types='*;*;*' param_defaults='undefined;undefined;undefined' result_type='Boolean'>
<description><![CDATA[
		 Adds an item before an existing one.
		 
		 <p>If the key is already contained, the method aborts with <code>false</code>.</p>
		 
		 ]]></description>
<param><![CDATA[nextKey The key of the item to add before.
		 ]]></param>
<param><![CDATA[item The item to add.
		 ]]></param>
<param><![CDATA[key The key of the item to add.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item has been added.
		 ]]></return>
</method>
<method name='addFirst' fullname='org.as3commons.collections.framework:IOrderedMap/org.as3commons.collections.framework:IOrderedMap:addFirst' isStatic='false' isFinal='false' isOverride='false'  param_names='key;item' param_types='*;*' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[
		 Adds an item in front of the map.
		 
		 <p>If the key is already contained, the method aborts with <code>false</code>.</p>
		 
		 ]]></description>
<param><![CDATA[item The item to add.
		 ]]></param>
<param><![CDATA[key The key of the item to add.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item has been added.
		 ]]></return>
</method>
<method name='addLast' fullname='org.as3commons.collections.framework:IOrderedMap/org.as3commons.collections.framework:IOrderedMap:addLast' isStatic='false' isFinal='false' isOverride='false'  param_names='key;item' param_types='*;*' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[
		 Adds an item at the end of the map.
		 
		 <p>If the key is already contained, the method aborts with <code>false</code>.</p>
		 
		 ]]></description>
<param><![CDATA[item The item to add.
		 ]]></param>
<param><![CDATA[key The key of the item to add.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item has been added.
		 ]]></return>
</method>
<method name='nextKey' fullname='org.as3commons.collections.framework:IOrderedMap/org.as3commons.collections.framework:IOrderedMap:nextKey' isStatic='false' isFinal='false' isOverride='false'  param_names='key' param_types='*' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 Returns the key of the successor of the item mapped to the given key.
		 
		 <p>If the key is not contained, the method returns <code>undefined</code>.</p>
		 
		 ]]></description>
<param><![CDATA[item The key of item to get its successing key.
		 ]]></param>
<return><![CDATA[The key of the predecessor or <code>undefined</code>.
		 ]]></return>
</method>
<method name='previousKey' fullname='org.as3commons.collections.framework:IOrderedMap/org.as3commons.collections.framework:IOrderedMap:previousKey' isStatic='false' isFinal='false' isOverride='false'  param_names='key' param_types='*' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 Returns the key of the predecessor of the item mapped to the given key.
		 
		 <p>If the key is not contained, the method returns <code>undefined</code>.</p>
		 
		 ]]></description>
<param><![CDATA[item The key of item to get its predecessing key.
		 ]]></param>
<return><![CDATA[The key of the predecessor or <code>undefined</code>.
		 ]]></return>
</method>
<method name='firstKey' fullname='org.as3commons.collections.framework:IOrderedMap/org.as3commons.collections.framework:IOrderedMap:firstKey/get' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Returns the key of the first item, if any.
		 
		 <p>If the key is not contained, the method returns <code>undefined</code>.</p>
		 
		 ]]></description>
<return><![CDATA[The key of the first item or <code>undefined</code>.
		 ]]></return>
</method>
<method name='lastKey' fullname='org.as3commons.collections.framework:IOrderedMap/org.as3commons.collections.framework:IOrderedMap:lastKey/get' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Returns the key of the last item, if any.
		 
		 <p>If the key is not contained, the method returns <code>undefined</code>.</p>
		 
		 ]]></description>
<return><![CDATA[The key of the last item or <code>undefined</code>.
		 ]]></return>
</method>
<packageRec name='org.as3commons.collections.framework.null' fullname='org.as3commons.collections.framework.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<interfaceRec name='IBinarySearchTree' fullname='org.as3commons.collections.framework:IBinarySearchTree' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\framework\IBinarySearchTree.as' namespace='org.as3commons.collections.framework' access='public' baseClasses='org.as3commons.collections.framework:ISortOrder' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Binary search tree data structure definition.
	 
	 <p><strong>Description</strong></p>
	 
	 <p>A binary search tree is a sort ordered tree structure made up of
	 tree nodes where each tree node has maximal exactly two children.
	 The left child of a tree node is always lesser than its parent node.
	 The right child of a tree node is always greater than its parent node.
	 Adding, finding and removing of items can be done in logarithmic time.</p>
	 
	 <li>Elements are addressed by instance directly or sequentially accessed using an iterator.</li>
	 <li>Always ordered by a specific sort criterion.</li>
	 <li>Cannot contain duplicates.</li>
	 <li>Cannot contain multiple equal items (in difference to the <code>ISortedSet</code>).</li>
	 </ul>
	 
	 <p><strong>Features</strong></p>
	 
	 <p>Additionally to the <code>ICollection</code>, a binary search tree offers:</p>
	 
	 <ul>
	 <li>Rich sequential access using an <code>IBinarySearchTreeIterator</code>.<br />
	 <code>iterator()</code></li>
	 <li>Access to the first and the last element (from <code>IOrder</code>).<br />
	 <code>first, last, removeFirst(), removeLast()</code></li>
	 <li>Order related methods (from <code>ISortOrder</code>).<br />
	 <code>hasEqual()</code></li>
	 <li>Order related methods.<br />
	 <code>lesser(), higher(), equalItem()</code></li>
	 <li>Method to populate the tree.<br />
	 <code>add()</code></li>
	 </ul>
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 31.03.2010
	 ]]></author>
<see><![CDATA[ICollection ICollection interface - Detailed description of the base collection features.
	 ]]></see>
</interfaceRec>
<method name='add' fullname='org.as3commons.collections.framework:IBinarySearchTree/org.as3commons.collections.framework:IBinarySearchTree:add' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 Adds an item to the tree.
		 
		 <p>If the tree already contains an item that is equal to the given one,
		 the method abords with <code>false</code>.</p>
		 
		 <p>Hence, if the tree already contains the given item, the method abords with <code>false</code>.</p>
		 
		 ]]></description>
<param><![CDATA[item The item to add.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item has been added.
		 ]]></return>
</method>
<method name='equalItem' fullname='org.as3commons.collections.framework:IBinarySearchTree/org.as3commons.collections.framework:IBinarySearchTree:equalItem' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 Returns the item that is equal to the given one.
		 
		 <p>Returns of course the given item, if the item is contained.</p>
		 
		 ]]></description>
<param><![CDATA[item The item to test.
		 ]]></param>
<return><![CDATA[The equal item or <code>undefined</code> if there is no equal item.
		 ]]></return>
</method>
<method name='higher' fullname='org.as3commons.collections.framework:IBinarySearchTree/org.as3commons.collections.framework:IBinarySearchTree:higher' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 Returns the first item that is higher than the given item.
		 
		 ]]></description>
<param><![CDATA[item The item to test.
		 ]]></param>
<return><![CDATA[The next higher item or <code>undefined</code> if there is no higher item.
		 ]]></return>
</method>
<method name='lesser' fullname='org.as3commons.collections.framework:IBinarySearchTree/org.as3commons.collections.framework:IBinarySearchTree:lesser' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 Returns the last item that is lesser than the given item.
		 
		 ]]></description>
<param><![CDATA[item The item to test.
		 ]]></param>
<return><![CDATA[The last lesser item or <code>undefined</code> if there is no lesser item.
		 ]]></return>
</method>
<packageRec name='org.as3commons.collections.framework.null' fullname='org.as3commons.collections.framework.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<interfaceRec name='IOrderedSet' fullname='org.as3commons.collections.framework:IOrderedSet' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\framework\IOrderedSet.as' namespace='org.as3commons.collections.framework' access='public' baseClasses='org.as3commons.collections.framework:ISet;org.as3commons.collections.framework:IInsertionOrder' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Insertion ordered set definition.
	 
	 <p><strong>Description</strong></p>
	 
	 <p>An ordered set is a set that orders its items by insertion.</p>
	 
	 <ul>
	 <li>Elements are addressed by instance directly or sequentially accessed using an iterator.</li>
	 <li>Always ordered by insertion.</li>
	 <li>Cannot contain duplicates.</li>
	 </ul>
	 
	 <p><strong>Features</strong></p>
	 
	 <p>Addionally to or refining the basic set definition, a ordered set provides:</p>
	 
	 <ul>
	 <li>Rich sequential access using an <code>IOrderedSetIterator</code>.<br />
	 <code>iterator()</code></li>
	 <li>Access to the first and the last element (from <code>IOrder</code>).<br />
	 <code>first, last, removeFirst(), removeLast()</code></li>
	 <li>Order modification operations (from <code>IInsertionOrder</code>).<br />
	 <code>sort(), reverse()</code></li>
	 <li>Random adding or replacing of items.<br />
	 <code>addFirst(), addLast(), addBefore(), addAfter(), replace()</code></li>
	 </ul>
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 18.03.2010
	 ]]></author>
<see><![CDATA[ISet ISet interface - Detailed description of the basic set features.
	 ]]></see>
</interfaceRec>
<method name='addAfter' fullname='org.as3commons.collections.framework:IOrderedSet/org.as3commons.collections.framework:IOrderedSet:addAfter' isStatic='false' isFinal='false' isOverride='false'  param_names='previousItem;item' param_types='*;*' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[
		 Adds an item after an existing one.
		 
		 <p>If the item is already contained, the method aborts with <code>false</code>.</p>
		 
		 ]]></description>
<param><![CDATA[previousItem The item to add after.
		 ]]></param>
<param><![CDATA[item The item to add.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item has been added.
		 ]]></return>
</method>
<method name='addBefore' fullname='org.as3commons.collections.framework:IOrderedSet/org.as3commons.collections.framework:IOrderedSet:addBefore' isStatic='false' isFinal='false' isOverride='false'  param_names='nextItem;item' param_types='*;*' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[
		 Adds an item before an existing one.
		 
		 <p>If the item is already contained, the method aborts with <code>false</code>.</p>
		 
		 ]]></description>
<param><![CDATA[nextItem The item to add before.
		 ]]></param>
<param><![CDATA[item The item to add.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item has been added.
		 ]]></return>
</method>
<method name='addFirst' fullname='org.as3commons.collections.framework:IOrderedSet/org.as3commons.collections.framework:IOrderedSet:addFirst' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 Adds an item in front of the set.
		 
		 <p>If the item is already contained, the method aborts with <code>false</code>.</p>
		 
		 ]]></description>
<param><![CDATA[item The item to add.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item has been added.
		 ]]></return>
</method>
<method name='addLast' fullname='org.as3commons.collections.framework:IOrderedSet/org.as3commons.collections.framework:IOrderedSet:addLast' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 Adds an item at the end of the set.
		 
		 <p>If the item is already contained, the method aborts with <code>false</code>.</p>
		 
		 ]]></description>
<param><![CDATA[item The item to add.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item has been added.
		 ]]></return>
</method>
<method name='next' fullname='org.as3commons.collections.framework:IOrderedSet/org.as3commons.collections.framework:IOrderedSet:next' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 Returns the successor of the given item.
		 
		 <p>If the item is not contained, the method returns <code>undefined</code>.</p>
		 
		 ]]></description>
<param><![CDATA[item The item to get its successor.
		 ]]></param>
<return><![CDATA[The predecessor or <code>undefined</code>.
		 ]]></return>
</method>
<method name='previous' fullname='org.as3commons.collections.framework:IOrderedSet/org.as3commons.collections.framework:IOrderedSet:previous' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 Returns the predecessor of the given item.
		 
		 <p>If the item is not contained, the method returns <code>undefined</code>.</p>
		 
		 ]]></description>
<param><![CDATA[item The item to get its predecessor.
		 ]]></param>
<return><![CDATA[The predecessor or <code>undefined</code>.
		 ]]></return>
</method>
<method name='replace' fullname='org.as3commons.collections.framework:IOrderedSet/org.as3commons.collections.framework:IOrderedSet:replace' isStatic='false' isFinal='false' isOverride='false'  param_names='oldItem;item' param_types='*;*' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[
		 Replaces an item. 
		 
		 <p>The new item is added at the same position as the old item.</p>
		 
		 <p>If the item is already contained, the method aborts with <code>false</code>.</p>
		 
		 ]]></description>
<param><![CDATA[oldItem The item replace.
		 ]]></param>
<param><![CDATA[item The replacing item.
		 ]]></param>
<param><![CDATA[item The item to add.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item has been added.
		 ]]></return>
</method>
<packageRec name='org.as3commons.collections.framework.null' fullname='org.as3commons.collections.framework.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<interfaceRec name='ISortedSet' fullname='org.as3commons.collections.framework:ISortedSet' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\framework\ISortedSet.as' namespace='org.as3commons.collections.framework' access='public' baseClasses='org.as3commons.collections.framework:ISet;org.as3commons.collections.framework:ISortOrder' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Sort ordered set definition.
	 
	 <p><strong>Description</strong></p>
	 
	 <p>A sorted set is a set that orders its items by a sort criterion.</p>
	 
	 <ul>
	 <li>Elements are addressed by instance directly or sequentially accessed using an iterator.</li>
	 <li>Always ordered by a specific sort criterion.</li>
	 <li>Cannot contain duplicates.</li>
	 <li>May contain multiple equal items.</li>
	 </ul>
	 
	 <p><strong>Features</strong></p>
	 
	 <p>Addionally to or refining the basic set definition, a sorted set provides:</p>
	 
	 <ul>
	 <li>Access to the first and the last element (from <code>IOrder</code>).<br />
	 <code>first, last, removeFirst(), removeLast()</code></li>
	 <li>Order related methods (from <code>ISortOrder</code>).<br />
	 <code>hasEqual()</code></li>
	 <li>Order related methods.<br />
	 <code>lesser(), higher(), equalItems()</code></li>
	 </ul>
	 
	 <p><strong>Note</strong></p>
	 
	 <p>The sort algorithm of a sorted set is stable. Multiple equal items are sorted in the
	 order they are added.</p>
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 18.03.2010
	 ]]></author>
<see><![CDATA[ISet ISet interface - Detailed description of the basic set features.
	 ]]></see>
</interfaceRec>
<method name='equalItems' fullname='org.as3commons.collections.framework:ISortedSet/org.as3commons.collections.framework:ISortedSet:equalItems' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='Array'>
<description><![CDATA[
		 Returns an array of all items that are equal to the given item.
		 
		 <p>If there is no equal item, the method returns an empty array.</p>
		 
		 ]]></description>
<param><![CDATA[item The item to test.
		 ]]></param>
<return><![CDATA[An array of all equal items.
		 ]]></return>
</method>
<method name='higher' fullname='org.as3commons.collections.framework:ISortedSet/org.as3commons.collections.framework:ISortedSet:higher' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 Returns the first item that is higher than the given item.
		 
		 ]]></description>
<param><![CDATA[item The item to test.
		 ]]></param>
<return><![CDATA[The next higher item or <code>undefined</code> if there is no higher item.
		 ]]></return>
</method>
<method name='lesser' fullname='org.as3commons.collections.framework:ISortedSet/org.as3commons.collections.framework:ISortedSet:lesser' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 Returns the last item that is lesser than the given item.
		 
		 ]]></description>
<param><![CDATA[item The item to test.
		 ]]></param>
<return><![CDATA[The last lesser item or <code>undefined</code> if there is no lesser item.
		 ]]></return>
</method>
<method name='next' fullname='org.as3commons.collections.framework:ISortedSet/org.as3commons.collections.framework:ISortedSet:next' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 Returns the successor of the given item.
		 
		 <p>If the item is not contained, the method returns <code>undefined</code>.</p>
		 
		 ]]></description>
<param><![CDATA[item The item to get its successor.
		 ]]></param>
<return><![CDATA[The predecessor or <code>undefined</code>.
		 ]]></return>
</method>
<method name='previous' fullname='org.as3commons.collections.framework:ISortedSet/org.as3commons.collections.framework:ISortedSet:previous' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 Returns the predecessor of the given item.
		 
		 <p>If the item is not contained, the method returns <code>undefined</code>.</p>
		 
		 ]]></description>
<param><![CDATA[item The item to get its predecessor.
		 ]]></param>
<return><![CDATA[The predecessor or <code>undefined</code>.
		 ]]></return>
</method>
<packageRec name='org.as3commons.collections.framework.null' fullname='org.as3commons.collections.framework.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<interfaceRec name='IOrderedList' fullname='org.as3commons.collections.framework:IOrderedList' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\framework\IOrderedList.as' namespace='org.as3commons.collections.framework' access='public' baseClasses='org.as3commons.collections.framework:IList;org.as3commons.collections.framework:IInsertionOrder' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Insertion ordered list definition.
	 
	 <p><strong>Description</strong></p>
	 
	 <p>An ordered list is a list that orders its items by insertion.</p>
	 
	 <ul>
	 <li>Elements are addressed by an index or sequentially accessed using an iterator.</li>
	 <li>Always ordered by insertion.</li>
	 <li>May contain duplicates.</li>
	 </ul>
	 
	 <p><strong>Features</strong></p>
	 
	 <p>Addionally to or refining the basic list definition, a ordered list provides:</p>
	 
	 <ul>
	 <li>Rich sequential access using an <code>IOrderedListIterator</code>.<br />
	 <code>iterator()</code></li>
	 <li>Order modification operations (from <code>IInsertionOrder</code>).<br />
	 <code>sort(), reverse()</code></li>
	 <li>Random adding or replacing of items.<br />
	 <code>addFirst(), addLast(), addAt(), addAllAt(), replaceAt()</code></li>
	 </ul>
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 17.02.2010
	 ]]></author>
<see><![CDATA[IList IList interface - Detailed description of the basic list features.
	 ]]></see>
</interfaceRec>
<method name='addAllAt' fullname='org.as3commons.collections.framework:IOrderedList/org.as3commons.collections.framework:IOrderedList:addAllAt' isStatic='false' isFinal='false' isOverride='false'  param_names='index;items' param_types='uint;Array' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[
		 Adds an array of items at a specific position.
		 
		 <p>If the given position exceeds the list size, the method aborts
		 with <code>false</code>.</p>
		 
		 ]]></description>
<param><![CDATA[index The position of the items to add.
		 ]]></param>
<param><![CDATA[items An array of items to add.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item has been added.
		 ]]></return>
</method>
<method name='addAt' fullname='org.as3commons.collections.framework:IOrderedList/org.as3commons.collections.framework:IOrderedList:addAt' isStatic='false' isFinal='false' isOverride='false'  param_names='index;item' param_types='uint;*' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[
		 Adds an item at a specific position.
		 
		 <p>If the given position exceeds the list size, the method
		 aborts with <code>false</code>.</p>
		 
		 ]]></description>
<param><![CDATA[index The position of the new item.
		 ]]></param>
<param><![CDATA[item The item to add.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item has been added.
		 ]]></return>
</method>
<method name='addFirst' fullname='org.as3commons.collections.framework:IOrderedList/org.as3commons.collections.framework:IOrderedList:addFirst' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Adds an item in front of the list.
		 
		 ]]></description>
<param><![CDATA[item The item to add.
		 ]]></param>
</method>
<method name='addLast' fullname='org.as3commons.collections.framework:IOrderedList/org.as3commons.collections.framework:IOrderedList:addLast' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Adds an item at the end of the list.
		 
		 ]]></description>
<param><![CDATA[item The item to add.
		 ]]></param>
</method>
<method name='replaceAt' fullname='org.as3commons.collections.framework:IOrderedList/org.as3commons.collections.framework:IOrderedList:replaceAt' isStatic='false' isFinal='false' isOverride='false'  param_names='index;item' param_types='uint;*' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[
		 Replaces the item at the specified position.
		 
		 <p>If the item at the position strictly equals the given item or the index
		 exceeds the list length, this method aborts with <code>false</code>.</p>
		 
		 ]]></description>
<param><![CDATA[index The position of the item to replace.
		 ]]></param>
<param><![CDATA[item The replacing item.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item has been replaced.
		 ]]></return>
</method>
<packageRec name='org.as3commons.collections.framework.null' fullname='org.as3commons.collections.framework.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<interfaceRec name='ISortedMap' fullname='org.as3commons.collections.framework:ISortedMap' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\framework\ISortedMap.as' namespace='org.as3commons.collections.framework' access='public' baseClasses='org.as3commons.collections.framework:IMap;org.as3commons.collections.framework:ISortOrder' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Sort ordered map definition.
	 
	 <p><strong>Description</strong></p>
	 
	 <p>A sorted map is a map that orders its items by a sort criterion.</p>
	 
	 <ul>
	 <li>Elements are addressed by a key or sequentially accessed using an iterator.</li>
	 <li>Always ordered by a specific sort criterion.</li>
	 <li>May contain duplicates but no duplicate keys.</li>
	 </ul>
	 
	 <p><strong>Features</strong></p>
	 
	 <p>Addionally to or refining the basic map definition, a sorted map provides:</p>
	 
	 <ul>
	 <li>Access to the first and the last element (from <code>IOrder</code>).<br />
	 <code>first, last, removeFirst(), removeLast()</code></li>
	 <li>Order related methods (from <code>ISortOrder</code>).<br />
	 <code>hasEqual()</code></li>
	 <li>Order related methods.<br />
	 <code>lesserKey(), higherKey(), equalKeys()</code></li>
	 </ul>
	 
	 <p><strong>Notes</strong></p>
	 
	 <p>In difference to other sorted map implementations (e.g. the Java TreeMap),
	 a <code>ISortedMap</code> instance sorts over its values and not over its keys.</p>
	 
	 <p>The sort algorithm of a sorted map is stable. Multiple equal items are sorted in the
	 order they are added.</p>
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 18.03.2010
	 ]]></author>
<see><![CDATA[IMap IMap interface - Detailed description of the basic map features.
	 ]]></see>
</interfaceRec>
<method name='equalKeys' fullname='org.as3commons.collections.framework:ISortedMap/org.as3commons.collections.framework:ISortedMap:equalKeys' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='Array'>
<description><![CDATA[
		 Returns an array of the keys of all items that are equal to the given item.
		 
		 <p>If there is no equal item, the method returns an empty array.</p>
		 
		 ]]></description>
<param><![CDATA[item The item to test.
		 ]]></param>
<return><![CDATA[An array of the keys of all equal items.
		 ]]></return>
</method>
<method name='higherKey' fullname='org.as3commons.collections.framework:ISortedMap/org.as3commons.collections.framework:ISortedMap:higherKey' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 Returns the key of the first item that is higher than the given item.
		 
		 ]]></description>
<param><![CDATA[item The item to test.
		 ]]></param>
<return><![CDATA[The key of the next higher item or <code>undefined</code> if there is no higher item.
		 ]]></return>
</method>
<method name='lesserKey' fullname='org.as3commons.collections.framework:ISortedMap/org.as3commons.collections.framework:ISortedMap:lesserKey' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 Returns the key of the last item that is lesser than the given item.
		 
		 ]]></description>
<param><![CDATA[item The item to test.
		 ]]></param>
<return><![CDATA[The key of the last lesser item or <code>undefined</code> if there is no lesser item.
		 ]]></return>
</method>
<method name='nextKey' fullname='org.as3commons.collections.framework:ISortedMap/org.as3commons.collections.framework:ISortedMap:nextKey' isStatic='false' isFinal='false' isOverride='false'  param_names='key' param_types='*' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 Returns the key of the successor of the item mapped to the given key.
		 
		 <p>If the key is not contained, the method returns <code>undefined</code>.</p>
		 
		 ]]></description>
<param><![CDATA[item The key of item to get its successing key.
		 ]]></param>
<return><![CDATA[The key of the predecessor or <code>undefined</code>.
		 ]]></return>
</method>
<method name='previousKey' fullname='org.as3commons.collections.framework:ISortedMap/org.as3commons.collections.framework:ISortedMap:previousKey' isStatic='false' isFinal='false' isOverride='false'  param_names='key' param_types='*' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 Returns the key of the predecessor of the item mapped to the given key.
		 
		 <p>If the key is not contained, the method returns <code>undefined</code>.</p>
		 
		 ]]></description>
<param><![CDATA[item The key of item to get its predecessing key.
		 ]]></param>
<return><![CDATA[The key of the predecessor or <code>undefined</code>.
		 ]]></return>
</method>
<method name='firstKey' fullname='org.as3commons.collections.framework:ISortedMap/org.as3commons.collections.framework:ISortedMap:firstKey/get' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Returns the key of the first item, if any.
		 
		 <p>If the key is not contained, the method returns <code>undefined</code>.</p>
		 
		 ]]></description>
<return><![CDATA[The key of the first item or <code>undefined</code>.
		 ]]></return>
</method>
<method name='lastKey' fullname='org.as3commons.collections.framework:ISortedMap/org.as3commons.collections.framework:ISortedMap:lastKey/get' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Returns the key of the last item, if any.
		 
		 <p>If the key is not contained, the method returns <code>undefined</code>.</p>
		 
		 ]]></description>
<return><![CDATA[The key of the last item or <code>undefined</code>.
		 ]]></return>
</method>
<packageRec name='org.as3commons.collections.framework.core.null' fullname='org.as3commons.collections.framework.core.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<packageRec name='org.as3commons.collections.framework.core.null' fullname='org.as3commons.collections.framework.core.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<classRec name='SortedNode' fullname='org.as3commons.collections.framework.core:SortedNode' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\framework\core\SortedNode.as' namespace='org.as3commons.collections.framework.core' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Sorted node.
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 18.04.2009
	 ]]></author>
</classRec>
<method name='SortedNode' fullname='org.as3commons.collections.framework.core:SortedNode/SortedNode' isStatic='false' isFinal='false' isOverride='false'  param_names='theItem' param_types='*' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 SortedNode constructor.
		 
		 ]]></description>
<param><![CDATA[theItem The data of the node.
		 ]]></param>
</method>
<field name='_order' fullname='org.as3commons.collections.framework.core:SortedNode/private:_order' type='uint' isStatic='true' isConst='false' defaultValue='0' >
<description><![CDATA[
		 Node count.
		 ]]></description>
</field>
<field name='item' fullname='org.as3commons.collections.framework.core:SortedNode/item' type='' isStatic='false' isConst='false' >
<description><![CDATA[
		 The item.
		 ]]></description>
</field>
<field name='left' fullname='org.as3commons.collections.framework.core:SortedNode/left' type='org.as3commons.collections.framework.core:SortedNode' isStatic='false' isConst='false' >
<description><![CDATA[
		 The left subtree.
		 ]]></description>
</field>
<field name='order' fullname='org.as3commons.collections.framework.core:SortedNode/order' type='uint' isStatic='false' isConst='false' >
<description><![CDATA[
		 The node order.
		 
		 <p>Since a sorted collection may contain multiple equal items, the
		 <code>order</code> is used to compare to items.</p>
		 ]]></description>
</field>
<field name='parent' fullname='org.as3commons.collections.framework.core:SortedNode/parent' type='org.as3commons.collections.framework.core:SortedNode' isStatic='false' isConst='false' >
<description><![CDATA[
		 The parent item.
		 ]]></description>
</field>
<field name='priority' fullname='org.as3commons.collections.framework.core:SortedNode/priority' type='uint' isStatic='false' isConst='false' >
<description><![CDATA[
		 The node priority.
		 ]]></description>
</field>
<field name='right' fullname='org.as3commons.collections.framework.core:SortedNode/right' type='org.as3commons.collections.framework.core:SortedNode' isStatic='false' isConst='false' >
<description><![CDATA[
		 The right subtree.
		 ]]></description>
</field>
<packageRec name='org.as3commons.collections.framework.core.null' fullname='org.as3commons.collections.framework.core.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<classRec name='TreapNode' fullname='org.as3commons.collections.framework.core:TreapNode' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\framework\core\TreapNode.as' namespace='org.as3commons.collections.framework.core' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Treap node.
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 18.04.2009
	 ]]></author>
</classRec>
<method name='TreapNode' fullname='org.as3commons.collections.framework.core:TreapNode/TreapNode' isStatic='false' isFinal='false' isOverride='false'  param_names='theItem;theParent' param_types='*;org.as3commons.collections.framework.core:TreapNode' param_defaults='undefined;null' result_type='*'>
<description><![CDATA[
		 Creates a new Treap node.
		 
		 ]]></description>
<param><![CDATA[theItem The data of the node.
		 ]]></param>
<param><![CDATA[theParent The parent node.
		 ]]></param>
</method>
<field name='item' fullname='org.as3commons.collections.framework.core:TreapNode/item' type='' isStatic='false' isConst='false' >
<description><![CDATA[
		 The item.
		 ]]></description>
</field>
<field name='left' fullname='org.as3commons.collections.framework.core:TreapNode/left' type='org.as3commons.collections.framework.core:TreapNode' isStatic='false' isConst='false' >
<description><![CDATA[
		 The left subtree.
		 ]]></description>
</field>
<field name='parent' fullname='org.as3commons.collections.framework.core:TreapNode/parent' type='org.as3commons.collections.framework.core:TreapNode' isStatic='false' isConst='false' >
<description><![CDATA[
		 The parent item.
		 ]]></description>
</field>
<field name='priority' fullname='org.as3commons.collections.framework.core:TreapNode/priority' type='uint' isStatic='false' isConst='false' >
<description><![CDATA[
		 The node priority.
		 ]]></description>
</field>
<field name='right' fullname='org.as3commons.collections.framework.core:TreapNode/right' type='org.as3commons.collections.framework.core:TreapNode' isStatic='false' isConst='false' >
<description><![CDATA[
		 The right subtree.
		 ]]></description>
</field>
<packageRec name='org.as3commons.collections.framework.core.null' fullname='org.as3commons.collections.framework.core.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<classRec name='LinkedNode' fullname='org.as3commons.collections.framework.core:LinkedNode' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\framework\core\LinkedNode.as' namespace='org.as3commons.collections.framework.core' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Linked node.
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 13.03.2009
	 ]]></author>
</classRec>
<method name='LinkedNode' fullname='org.as3commons.collections.framework.core:LinkedNode/LinkedNode' isStatic='false' isFinal='false' isOverride='false'  param_names='theItem' param_types='*' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 LinkedNode constructor.
		 
		 ]]></description>
<param><![CDATA[theItem The data of the node.
		 ]]></param>
</method>
<method name='item' fullname='org.as3commons.collections.framework.core:LinkedNode/item/get' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 The node's data.
		 ]]></description>
</method>
<method name='item' fullname='org.as3commons.collections.framework.core:LinkedNode/item/set' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='_item' fullname='org.as3commons.collections.framework.core:LinkedNode/private:_item' type='' isStatic='false' isConst='false' >
<description><![CDATA[
		 The node's data.
		 ]]></description>
</field>
<field name='left' fullname='org.as3commons.collections.framework.core:LinkedNode/left' type='org.as3commons.collections.framework.core:LinkedNode' isStatic='false' isConst='false' >
<description><![CDATA[
		 The predecessor.
		 ]]></description>
</field>
<field name='right' fullname='org.as3commons.collections.framework.core:LinkedNode/right' type='org.as3commons.collections.framework.core:LinkedNode' isStatic='false' isConst='false' >
<description><![CDATA[
		 The successor.
		 ]]></description>
</field>
<packageRec name='org.as3commons.collections.framework.core.null' fullname='org.as3commons.collections.framework.core.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<classRec name='SortedMapNode' fullname='org.as3commons.collections.framework.core:SortedMapNode' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\framework\core\SortedMapNode.as' namespace='org.as3commons.collections.framework.core' access='public' baseclass='org.as3commons.collections.framework.core:SortedNode' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Sorted map node.
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 18.04.2009
	 ]]></author>
</classRec>
<method name='SortedMapNode' fullname='org.as3commons.collections.framework.core:SortedMapNode/SortedMapNode' isStatic='false' isFinal='false' isOverride='false'  param_names='theKey;theItem' param_types='*;*' param_defaults='undefined;undefined' result_type='*'>
<description><![CDATA[
		 SortedMapNode constructor.
		 
		 ]]></description>
<param><![CDATA[theKey The key of the data of the node.
		 ]]></param>
<param><![CDATA[theItem The data of the node.
		 ]]></param>
</method>
<field name='key' fullname='org.as3commons.collections.framework.core:SortedMapNode/key' type='' isStatic='false' isConst='false' >
<description><![CDATA[
		 The key.
		 ]]></description>
</field>
<packageRec name='org.as3commons.collections.framework.core.null' fullname='org.as3commons.collections.framework.core.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<classRec name='LinkedMapNode' fullname='org.as3commons.collections.framework.core:LinkedMapNode' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\framework\core\LinkedMapNode.as' namespace='org.as3commons.collections.framework.core' access='public' baseclass='org.as3commons.collections.framework.core:LinkedNode' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Linked map node.
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 20.03.2009
	 ]]></author>
</classRec>
<method name='LinkedMapNode' fullname='org.as3commons.collections.framework.core:LinkedMapNode/LinkedMapNode' isStatic='false' isFinal='false' isOverride='false'  param_names='theKey;theItem' param_types='*;*' param_defaults='undefined;undefined' result_type='*'>
<description><![CDATA[
		 Creates a new linked map node.
		 
		 ]]></description>
<param><![CDATA[theKey The key of the data of the node.
		 ]]></param>
<param><![CDATA[theItem The data of the node.
		 ]]></param>
</method>
<field name='key' fullname='org.as3commons.collections.framework.core:LinkedMapNode/key' type='' isStatic='false' isConst='false' >
<description><![CDATA[
		 The key.
		 ]]></description>
</field>
<packageRec name='org.as3commons.collections.framework.core.null' fullname='org.as3commons.collections.framework.core.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<classRec name='AbstractList' fullname='org.as3commons.collections.framework.core:AbstractList' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\framework\core\AbstractList.as' namespace='org.as3commons.collections.framework.core' access='public' baseclass='Object' interfaces='org.as3commons.collections.framework:IList;org.as3commons.collections.framework:IDataProvider' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Abstract list implementation.
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 23.03.2010
	 ]]></author>
</classRec>
<method name='AbstractList' fullname='org.as3commons.collections.framework.core:AbstractList/AbstractList' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 AbstractList constructor.
		 ]]></description>
</method>
<method name='add' fullname='org.as3commons.collections.framework.core:AbstractList/add' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='uint'>
<description><![CDATA[
		 
		 Adds an item to the list.
		 
		 <p>The <code>ArrayList</code> appends the item.</p>
		 
		 <p>The position of items that are added to a <code>SortedList</code>
		 depends on its sort order.</p>
		 
		 ]]></description>
<param><![CDATA[item The item to add.
		 ]]></param>
<return><![CDATA[The position where the item has been added.
		 ]]></return>
</method>
<method name='clear' fullname='org.as3commons.collections.framework.core:AbstractList/clear' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		 
		 Removes all items from the collection.
		 
		 <p>If the collection is already empty, the method aborts with <code>false</code>.</p>
		 
		 ]]></description>
<return><![CDATA[<code>true</code> if items have been removed.
		 ]]></return>
</method>
<method name='count' fullname='org.as3commons.collections.framework.core:AbstractList/count' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='uint'>
<description><![CDATA[
		 
		 Returns the number of occurrences of an item.
		 
		 ]]></description>
<return><![CDATA[Number of occurrences of the given item.
		 ]]></return>
</method>
<method name='firstIndexOf' fullname='org.as3commons.collections.framework.core:AbstractList/firstIndexOf' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='int'>
<description><![CDATA[
		 
		 Returns the index of the first occurrence of an item.
		 
		 ]]></description>
<param><![CDATA[item The item to test.
		 ]]></param>
<return><![CDATA[The first position of the item or <code>-1</code> if the item is not contained.
		 ]]></return>
</method>
<method name='has' fullname='org.as3commons.collections.framework.core:AbstractList/has' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 
		 Tests if an item is contained by the collection.
		 
		 ]]></description>
<param><![CDATA[item The item to test.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item is contained.
		 ]]></return>
</method>
<method name='itemAt' fullname='org.as3commons.collections.framework.core:AbstractList/itemAt' isStatic='false' isFinal='false' isOverride='false'  param_names='index' param_types='uint' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 
		 Returns the item at the specified position.
		 
		 ]]></description>
<param><![CDATA[index The position of the item to get.
		 ]]></param>
<return><![CDATA[The item or <code>undefined</code> if the position is invalid.
		 ]]></return>
</method>
<method name='itemRemoved' fullname='org.as3commons.collections.framework.core:AbstractList/protected:itemRemoved' isStatic='false' isFinal='false' isOverride='false'  param_names='index;item' param_types='uint;*' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		 Template method to notify subclasses after an item has been removed.
		 
		 ]]></description>
<param><![CDATA[index The former index of the removed item.
		 ]]></param>
<param><![CDATA[item The removed item.
		 ]]></param>
</method>
<method name='iterator' fullname='org.as3commons.collections.framework.core:AbstractList/iterator' isStatic='false' isFinal='false' isOverride='false'  param_names='cursor' param_types='*' param_defaults='unknown' result_type='org.as3commons.collections.framework:IIterator'>
<description><![CDATA[
		 
		 Returns an iterator over the iterable data structure.
		 
		 <p>The <code>cursor</code> parameter is optional and not considered by all iterable
		 data structures. E.g. the iterator of an unordered collection such as <code>Map</code>
		 or <code>Set</code> starts always with the first item found. Still passing a parameter to
		 such a data structure does not throw an error and will simply show no effect.</p>
		 
		 <p>The type of the cursor is unspecified and depends on the particular data structure.
		 E.g. lists allow to specify an index, sets to specify an item and maps to specify a key.</p>
		 
		 <p>If <code>cursor</code> is specified, the iterator returns the item that is related
		 to that cursor with the first call to <code>next()</code> (and its predecessor with
		 the first call to <code>previous()</code> if the iterator allows bidirectional
		 navigation.</p>
		 
		 ]]></description>
<param><![CDATA[cursor The initial cursor position.
		 ]]></param>
<return><![CDATA[An iterator.
		 ]]></return>
</method>
<method name='lastIndexOf' fullname='org.as3commons.collections.framework.core:AbstractList/lastIndexOf' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='int'>
<description><![CDATA[
		 
		 Returns the index of the last occurrence of an item.
		 
		 ]]></description>
<param><![CDATA[item The item to test.
		 ]]></param>
<return><![CDATA[The last position of the item or <code>-1</code> if the item is not contained.
		 ]]></return>
</method>
<method name='removeAllAt' fullname='org.as3commons.collections.framework.core:AbstractList/removeAllAt' isStatic='false' isFinal='false' isOverride='false'  param_names='index;numItems' param_types='uint;uint' param_defaults='undefined;undefined' result_type='Array'>
<description><![CDATA[
		 
		 Removes a number of items starting at the specified position.
		 
		 <p>If the given position exceeds the list size, the method aborts with <code>false</code>.</p>
		 
		 <p>If the number of items exceeds the list size, the method
		 removes all items starting at the given index.</p>
		 
		 <p>Returns an empty array if the index is invalid.</p>
		 
		 ]]></description>
<param><![CDATA[index The position of the first item to remove.
		 ]]></param>
<param><![CDATA[numItems The number of items to remove.
		 ]]></param>
<return><![CDATA[An array of all removed items.
		 ]]></return>
</method>
<method name='removeAll' fullname='org.as3commons.collections.framework.core:AbstractList/removeAll' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='uint'>
<description><![CDATA[
		 
		 Removes all occurrences of a particular item from the collection.
		 
		 <p>The items are removed in the order they are stored.</p>
		 
		 ]]></description>
<param><![CDATA[item The item to remove completely from the collection.
		 ]]></param>
<return><![CDATA[Number of items removed.
		 ]]></return>
</method>
<method name='removeAt' fullname='org.as3commons.collections.framework.core:AbstractList/removeAt' isStatic='false' isFinal='false' isOverride='false'  param_names='index' param_types='uint' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 
		 Removes the item at the specified position.
		 
		 ]]></description>
<param><![CDATA[index The position of the item to remove.
		 ]]></param>
<return><![CDATA[The removed item or <code>undefined</code> if there is no item at that position.
		 ]]></return>
</method>
<method name='removeFirst' fullname='org.as3commons.collections.framework.core:AbstractList/removeFirst' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 
		 Removes the first item of the ordered collection.
		 
		 ]]></description>
<return><![CDATA[The formerly first item or <code>undefined</code> if the collection is empty.
		 ]]></return>
</method>
<method name='removeLast' fullname='org.as3commons.collections.framework.core:AbstractList/removeLast' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 
		 Removes the last item of the ordered collection.
		 
		 ]]></description>
<return><![CDATA[The formerly last item or <code>undefined</code> if the collection is empty.
		 ]]></return>
</method>
<method name='remove' fullname='org.as3commons.collections.framework.core:AbstractList/remove' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 
		 Removes an item from the collection.
		 
		 <p>Trying to remove an item which is not contained by the collection
		 leaves the collection untouched and returns <code>false</code>.</p>
		 
		 <p>If the collection contains multiple entries of the given item
		 the first occurrence of the item will be removed.</p>
		 
		 ]]></description>
<param><![CDATA[item The item to remove.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item has been removed.
		 ]]></return>
</method>
<method name='toArray' fullname='org.as3commons.collections.framework.core:AbstractList/toArray' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[
		 
		 Returns an array of all items.
		 
		 <p>The order of items in the array is the same as in the particular collection.</p>
		 
		 <p>Certain collections do not have an explicit order (<code>Map</code>, <code>Set</code>).
		 The order of the items in the array is then not predictable.</p>  
		 
		 <p>If the collection maintains an array as its data source, a copy
		 of the internal array is returned rather than the original array.</p>
		 
		 ]]></description>
<return><![CDATA[An array of the items of the collection.
		 ]]></return>
</method>
<method name='array_internal' fullname='org.as3commons.collections.framework.core:AbstractList/as3commons_collections:array_internal/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[
		 Framework internal getter to retrieve a reference to the internal array.
		 ]]></description>
</method>
<method name='first' fullname='org.as3commons.collections.framework.core:AbstractList/first/get' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 
		 The first item or <code>undefined</code> if the collection is empty.
		 ]]></description>
</method>
<method name='last' fullname='org.as3commons.collections.framework.core:AbstractList/last/get' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 
		 The last item or <code>undefined</code> if the collection is empty.
		 ]]></description>
</method>
<method name='size' fullname='org.as3commons.collections.framework.core:AbstractList/size/get' isStatic='false' isFinal='false' isOverride='false'  result_type='uint'>
<description><![CDATA[
		 
		 The number of items contained by the data provider.
		 ]]></description>
</method>
<method name='array' fullname='org.as3commons.collections.framework.core:AbstractList/array/set' isStatic='false' isFinal='false' isOverride='false'  param_names='array' param_types='Array' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 
		 Specifies an array to be maintained by the list.
		 
		 <p>Already contained elements will be removed beforehand.</p>
		 
		 <p>The list stores a copy of the given array not the array itself.</p>
		 
		 ]]></description>
<param><![CDATA[array The array.
		 ]]></param>
</method>
<field name='_array' fullname='org.as3commons.collections.framework.core:AbstractList/protected:_array' type='Array' isStatic='false' isConst='false' >
<description><![CDATA[
		 The internal array.
		 ]]></description>
</field>
<packageRec name='org.as3commons.collections.framework.core.null' fullname='org.as3commons.collections.framework.core.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<classRec name='SetIterator' fullname='org.as3commons.collections.framework.core:SetIterator' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\framework\core\SetIterator.as' namespace='org.as3commons.collections.framework.core' access='public' baseclass='org.as3commons.collections.iterators:ArrayIterator' interfaces='org.as3commons.collections.framework:ISetIterator' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Internal <code>Set</code> iterator implementation.
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 01.04.2010
	 ]]></author>
</classRec>
<method name='SetIterator' fullname='org.as3commons.collections.framework.core:SetIterator/SetIterator' isStatic='false' isFinal='false' isOverride='false'  param_names='theSet' param_types='org.as3commons.collections.framework:ISet' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 SetIterator constructor.
		 
		 ]]></description>
<param><![CDATA[theSet The set to enumerate.
		 ]]></param>
</method>
<method name='removeCurrent' fullname='org.as3commons.collections.framework.core:SetIterator/protected:removeCurrent' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[
		 
		 Template method to enable subclasses of this iterator to
		 remove the current item from its particular associated
		 collection.
		 ]]></description>
</method>
<method name='nextItem' fullname='org.as3commons.collections.framework.core:SetIterator/nextItem/get' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 
		 The item right to the current cursor position.
		 
		 <p>This item is returned with the next call to <code>next()</code>.</p>
		 
		 <p><code>undefined</code> if the iterator is positioned at end or
		 the set is emtpy.</p>
		 ]]></description>
</method>
<method name='previousItem' fullname='org.as3commons.collections.framework.core:SetIterator/previousItem/get' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 
		 The item left to the current cursor position.
		 
		 <p>This item is returned with the next call to <code>previous()</code>.</p>
		 
		 <p><code>undefined</code> if the iterator is positioned at start or
		 the set is emtpy.</p>
		 ]]></description>
</method>
<field name='_set' fullname='org.as3commons.collections.framework.core:SetIterator/protected:_set' type='org.as3commons.collections.framework:ISet' isStatic='false' isConst='false' >
<description><![CDATA[
		 The set to enumerate.
		 ]]></description>
</field>
<packageRec name='org.as3commons.collections.framework.core.null' fullname='org.as3commons.collections.framework.core.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<classRec name='AbstractListIterator' fullname='org.as3commons.collections.framework.core:AbstractListIterator' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\framework\core\AbstractListIterator.as' namespace='org.as3commons.collections.framework.core' access='public' baseclass='org.as3commons.collections.iterators:ArrayIterator' interfaces='org.as3commons.collections.framework:IListIterator' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Abstract list iterator implementation.
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 05.03.2010
	 ]]></author>
</classRec>
<method name='AbstractListIterator' fullname='org.as3commons.collections.framework.core:AbstractListIterator/AbstractListIterator' isStatic='false' isFinal='false' isOverride='false'  param_names='list;index' param_types='org.as3commons.collections.framework.core:AbstractList;uint' param_defaults='undefined;0' result_type='*'>
<description><![CDATA[
		 ListIterator constructor.
		 
		 <p>If <code>index</code> is specified, the iterator returns the item at that
		 index with the first call to <code>next()</code> and the item at <code>index -1</code>
		 with the first call to <code>previous()</code>.</p>
		 
		 ]]></description>
<param><![CDATA[list The list to be enumerated.
		 ]]></param>
<param><![CDATA[index Start position of enumeration.
		 ]]></param>
</method>
<method name='removeCurrent' fullname='org.as3commons.collections.framework.core:AbstractListIterator/protected:removeCurrent' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[
		 
		 Template method to enable subclasses of this iterator to
		 remove the current item from its particular associated
		 collection.
		 ]]></description>
</method>
<field name='_list' fullname='org.as3commons.collections.framework.core:AbstractListIterator/protected:_list' type='org.as3commons.collections.framework.core:AbstractList' isStatic='false' isConst='false' >
<description><![CDATA[
		 The list to enumerate.
		 ]]></description>
</field>
<packageRec name='org.as3commons.collections.framework.core.null' fullname='org.as3commons.collections.framework.core.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<classRec name='AbstractSortedCollection' fullname='org.as3commons.collections.framework.core:AbstractSortedCollection' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\framework\core\AbstractSortedCollection.as' namespace='org.as3commons.collections.framework.core' access='public' baseclass='Object' interfaces='org.as3commons.collections.framework:ISortOrder' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Abstract sorted tree based collection implementation.
	 
	 <p>This implementation is based on the treap data structure which is here modified to
	 enable duplicate items wich includes multiple equal items.</p>
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 30.03.2010
	 ]]></author>
</classRec>
<method name='AbstractSortedCollection' fullname='org.as3commons.collections.framework.core:AbstractSortedCollection/AbstractSortedCollection' isStatic='false' isFinal='false' isOverride='false'  param_names='comparator' param_types='org.as3commons.collections.framework:IComparator' param_defaults='null' result_type='*'>
<description><![CDATA[
		 AbstractSortedCollection constructor.
		 
		 ]]></description>
<param><![CDATA[comparator The sort criterion.
		 ]]></param>
</method>
<method name='addNode' fullname='org.as3commons.collections.framework.core:AbstractSortedCollection/protected:addNode' isStatic='false' isFinal='false' isOverride='false'  param_names='newNode' param_types='org.as3commons.collections.framework.core:SortedNode' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Adds an item to the tree.
		 
		 <p>The method creates a new tree node, inserts the node as the leaf of
		 its successor/predecessor and rotates then the node upwards until
		 the tree becomes consistent again regarding the priority constraint.</p>
		 
		 <p>If the tree is empty, the method simply creates a new root node.</p>
		 
		 ]]></description>
<param><![CDATA[newNode The node to add.
		 ]]></param>
</method>
<method name='clear' fullname='org.as3commons.collections.framework.core:AbstractSortedCollection/clear' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		 
		 Removes all items from the collection.
		 
		 <p>If the collection is already empty, the method aborts with <code>false</code>.</p>
		 
		 ]]></description>
<return><![CDATA[<code>true</code> if items have been removed.
		 ]]></return>
</method>
<method name='firstEqualNode' fullname='org.as3commons.collections.framework.core:AbstractSortedCollection/protected:firstEqualNode' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='org.as3commons.collections.framework.core:SortedNode'>
<description><![CDATA[
		 Returns the first node whose item equals the given item.
		 
		 ]]></description>
<param><![CDATA[item The item to test.
		 ]]></param>
<return><![CDATA[The first equal node or <code>undefined</code> if there is no equal item contained.
		 ]]></return>
</method>
<method name='hasEqual' fullname='org.as3commons.collections.framework.core:AbstractSortedCollection/hasEqual' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 
		 Tests if the collection contains an item that is equal to the given item.
		 
		 <p>Returns of course <code>true</code> if the given item is contained.</p>
		 
		 ]]></description>
<param><![CDATA[item The item to test.
		 ]]></param>
<return><![CDATA[<code>true</code> if there is an equal item contained.
		 ]]></return>
</method>
<method name='has' fullname='org.as3commons.collections.framework.core:AbstractSortedCollection/has' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 
		 Tests if an item is contained by the collection.
		 
		 ]]></description>
<param><![CDATA[item The item to test.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item is contained.
		 ]]></return>
</method>
<method name='higherNode' fullname='org.as3commons.collections.framework.core:AbstractSortedCollection/protected:higherNode' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='org.as3commons.collections.framework.core:SortedNode'>
<description><![CDATA[
		 Returns the first node whose item is higher than the given item.
		 
		 ]]></description>
<param><![CDATA[item The item to test.
		 ]]></param>
<return><![CDATA[The next higher node or <code>null</code> if there is no higher item.
		 ]]></return>
</method>
<method name='iterator' fullname='org.as3commons.collections.framework.core:AbstractSortedCollection/iterator' isStatic='false' isFinal='false' isOverride='false'  param_names='cursor' param_types='*' param_defaults='unknown' result_type='org.as3commons.collections.framework:IIterator'>
<description><![CDATA[
		 
		 Returns an iterator over the iterable data structure.
		 
		 <p>The <code>cursor</code> parameter is optional and not considered by all iterable
		 data structures. E.g. the iterator of an unordered collection such as <code>Map</code>
		 or <code>Set</code> starts always with the first item found. Still passing a parameter to
		 such a data structure does not throw an error and will simply show no effect.</p>
		 
		 <p>The type of the cursor is unspecified and depends on the particular data structure.
		 E.g. lists allow to specify an index, sets to specify an item and maps to specify a key.</p>
		 
		 <p>If <code>cursor</code> is specified, the iterator returns the item that is related
		 to that cursor with the first call to <code>next()</code> (and its predecessor with
		 the first call to <code>previous()</code> if the iterator allows bidirectional
		 navigation.</p>
		 
		 ]]></description>
<param><![CDATA[cursor The initial cursor position.
		 ]]></param>
<return><![CDATA[An iterator.
		 ]]></return>
</method>
<method name='lesserNode' fullname='org.as3commons.collections.framework.core:AbstractSortedCollection/protected:lesserNode' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='org.as3commons.collections.framework.core:SortedNode'>
<description><![CDATA[
		 Returns the last node whose item is lesser than the given item.
		 
		 ]]></description>
<param><![CDATA[item The item to test.
		 ]]></param>
<return><![CDATA[The last lesser node or <code>null</code> if there is no lesser item.
		 ]]></return>
</method>
<method name='mostLeftNode_internal' fullname='org.as3commons.collections.framework.core:AbstractSortedCollection/as3commons_collections:mostLeftNode_internal' isStatic='false' isFinal='false' isOverride='false'  param_names='node' param_types='org.as3commons.collections.framework.core:SortedNode' param_defaults='null' result_type='org.as3commons.collections.framework.core:SortedNode'>
<description><![CDATA[
		 Framework internal method to retrieve the lowest node of the given subtree (node).
		 
		 ]]></description>
<param><![CDATA[node The root node of the subtree.
		 ]]></param>
<return><![CDATA[The lowest node or <code>null</code>, if the collection is empty.
		 ]]></return>
</method>
<method name='mostRightNode_internal' fullname='org.as3commons.collections.framework.core:AbstractSortedCollection/as3commons_collections:mostRightNode_internal' isStatic='false' isFinal='false' isOverride='false'  param_names='node' param_types='org.as3commons.collections.framework.core:SortedNode' param_defaults='null' result_type='org.as3commons.collections.framework.core:SortedNode'>
<description><![CDATA[
		 Framework internal method to retrieve the highest node of the given subtree (node).
		 
		 ]]></description>
<param><![CDATA[node The root node of the subtree.
		 ]]></param>
<return><![CDATA[The highest node or <code>null</code>, if the collection is empty.
		 ]]></return>
</method>
<method name='nextNode_internal' fullname='org.as3commons.collections.framework.core:AbstractSortedCollection/as3commons_collections:nextNode_internal' isStatic='false' isFinal='false' isOverride='false'  param_names='node' param_types='org.as3commons.collections.framework.core:SortedNode' param_defaults='undefined' result_type='org.as3commons.collections.framework.core:SortedNode'>
<description><![CDATA[
		 Framework internal method to retrieve the successor of a given node.
		 
		 ]]></description>
<param><![CDATA[node The node to get the successor.
		 ]]></param>
<return><![CDATA[The next node or <code>null</code> if the node is the first item or the collection is empty.
		 ]]></return>
</method>
<method name='previousNode_internal' fullname='org.as3commons.collections.framework.core:AbstractSortedCollection/as3commons_collections:previousNode_internal' isStatic='false' isFinal='false' isOverride='false'  param_names='node' param_types='org.as3commons.collections.framework.core:SortedNode' param_defaults='undefined' result_type='org.as3commons.collections.framework.core:SortedNode'>
<description><![CDATA[
		 Framework internal method to retrieve the predecessor of a given node.
		 
		 ]]></description>
<param><![CDATA[node The node to get the predecessor.
		 ]]></param>
<return><![CDATA[The previous node or <code>null</code> if the node is the last node or the collection is empty.
		 ]]></return>
</method>
<method name='removeFirst' fullname='org.as3commons.collections.framework.core:AbstractSortedCollection/removeFirst' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 
		 Removes the first item of the ordered collection.
		 
		 ]]></description>
<return><![CDATA[The formerly first item or <code>undefined</code> if the collection is empty.
		 ]]></return>
</method>
<method name='removeLast' fullname='org.as3commons.collections.framework.core:AbstractSortedCollection/removeLast' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 
		 Removes the last item of the ordered collection.
		 
		 ]]></description>
<return><![CDATA[The formerly last item or <code>undefined</code> if the collection is empty.
		 ]]></return>
</method>
<method name='removeNode_internal' fullname='org.as3commons.collections.framework.core:AbstractSortedCollection/as3commons_collections:removeNode_internal' isStatic='false' isFinal='false' isOverride='false'  param_names='node' param_types='org.as3commons.collections.framework.core:SortedNode' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Framework internal method to remove a node from the collection.
		 
		 ]]></description>
<param><![CDATA[node The node to remove.
		 ]]></param>
</method>
<method name='removeNode' fullname='org.as3commons.collections.framework.core:AbstractSortedCollection/protected:removeNode' isStatic='false' isFinal='false' isOverride='false'  param_names='node' param_types='org.as3commons.collections.framework.core:SortedNode' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Removes a node from the tree.
		 
		 <p>The method rotates the given node downwards until it becomes a leaf node
		 and gets removed from the tree.</p>
		 
		 ]]></description>
<param><![CDATA[node The node to remove.
		 ]]></param>
</method>
<method name='remove' fullname='org.as3commons.collections.framework.core:AbstractSortedCollection/remove' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 
		 Removes an item from the collection.
		 
		 <p>Trying to remove an item which is not contained by the collection
		 leaves the collection untouched and returns <code>false</code>.</p>
		 
		 <p>If the collection contains multiple entries of the given item
		 the first occurrence of the item will be removed.</p>
		 
		 ]]></description>
<param><![CDATA[item The item to remove.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item has been removed.
		 ]]></return>
</method>
<method name='rotate' fullname='org.as3commons.collections.framework.core:AbstractSortedCollection/protected:rotate' isStatic='false' isFinal='false' isOverride='false'  param_names='parent;child' param_types='org.as3commons.collections.framework.core:SortedNode;org.as3commons.collections.framework.core:SortedNode' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		 Rotates a parent with its child node.
		 
		 ]]></description>
<param><![CDATA[parent The parent node.
		 ]]></param>
<param><![CDATA[child The child node.
		 ]]></param>
</method>
<method name='toArray' fullname='org.as3commons.collections.framework.core:AbstractSortedCollection/toArray' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[
		 
		 Returns an array of all items.
		 
		 <p>The order of items in the array is the same as in the particular collection.</p>
		 
		 <p>Certain collections do not have an explicit order (<code>Map</code>, <code>Set</code>).
		 The order of the items in the array is then not predictable.</p>  
		 
		 <p>If the collection maintains an array as its data source, a copy
		 of the internal array is returned rather than the original array.</p>
		 
		 ]]></description>
<return><![CDATA[An array of the items of the collection.
		 ]]></return>
</method>
<method name='comparator' fullname='org.as3commons.collections.framework.core:AbstractSortedCollection/comparator/get' isStatic='false' isFinal='false' isOverride='false'  result_type='org.as3commons.collections.framework:IComparator'>
<description><![CDATA[
		 
		 Returns or sets the initial comparator of the collection.
		 
		 <p>You cannot reset a comparator of a collection that contains items.
		 In that case an <code>ArgumentError</code> is thrown.</p>
		 
		 ]]></description>
</method>
<method name='first' fullname='org.as3commons.collections.framework.core:AbstractSortedCollection/first/get' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 
		 The first item or <code>undefined</code> if the collection is empty.
		 ]]></description>
</method>
<method name='last' fullname='org.as3commons.collections.framework.core:AbstractSortedCollection/last/get' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 
		 The last item or <code>undefined</code> if the collection is empty.
		 ]]></description>
</method>
<method name='size' fullname='org.as3commons.collections.framework.core:AbstractSortedCollection/size/get' isStatic='false' isFinal='false' isOverride='false'  result_type='uint'>
<description><![CDATA[
		 
		 The number of items contained by the collection.
		 ]]></description>
</method>
<method name='comparator' fullname='org.as3commons.collections.framework.core:AbstractSortedCollection/comparator/set' isStatic='false' isFinal='false' isOverride='false'  param_names='comparator' param_types='org.as3commons.collections.framework:IComparator' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 
		 Returns or sets the initial comparator of the collection.
		 
		 <p>You cannot reset a comparator of a collection that contains items.
		 In that case an <code>ArgumentError</code> is thrown.</p>
		 
		 ]]></description>
</method>
<field name='_comparator' fullname='org.as3commons.collections.framework.core:AbstractSortedCollection/protected:_comparator' type='org.as3commons.collections.framework:IComparator' isStatic='false' isConst='false' >
<description><![CDATA[
		 The sort criterion.
		 ]]></description>
</field>
<field name='_root' fullname='org.as3commons.collections.framework.core:AbstractSortedCollection/protected:_root' type='org.as3commons.collections.framework.core:SortedNode' isStatic='false' isConst='false' >
<description><![CDATA[
		 The root node.
		 ]]></description>
</field>
<field name='_size' fullname='org.as3commons.collections.framework.core:AbstractSortedCollection/protected:_size' type='uint' isStatic='false' isConst='false' defaultValue='0' >
<description><![CDATA[
		 The size of the collection.
		 ]]></description>
</field>
<packageRec name='org.as3commons.collections.framework.core.null' fullname='org.as3commons.collections.framework.core.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<classRec name='MapIterator' fullname='org.as3commons.collections.framework.core:MapIterator' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\framework\core\MapIterator.as' namespace='org.as3commons.collections.framework.core' access='public' baseclass='org.as3commons.collections.iterators:ArrayIterator' interfaces='org.as3commons.collections.framework:IMapIterator' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Internal <code>Map</code> iterator implementation.
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 01.04.2010
	 ]]></author>
</classRec>
<method name='MapIterator' fullname='org.as3commons.collections.framework.core:MapIterator/MapIterator' isStatic='false' isFinal='false' isOverride='false'  param_names='map' param_types='org.as3commons.collections.framework:IMap' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 MapIterator constructor.
		 
		 ]]></description>
<param><![CDATA[map The map to enumerate.
		 ]]></param>
</method>
<method name='next' fullname='org.as3commons.collections.framework.core:MapIterator/next' isStatic='false' isFinal='false' isOverride='true'  result_type='*'>
<description><![CDATA[
		 
		 Returns the next item and places the internal cursor after that item.
		 
		 <p>Returnes <code>undefined</code> if no next item exists or the collection is empty.</p>
		 
		 ]]></description>
<return><![CDATA[The next item of iteration or <code>undefined</code> if no such item exists.
		 ]]></return>
</method>
<method name='previous' fullname='org.as3commons.collections.framework.core:MapIterator/previous' isStatic='false' isFinal='false' isOverride='true'  result_type='*'>
<description><![CDATA[
		 
		 Returns the previous item and places the internal cursor before that item. 
		 
		 <p>Returnes <code>undefined</code> if no previous item exists or the collection is empty.</p>
		 
		 ]]></description>
<return><![CDATA[The previous item of iteration or <code>undefined</code> if no such item exists.
		 ]]></return>
</method>
<method name='removeCurrent' fullname='org.as3commons.collections.framework.core:MapIterator/protected:removeCurrent' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[
		 
		 Template method to enable subclasses of this iterator to
		 remove the current item from its particular associated
		 collection.
		 ]]></description>
</method>
<method name='current' fullname='org.as3commons.collections.framework.core:MapIterator/current/get' isStatic='false' isFinal='false' isOverride='true'  result_type='*'>
<description><![CDATA[
		 
		 The item that most recently has been returned by <code>next()</code>
		 or <code>previous()</code>.
		 
		 <p>Returns <code>undefined</code> if the iterator points to the postion before the first
		 or after the last item or the collection is empty.</p>
		 
		 <p>The current item is nullified after all operations that modify the underlying
		 collection order (<code>add(), remove()</code>) or modify the cursor position
		 (<code>start(), end()</code>).</p>
		 
		 <p>Returns initially <code>undefined</code>.</p>
		 
		 ]]></description>
<return><![CDATA[The last returned item or <code>undefined</code> if no such item.
		 ]]></return>
</method>
<method name='key' fullname='org.as3commons.collections.framework.core:MapIterator/key/get' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 
		 The key of the last returned item.
		 
		 <p><code>undefined</code> if the iterator points to the postion before the first
		 or after the last item or the map is empty.</p>
		 
		 <p>The key is reset to <code>undefined</code> after all operations that modify the underlying
		 map order (<code>add(), remove()</code>) or modify the cursor position
		 (<code>start(), end()</code>).</p>
		 
		 <p>Initially <code>undefined</code>.</p>
		 ]]></description>
</method>
<method name='nextKey' fullname='org.as3commons.collections.framework.core:MapIterator/nextKey/get' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 
		 The key of the item right to the current cursor position.
		 
		 <p>The item stored under this key is returned with the next call
		 to <code>next()</code>.</p>
		 
		 <p><code>undefined</code> if the iterator is positioned at end or
		 the map is emtpy.</p>
		 ]]></description>
</method>
<method name='previousKey' fullname='org.as3commons.collections.framework.core:MapIterator/previousKey/get' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 
		 The key of the item left to the current cursor position.
		 
		 <p>The item stored under this key is returned with the next call
		 to <code>previous()</code>.</p>
		 
		 <p><code>undefined</code> if the iterator is positioned at start or
		 the map is emtpy.</p>
		 ]]></description>
</method>
<field name='_map' fullname='org.as3commons.collections.framework.core:MapIterator/protected:_map' type='org.as3commons.collections.framework:IMap' isStatic='false' isConst='false' >
<description><![CDATA[
		 The map to enumerate.
		 ]]></description>
</field>
<packageRec name='org.as3commons.collections.framework.core.null' fullname='org.as3commons.collections.framework.core.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<classRec name='AbstractLinkedCollection' fullname='org.as3commons.collections.framework.core:AbstractLinkedCollection' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\framework\core\AbstractLinkedCollection.as' namespace='org.as3commons.collections.framework.core' access='public' baseclass='Object' interfaces='org.as3commons.collections.framework:IInsertionOrder' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Abstract linked list based collection implementation.
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 04.03.2010
	 ]]></author>
</classRec>
<method name='AbstractLinkedCollection' fullname='org.as3commons.collections.framework.core:AbstractLinkedCollection/AbstractLinkedCollection' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 AbstractLinkedCollection constructor.
		 ]]></description>
</method>
<method name='addNodeAfter' fullname='org.as3commons.collections.framework.core:AbstractLinkedCollection/protected:addNodeAfter' isStatic='false' isFinal='false' isOverride='false'  param_names='previous;node' param_types='org.as3commons.collections.framework.core:LinkedNode;org.as3commons.collections.framework.core:LinkedNode' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		 Inserts a new node after an existing node.
		 
		 <p>For convenience, the <code>next</code> may be null, which adds the node
		 at begin of the list.</p>
		 
		 ]]></description>
<param><![CDATA[left The existing node.
		 ]]></param>
<param><![CDATA[node The new node to be added after.
		 ]]></param>
</method>
<method name='addNodeBefore' fullname='org.as3commons.collections.framework.core:AbstractLinkedCollection/protected:addNodeBefore' isStatic='false' isFinal='false' isOverride='false'  param_names='next;node' param_types='org.as3commons.collections.framework.core:LinkedNode;org.as3commons.collections.framework.core:LinkedNode' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		 Inserts a new node before an existing node.
		 
		 <p>For convenience, the <code>next</code> may be null, which appends the node
		 to the list.</p>
		 
		 ]]></description>
<param><![CDATA[right The existing node.
		 ]]></param>
<param><![CDATA[node The node to be added before.
		 ]]></param>
</method>
<method name='addNodeFirst' fullname='org.as3commons.collections.framework.core:AbstractLinkedCollection/protected:addNodeFirst' isStatic='false' isFinal='false' isOverride='false'  param_names='node' param_types='org.as3commons.collections.framework.core:LinkedNode' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Inserts a new node at the begin of the list.
		 
		 ]]></description>
<param><![CDATA[node The node to add at start.
		 ]]></param>
</method>
<method name='addNodeLast' fullname='org.as3commons.collections.framework.core:AbstractLinkedCollection/protected:addNodeLast' isStatic='false' isFinal='false' isOverride='false'  param_names='node' param_types='org.as3commons.collections.framework.core:LinkedNode' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Inserts a new node at the end of the list.
		 
		 ]]></description>
<param><![CDATA[node The node to add at end.
		 ]]></param>
</method>
<method name='clear' fullname='org.as3commons.collections.framework.core:AbstractLinkedCollection/clear' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		 
		 Removes all items from the collection.
		 
		 <p>If the collection is already empty, the method aborts with <code>false</code>.</p>
		 
		 ]]></description>
<return><![CDATA[<code>true</code> if items have been removed.
		 ]]></return>
</method>
<method name='firstNodeOf' fullname='org.as3commons.collections.framework.core:AbstractLinkedCollection/protected:firstNodeOf' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='org.as3commons.collections.framework.core:LinkedNode'>
<description><![CDATA[
		 Retrieves the first node containing the specified item.
		 
		 ]]></description>
<param><![CDATA[item The item to get its node.
		 ]]></param>
<return><![CDATA[The node or <code>undefined</code> if the item is not contained.
		 ]]></return>
</method>
<method name='has' fullname='org.as3commons.collections.framework.core:AbstractLinkedCollection/has' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 
		 Tests if an item is contained by the collection.
		 
		 ]]></description>
<param><![CDATA[item The item to test.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item is contained.
		 ]]></return>
</method>
<method name='iterator' fullname='org.as3commons.collections.framework.core:AbstractLinkedCollection/iterator' isStatic='false' isFinal='false' isOverride='false'  param_names='cursor' param_types='*' param_defaults='unknown' result_type='org.as3commons.collections.framework:IIterator'>
<description><![CDATA[
		 
		 Returns an iterator over the iterable data structure.
		 
		 <p>The <code>cursor</code> parameter is optional and not considered by all iterable
		 data structures. E.g. the iterator of an unordered collection such as <code>Map</code>
		 or <code>Set</code> starts always with the first item found. Still passing a parameter to
		 such a data structure does not throw an error and will simply show no effect.</p>
		 
		 <p>The type of the cursor is unspecified and depends on the particular data structure.
		 E.g. lists allow to specify an index, sets to specify an item and maps to specify a key.</p>
		 
		 <p>If <code>cursor</code> is specified, the iterator returns the item that is related
		 to that cursor with the first call to <code>next()</code> (and its predecessor with
		 the first call to <code>previous()</code> if the iterator allows bidirectional
		 navigation.</p>
		 
		 ]]></description>
<param><![CDATA[cursor The initial cursor position.
		 ]]></param>
<return><![CDATA[An iterator.
		 ]]></return>
</method>
<method name='mergeSort' fullname='org.as3commons.collections.framework.core:AbstractLinkedCollection/protected:mergeSort' isStatic='false' isFinal='false' isOverride='false'  param_names='comparator' param_types='org.as3commons.collections.framework:IComparator' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Merge sort algorithm.
		 
		 <p>The algorithm has been implemented by Michael Baczynski,
		 http://lab.polygonal.de/ds/ and is unmodified taken from there.</p>
		 
		 ]]></description>
<param><![CDATA[comparator The sort criterion.
		 ]]></param>
</method>
<method name='removeFirst' fullname='org.as3commons.collections.framework.core:AbstractLinkedCollection/removeFirst' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 
		 Removes the first item of the ordered collection.
		 
		 ]]></description>
<return><![CDATA[The formerly first item or <code>undefined</code> if the collection is empty.
		 ]]></return>
</method>
<method name='removeLast' fullname='org.as3commons.collections.framework.core:AbstractLinkedCollection/removeLast' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 
		 Removes the last item of the ordered collection.
		 
		 ]]></description>
<return><![CDATA[The formerly last item or <code>undefined</code> if the collection is empty.
		 ]]></return>
</method>
<method name='removeNode' fullname='org.as3commons.collections.framework.core:AbstractLinkedCollection/protected:removeNode' isStatic='false' isFinal='false' isOverride='false'  param_names='node' param_types='org.as3commons.collections.framework.core:LinkedNode' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Unlinks a node and connects predecessor with successor.
		 
		 ]]></description>
<param><![CDATA[node The node to remove
		 ]]></param>
</method>
<method name='remove' fullname='org.as3commons.collections.framework.core:AbstractLinkedCollection/remove' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 
		 Removes an item from the collection.
		 
		 <p>Trying to remove an item which is not contained by the collection
		 leaves the collection untouched and returns <code>false</code>.</p>
		 
		 <p>If the collection contains multiple entries of the given item
		 the first occurrence of the item will be removed.</p>
		 
		 ]]></description>
<param><![CDATA[item The item to remove.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item has been removed.
		 ]]></return>
</method>
<method name='reverse' fullname='org.as3commons.collections.framework.core:AbstractLinkedCollection/reverse' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		 
		 Reverses the collection order.
		 
		 <p>If the collection size is less than 2, the method aborts with <code>false</code>.</p>
		 
		 ]]></description>
<return><![CDATA[<code>true</code> if the collection has been reversed.
		 ]]></return>
</method>
<method name='sort' fullname='org.as3commons.collections.framework.core:AbstractLinkedCollection/sort' isStatic='false' isFinal='false' isOverride='false'  param_names='comparator' param_types='org.as3commons.collections.framework:IComparator' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 
		 Sorts the linked collection using the given comparator.
		 
		 <p>The sort algorithm used by implementors of this interface is stable which
		 means that equal items are sorted in the same order they had before the sorting.</p>
		 
		 <p>If the collection size is less than 2, the method aborts with <code>false</code>.</p>
		 
		 ]]></description>
<param><![CDATA[comparator The sort criterion.
		 ]]></param>
<return><![CDATA[<code>true</code> if the linked collection has been sorted.
		 ]]></return>
</method>
<method name='toArray' fullname='org.as3commons.collections.framework.core:AbstractLinkedCollection/toArray' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[
		 
		 Returns an array of all items.
		 
		 <p>The order of items in the array is the same as in the particular collection.</p>
		 
		 <p>Certain collections do not have an explicit order (<code>Map</code>, <code>Set</code>).
		 The order of the items in the array is then not predictable.</p>  
		 
		 <p>If the collection maintains an array as its data source, a copy
		 of the internal array is returned rather than the original array.</p>
		 
		 ]]></description>
<return><![CDATA[An array of the items of the collection.
		 ]]></return>
</method>
<method name='firstNode_internal' fullname='org.as3commons.collections.framework.core:AbstractLinkedCollection/as3commons_collections:firstNode_internal/get' isStatic='false' isFinal='false' isOverride='false'  result_type='org.as3commons.collections.framework.core:LinkedNode'>
<description><![CDATA[
		 Framework internal getter to retrieve the start node of the list. 
		 ]]></description>
</method>
<method name='first' fullname='org.as3commons.collections.framework.core:AbstractLinkedCollection/first/get' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 
		 The first item or <code>undefined</code> if the collection is empty.
		 ]]></description>
</method>
<method name='lastNode_internal' fullname='org.as3commons.collections.framework.core:AbstractLinkedCollection/as3commons_collections:lastNode_internal/get' isStatic='false' isFinal='false' isOverride='false'  result_type='org.as3commons.collections.framework.core:LinkedNode'>
<description><![CDATA[
		 Framework internal getter to retrieve the last node of the list. 
		 ]]></description>
</method>
<method name='last' fullname='org.as3commons.collections.framework.core:AbstractLinkedCollection/last/get' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 
		 The last item or <code>undefined</code> if the collection is empty.
		 ]]></description>
</method>
<method name='size' fullname='org.as3commons.collections.framework.core:AbstractLinkedCollection/size/get' isStatic='false' isFinal='false' isOverride='false'  result_type='uint'>
<description><![CDATA[
		 
		 The number of items contained by the collection.
		 ]]></description>
</method>
<field name='_first' fullname='org.as3commons.collections.framework.core:AbstractLinkedCollection/protected:_first' type='org.as3commons.collections.framework.core:LinkedNode' isStatic='false' isConst='false' >
<description><![CDATA[
		 The first node.
		 ]]></description>
</field>
<field name='_last' fullname='org.as3commons.collections.framework.core:AbstractLinkedCollection/protected:_last' type='org.as3commons.collections.framework.core:LinkedNode' isStatic='false' isConst='false' >
<description><![CDATA[
		 The last node.
		 ]]></description>
</field>
<field name='_size' fullname='org.as3commons.collections.framework.core:AbstractLinkedCollection/protected:_size' type='uint' isStatic='false' isConst='false' defaultValue='0' >
<description><![CDATA[
		 The size of the list.
		 ]]></description>
</field>
<packageRec name='org.as3commons.collections.framework.core.null' fullname='org.as3commons.collections.framework.core.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<classRec name='AbstractLinkedCollectionIterator' fullname='org.as3commons.collections.framework.core:AbstractLinkedCollectionIterator' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\framework\core\AbstractLinkedCollectionIterator.as' namespace='org.as3commons.collections.framework.core' access='public' baseclass='Object' interfaces='org.as3commons.collections.framework:ICollectionIterator' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Abstract linked list based collection iterator implementation.
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 04.03.2010
	 ]]></author>
</classRec>
<method name='AbstractLinkedCollectionIterator' fullname='org.as3commons.collections.framework.core:AbstractLinkedCollectionIterator/AbstractLinkedCollectionIterator' isStatic='false' isFinal='false' isOverride='false'  param_names='collection' param_types='org.as3commons.collections.framework.core:AbstractLinkedCollection' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 AbstractLinkedCollectionIterator constructor.
		 
		 ]]></description>
<param><![CDATA[collection The linked collection.
		 ]]></param>
</method>
<method name='end' fullname='org.as3commons.collections.framework.core:AbstractLinkedCollectionIterator/end' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 
		 Resets the iterator to the position after the last item.
		 
		 <p>The last item of the collection is then returned with a subsequent
		 call to <code>previous()</code>.</p>
		 ]]></description>
</method>
<method name='hasNext' fullname='org.as3commons.collections.framework.core:AbstractLinkedCollectionIterator/hasNext' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		 
		 Returns <code>true</code> if there are succeeding items to be enumerated.
		 
		 <p>Returns <code>false</code>, if the internal cursor is placed after the
		 last item or the collection is empty.</p>
		 
		 ]]></description>
<return><![CDATA[<code>true</code> if there are items left to be enumerated.
		 ]]></return>
</method>
<method name='hasPrevious' fullname='org.as3commons.collections.framework.core:AbstractLinkedCollectionIterator/hasPrevious' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		 
		 Returns <code>true</code> if there are preceeding items to be enumerated.
		 
		 <p>Returns <code>false</code>, if the internal cursor is placed before the
		 first item or the collection is empty.</p>
		 
		 ]]></description>
<return><![CDATA[<code>true</code> if there are items left to be enumerated.
		 ]]></return>
</method>
<method name='next' fullname='org.as3commons.collections.framework.core:AbstractLinkedCollectionIterator/next' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 
		 Returns the next item and places the internal cursor after that item.
		 
		 <p>Returnes <code>undefined</code> if no next item exists or the collection is empty.</p>
		 
		 ]]></description>
<return><![CDATA[The next item of iteration or <code>undefined</code> if no such item exists.
		 ]]></return>
</method>
<method name='previous' fullname='org.as3commons.collections.framework.core:AbstractLinkedCollectionIterator/previous' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 
		 Returns the previous item and places the internal cursor before that item. 
		 
		 <p>Returnes <code>undefined</code> if no previous item exists or the collection is empty.</p>
		 
		 ]]></description>
<return><![CDATA[The previous item of iteration or <code>undefined</code> if no such item exists.
		 ]]></return>
</method>
<method name='removeCurrent' fullname='org.as3commons.collections.framework.core:AbstractLinkedCollectionIterator/protected:removeCurrent' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 Template method to enable subclasses of this iterator to
		 remove the item of the current node from its particular associated
		 collection.
		 ]]></description>
</method>
<method name='remove' fullname='org.as3commons.collections.framework.core:AbstractLinkedCollectionIterator/remove' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		 
		 Removes the current item from the collection if any.
		 
		 ]]></description>
<return><![CDATA[<code>true</code> if an item has been removed.
		 ]]></return>
</method>
<method name='start' fullname='org.as3commons.collections.framework.core:AbstractLinkedCollectionIterator/start' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 
		 Resets the iterator to the position before the first item.
		 
		 <p>The first item of the collection is then returned with a subsequent
		 call to <code>next()</code>.</p>
		 ]]></description>
</method>
<method name='current' fullname='org.as3commons.collections.framework.core:AbstractLinkedCollectionIterator/current/get' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 
		 The item that most recently has been returned by <code>next()</code>
		 or <code>previous()</code>.
		 
		 <p>Returns <code>undefined</code> if the iterator points to the postion before the first
		 or after the last item or the collection is empty.</p>
		 
		 <p>The current item is nullified after all operations that modify the underlying
		 collection order (<code>add(), remove()</code>) or modify the cursor position
		 (<code>start(), end()</code>).</p>
		 
		 <p>Returns initially <code>undefined</code>.</p>
		 
		 ]]></description>
<return><![CDATA[The last returned item or <code>undefined</code> if no such item.
		 ]]></return>
</method>
<field name='_collection' fullname='org.as3commons.collections.framework.core:AbstractLinkedCollectionIterator/protected:_collection' type='org.as3commons.collections.framework.core:AbstractLinkedCollection' isStatic='false' isConst='false' >
<description><![CDATA[
		 The list to enumerate.
		 ]]></description>
</field>
<field name='_current' fullname='org.as3commons.collections.framework.core:AbstractLinkedCollectionIterator/protected:_current' type='org.as3commons.collections.framework.core:LinkedNode' isStatic='false' isConst='false' >
<description><![CDATA[
		 The node of the last returned item.
		 
		 <p>Initially this property is <code>null</code> (no item returned yet).</p>
		 
		 <p><code>start(), end(), addBefore(), addAfter()</code> and <code>remove()</code>
		 set this property to <code>null</code>.</p>
		 ]]></description>
</field>
<field name='_next' fullname='org.as3commons.collections.framework.core:AbstractLinkedCollectionIterator/protected:_next' type='org.as3commons.collections.framework.core:LinkedNode' isStatic='false' isConst='false' >
<description><![CDATA[
		 The cursor position.
		 
		 <p>The cursor is positioned before the item stored in the <code>_next</code>
		 property. If the LinkedList is empty or the cursor is placed at
		 end, <code>_next</code> has the value <code>null</code>.</p>
		 ]]></description>
</field>
<packageRec name='org.as3commons.collections.framework.core.null' fullname='org.as3commons.collections.framework.core.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<classRec name='AbstractSortedCollectionIterator' fullname='org.as3commons.collections.framework.core:AbstractSortedCollectionIterator' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\framework\core\AbstractSortedCollectionIterator.as' namespace='org.as3commons.collections.framework.core' access='public' baseclass='Object' interfaces='org.as3commons.collections.framework:ICollectionIterator' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Abstract sorted tree based collection iterator implementation.
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 30.03.2010
	 ]]></author>
</classRec>
<method name='AbstractSortedCollectionIterator' fullname='org.as3commons.collections.framework.core:AbstractSortedCollectionIterator/AbstractSortedCollectionIterator' isStatic='false' isFinal='false' isOverride='false'  param_names='collection;next' param_types='org.as3commons.collections.framework.core:AbstractSortedCollection;org.as3commons.collections.framework.core:SortedNode' param_defaults='undefined;null' result_type='*'>
<description><![CDATA[
		 AbstractSortedCollectionIterator constructor.
		 
		 <p>If <code>next</code> is specified, the iterator returns the item of that
		 node with the first call to <code>next()</code> and its predecessor
		 with the first call to <code>previous()</code>.</p>
		 
		 ]]></description>
<param><![CDATA[collection The sorted collection.
		 ]]></param>
<param><![CDATA[next The node to start the iteration with.
		 ]]></param>
</method>
<method name='end' fullname='org.as3commons.collections.framework.core:AbstractSortedCollectionIterator/end' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 
		 Resets the iterator to the position after the last item.
		 
		 <p>The last item of the collection is then returned with a subsequent
		 call to <code>previous()</code>.</p>
		 ]]></description>
</method>
<method name='hasNext' fullname='org.as3commons.collections.framework.core:AbstractSortedCollectionIterator/hasNext' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		 
		 Returns <code>true</code> if there are succeeding items to be enumerated.
		 
		 <p>Returns <code>false</code>, if the internal cursor is placed after the
		 last item or the collection is empty.</p>
		 
		 ]]></description>
<return><![CDATA[<code>true</code> if there are items left to be enumerated.
		 ]]></return>
</method>
<method name='hasPrevious' fullname='org.as3commons.collections.framework.core:AbstractSortedCollectionIterator/hasPrevious' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		 
		 Returns <code>true</code> if there are preceeding items to be enumerated.
		 
		 <p>Returns <code>false</code>, if the internal cursor is placed before the
		 first item or the collection is empty.</p>
		 
		 ]]></description>
<return><![CDATA[<code>true</code> if there are items left to be enumerated.
		 ]]></return>
</method>
<method name='next' fullname='org.as3commons.collections.framework.core:AbstractSortedCollectionIterator/next' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 
		 Returns the next item and places the internal cursor after that item.
		 
		 <p>Returnes <code>undefined</code> if no next item exists or the collection is empty.</p>
		 
		 ]]></description>
<return><![CDATA[The next item of iteration or <code>undefined</code> if no such item exists.
		 ]]></return>
</method>
<method name='previous' fullname='org.as3commons.collections.framework.core:AbstractSortedCollectionIterator/previous' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 
		 Returns the previous item and places the internal cursor before that item. 
		 
		 <p>Returnes <code>undefined</code> if no previous item exists or the collection is empty.</p>
		 
		 ]]></description>
<return><![CDATA[The previous item of iteration or <code>undefined</code> if no such item exists.
		 ]]></return>
</method>
<method name='remove' fullname='org.as3commons.collections.framework.core:AbstractSortedCollectionIterator/remove' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		 
		 Removes the current item from the collection if any.
		 
		 ]]></description>
<return><![CDATA[<code>true</code> if an item has been removed.
		 ]]></return>
</method>
<method name='start' fullname='org.as3commons.collections.framework.core:AbstractSortedCollectionIterator/start' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 
		 Resets the iterator to the position before the first item.
		 
		 <p>The first item of the collection is then returned with a subsequent
		 call to <code>next()</code>.</p>
		 ]]></description>
</method>
<method name='current' fullname='org.as3commons.collections.framework.core:AbstractSortedCollectionIterator/current/get' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 
		 The item that most recently has been returned by <code>next()</code>
		 or <code>previous()</code>.
		 
		 <p>Returns <code>undefined</code> if the iterator points to the postion before the first
		 or after the last item or the collection is empty.</p>
		 
		 <p>The current item is nullified after all operations that modify the underlying
		 collection order (<code>add(), remove()</code>) or modify the cursor position
		 (<code>start(), end()</code>).</p>
		 
		 <p>Returns initially <code>undefined</code>.</p>
		 
		 ]]></description>
<return><![CDATA[The last returned item or <code>undefined</code> if no such item.
		 ]]></return>
</method>
<field name='_collection' fullname='org.as3commons.collections.framework.core:AbstractSortedCollectionIterator/protected:_collection' type='org.as3commons.collections.framework.core:AbstractSortedCollection' isStatic='false' isConst='false' >
<description><![CDATA[
		 The list to enumerate.
		 ]]></description>
</field>
<field name='_current' fullname='org.as3commons.collections.framework.core:AbstractSortedCollectionIterator/protected:_current' type='org.as3commons.collections.framework.core:SortedNode' isStatic='false' isConst='false' >
<description><![CDATA[
		 The node of the last returned item.
		 
		 <p>Initially this property is <code>null</code> (no item returned yet).</p>
		 
		 <p><code>start(), end(), addBefore(), addAfter()</code> and <code>remove()</code>
		 set this property to <code>null</code>.</p>
		 ]]></description>
</field>
<field name='_next' fullname='org.as3commons.collections.framework.core:AbstractSortedCollectionIterator/protected:_next' type='org.as3commons.collections.framework.core:SortedNode' isStatic='false' isConst='false' >
<description><![CDATA[
		 The cursor position.
		 
		 <p>The cursor is positioned before the item stored in the <code>_next</code>
		 property. If the collection is empty or the cursor is placed at
		 end, <code>_next</code> has the value <code>null</code>.</p>
		 ]]></description>
</field>
<packageRec name='org.as3commons.collections.framework.core.null' fullname='org.as3commons.collections.framework.core.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<classRec name='TreapIterator' fullname='org.as3commons.collections.framework.core:TreapIterator' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\framework\core\TreapIterator.as' namespace='org.as3commons.collections.framework.core' access='public' baseclass='Object' interfaces='org.as3commons.collections.framework:IBinarySearchTreeIterator' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Internal <code>Treap</code> iterator implementation.
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 30.03.2010
	 ]]></author>
</classRec>
<method name='TreapIterator' fullname='org.as3commons.collections.framework.core:TreapIterator/TreapIterator' isStatic='false' isFinal='false' isOverride='false'  param_names='treap;next' param_types='org.as3commons.collections:Treap;org.as3commons.collections.framework.core:TreapNode' param_defaults='undefined;undefined' result_type='*'>
<description><![CDATA[
		 TreapIterator constructor.
		 
		 <p>If <code>next</code> is specified, the iterator returns the item of that
		 node with the first call to <code>next()</code> and its predecessor
		 with the first call to <code>previous()</code>.</p>
		 
		 ]]></description>
<param><![CDATA[collection The sorted collection.
		 ]]></param>
<param><![CDATA[next The node to start the iteration with.
		 ]]></param>
</method>
<method name='end' fullname='org.as3commons.collections.framework.core:TreapIterator/end' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 
		 Resets the iterator to the position after the last item.
		 
		 <p>The last item of the collection is then returned with a subsequent
		 call to <code>previous()</code>.</p>
		 ]]></description>
</method>
<method name='hasNext' fullname='org.as3commons.collections.framework.core:TreapIterator/hasNext' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		 
		 Returns <code>true</code> if there are succeeding items to be enumerated.
		 
		 <p>Returns <code>false</code>, if the internal cursor is placed after the
		 last item or the collection is empty.</p>
		 
		 ]]></description>
<return><![CDATA[<code>true</code> if there are items left to be enumerated.
		 ]]></return>
</method>
<method name='hasPrevious' fullname='org.as3commons.collections.framework.core:TreapIterator/hasPrevious' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		 
		 Returns <code>true</code> if there are preceeding items to be enumerated.
		 
		 <p>Returns <code>false</code>, if the internal cursor is placed before the
		 first item or the collection is empty.</p>
		 
		 ]]></description>
<return><![CDATA[<code>true</code> if there are items left to be enumerated.
		 ]]></return>
</method>
<method name='next' fullname='org.as3commons.collections.framework.core:TreapIterator/next' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 
		 Returns the next item and places the internal cursor after that item.
		 
		 <p>Returnes <code>undefined</code> if no next item exists or the collection is empty.</p>
		 
		 ]]></description>
<return><![CDATA[The next item of iteration or <code>undefined</code> if no such item exists.
		 ]]></return>
</method>
<method name='previous' fullname='org.as3commons.collections.framework.core:TreapIterator/previous' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 
		 Returns the previous item and places the internal cursor before that item. 
		 
		 <p>Returnes <code>undefined</code> if no previous item exists or the collection is empty.</p>
		 
		 ]]></description>
<return><![CDATA[The previous item of iteration or <code>undefined</code> if no such item exists.
		 ]]></return>
</method>
<method name='remove' fullname='org.as3commons.collections.framework.core:TreapIterator/remove' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		 
		 Removes the current item from the collection if any.
		 
		 ]]></description>
<return><![CDATA[<code>true</code> if an item has been removed.
		 ]]></return>
</method>
<method name='start' fullname='org.as3commons.collections.framework.core:TreapIterator/start' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 
		 Resets the iterator to the position before the first item.
		 
		 <p>The first item of the collection is then returned with a subsequent
		 call to <code>next()</code>.</p>
		 ]]></description>
</method>
<method name='current' fullname='org.as3commons.collections.framework.core:TreapIterator/current/get' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 
		 The item that most recently has been returned by <code>next()</code>
		 or <code>previous()</code>.
		 
		 <p>Returns <code>undefined</code> if the iterator points to the postion before the first
		 or after the last item or the collection is empty.</p>
		 
		 <p>The current item is nullified after all operations that modify the underlying
		 collection order (<code>add(), remove()</code>) or modify the cursor position
		 (<code>start(), end()</code>).</p>
		 
		 <p>Returns initially <code>undefined</code>.</p>
		 
		 ]]></description>
<return><![CDATA[The last returned item or <code>undefined</code> if no such item.
		 ]]></return>
</method>
<method name='nextItem' fullname='org.as3commons.collections.framework.core:TreapIterator/nextItem/get' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 
		 The item right to the current cursor position.
		 
		 <p><code>undefined</code> if the iterator is positioned at end or
		 the tree is emtpy.</p>
		 ]]></description>
</method>
<method name='previousItem' fullname='org.as3commons.collections.framework.core:TreapIterator/previousItem/get' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 
		 The item left to the current cursor position.
		 
		 <p><code>undefined</code> if the iterator is positioned at start or
		 the tree is emtpy.</p>
		 ]]></description>
</method>
<field name='_current' fullname='org.as3commons.collections.framework.core:TreapIterator/protected:_current' type='org.as3commons.collections.framework.core:TreapNode' isStatic='false' isConst='false' >
<description><![CDATA[
		 The node of the last returned item.
		 
		 <p>Initially this property is <code>null</code> (no item returned yet).</p>
		 
		 <p><code>start(), end(), addBefore(), addAfter()</code> and <code>remove()</code>
		 set this property to <code>null</code>.</p>
		 ]]></description>
</field>
<field name='_next' fullname='org.as3commons.collections.framework.core:TreapIterator/protected:_next' type='org.as3commons.collections.framework.core:TreapNode' isStatic='false' isConst='false' >
<description><![CDATA[
		 The cursor position.
		 
		 <p>The cursor is positioned before the item stored in the <code>_next</code>
		 property. If the collection is empty or the cursor is placed at
		 end, <code>_next</code> has the value <code>null</code>.</p>
		 ]]></description>
</field>
<field name='_treap' fullname='org.as3commons.collections.framework.core:TreapIterator/protected:_treap' type='org.as3commons.collections:Treap' isStatic='false' isConst='false' >
<description><![CDATA[
		 The list to enumerate.
		 ]]></description>
</field>
<packageRec name='org.as3commons.collections.framework.core.null' fullname='org.as3commons.collections.framework.core.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<classRec name='LinkedSetIterator' fullname='org.as3commons.collections.framework.core:LinkedSetIterator' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\framework\core\LinkedSetIterator.as' namespace='org.as3commons.collections.framework.core' access='public' baseclass='org.as3commons.collections.framework.core:AbstractLinkedCollectionIterator' interfaces='org.as3commons.collections.framework:IOrderedSetIterator' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Internal <code>LinkedSet</code> iterator implementation.
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 26.03.2010
	 ]]></author>
</classRec>
<method name='LinkedSetIterator' fullname='org.as3commons.collections.framework.core:LinkedSetIterator/LinkedSetIterator' isStatic='false' isFinal='false' isOverride='false'  param_names='orderedSet;next' param_types='org.as3commons.collections:LinkedSet;org.as3commons.collections.framework.core:LinkedNode' param_defaults='undefined;null' result_type='*'>
<description><![CDATA[
		 LinkedSetIterator constructor.
		 
		 <p>If <code>next</code> is specified, the iterator returns the item of that
		 node with the first call to <code>next()</code> and its predecessor
		 with the first call to <code>previous()</code>.</p>
		 
		 ]]></description>
<param><![CDATA[orderedSet The set to be enumerated.
		 ]]></param>
<param><![CDATA[next The node to start the iteration with.
		 ]]></param>
</method>
<method name='addAfter' fullname='org.as3commons.collections.framework.core:LinkedSetIterator/addAfter' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 
		 Adds an item after the current cursor position.
		 
		 <p>If the item is already contained, the method aborts with <code>false</code>.</p>
		 
		 <p>The item added will be returned with a subsequent call to <code>next()</code>.</p>
		 
		 ]]></description>
<param><![CDATA[item The item to add.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item has been added.
		 ]]></return>
</method>
<method name='addBefore' fullname='org.as3commons.collections.framework.core:LinkedSetIterator/addBefore' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 
		 Adds an item before the current cursor position.
		 
		 <p>If the item is already contained, the method aborts with <code>false</code>.</p>
		 
		 <p>The item added will be returned with a subsequent call to <code>previous()</code>.</p>
		 
		 ]]></description>
<param><![CDATA[item The item to add.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item has been added.
		 ]]></return>
</method>
<method name='removeCurrent' fullname='org.as3commons.collections.framework.core:LinkedSetIterator/protected:removeCurrent' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[
		 
		 Template method to enable subclasses of this iterator to
		 remove the item of the current node from its particular associated
		 collection.
		 ]]></description>
</method>
<method name='replace' fullname='org.as3commons.collections.framework.core:LinkedSetIterator/replace' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 
		 Replaces the current item if any.
		 
		 <p>If the iterator has no current item or the replacing item
		 strictly equals the existing one, this method aborts with <code>false</code>.</p>
		 
		 ]]></description>
<param><![CDATA[item The replacing item.
		 ]]></param>
<return><![CDATA[<code>true</code> if the current item has been replaced.
		 ]]></return>
</method>
<method name='nextItem' fullname='org.as3commons.collections.framework.core:LinkedSetIterator/nextItem/get' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 
		 The item right to the current cursor position.
		 
		 <p>This item is returned with the next call to <code>next()</code>.</p>
		 
		 <p><code>undefined</code> if the iterator is positioned at end or
		 the set is emtpy.</p>
		 ]]></description>
</method>
<method name='previousItem' fullname='org.as3commons.collections.framework.core:LinkedSetIterator/previousItem/get' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 
		 The item left to the current cursor position.
		 
		 <p>This item is returned with the next call to <code>previous()</code>.</p>
		 
		 <p><code>undefined</code> if the iterator is positioned at start or
		 the set is emtpy.</p>
		 ]]></description>
</method>
<packageRec name='org.as3commons.collections.framework.core.null' fullname='org.as3commons.collections.framework.core.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<classRec name='AbstractSortedDuplicatesCollection' fullname='org.as3commons.collections.framework.core:AbstractSortedDuplicatesCollection' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\framework\core\AbstractSortedDuplicatesCollection.as' namespace='org.as3commons.collections.framework.core' access='public' baseclass='org.as3commons.collections.framework.core:AbstractSortedCollection' interfaces='org.as3commons.collections.framework:IDuplicates' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Abstract sorted tree based collection implementation with permission of duplicates.
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 12.04.2010
	 ]]></author>
</classRec>
<method name='AbstractSortedDuplicatesCollection' fullname='org.as3commons.collections.framework.core:AbstractSortedDuplicatesCollection/AbstractSortedDuplicatesCollection' isStatic='false' isFinal='false' isOverride='false'  param_names='comparator' param_types='org.as3commons.collections.framework:IComparator' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 AbstractSortedCollection constructor.
		 
		 ]]></description>
<param><![CDATA[comparator The sort criterion.
		 ]]></param>
</method>
<method name='count' fullname='org.as3commons.collections.framework.core:AbstractSortedDuplicatesCollection/count' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='uint'>
<description><![CDATA[
		 
		 Returns the number of occurrences of an item.
		 
		 ]]></description>
<return><![CDATA[Number of occurrences of the given item.
		 ]]></return>
</method>
<method name='removeAll' fullname='org.as3commons.collections.framework.core:AbstractSortedDuplicatesCollection/removeAll' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='uint'>
<description><![CDATA[
		 
		 Removes all occurrences of a particular item from the collection.
		 
		 <p>The items are removed in the order they are stored.</p>
		 
		 ]]></description>
<param><![CDATA[item The item to remove completely from the collection.
		 ]]></param>
<return><![CDATA[Number of items removed.
		 ]]></return>
</method>
<packageRec name='org.as3commons.collections.framework.core.null' fullname='org.as3commons.collections.framework.core.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<classRec name='AbstractLinkedDuplicatesCollection' fullname='org.as3commons.collections.framework.core:AbstractLinkedDuplicatesCollection' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\framework\core\AbstractLinkedDuplicatesCollection.as' namespace='org.as3commons.collections.framework.core' access='public' baseclass='org.as3commons.collections.framework.core:AbstractLinkedCollection' interfaces='org.as3commons.collections.framework:IDuplicates' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Abstract linked list based collection implementation with permission of duplicates.
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 12.04.2010
	 ]]></author>
</classRec>
<method name='count' fullname='org.as3commons.collections.framework.core:AbstractLinkedDuplicatesCollection/count' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='uint'>
<description><![CDATA[
		 
		 Returns the number of occurrences of an item.
		 
		 ]]></description>
<return><![CDATA[Number of occurrences of the given item.
		 ]]></return>
</method>
<method name='removeAll' fullname='org.as3commons.collections.framework.core:AbstractLinkedDuplicatesCollection/removeAll' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='uint'>
<description><![CDATA[
		 
		 Removes all occurrences of a particular item from the collection.
		 
		 <p>The items are removed in the order they are stored.</p>
		 
		 ]]></description>
<param><![CDATA[item The item to remove completely from the collection.
		 ]]></param>
<return><![CDATA[Number of items removed.
		 ]]></return>
</method>
<packageRec name='org.as3commons.collections.framework.core.null' fullname='org.as3commons.collections.framework.core.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<classRec name='ArrayListIterator' fullname='org.as3commons.collections.framework.core:ArrayListIterator' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\framework\core\ArrayListIterator.as' namespace='org.as3commons.collections.framework.core' access='public' baseclass='org.as3commons.collections.framework.core:AbstractListIterator' interfaces='org.as3commons.collections.framework:IOrderedListIterator' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Internal <code>ArrayList</code> iterator implementation.
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 19.02.2010
	 ]]></author>
</classRec>
<method name='ArrayListIterator' fullname='org.as3commons.collections.framework.core:ArrayListIterator/ArrayListIterator' isStatic='false' isFinal='false' isOverride='false'  param_names='list;index' param_types='org.as3commons.collections:ArrayList;uint' param_defaults='undefined;0' result_type='*'>
<description><![CDATA[
		 ArrayListIterator constructor.
		 	
		 <p>If <code>index</code> is specified, the iterator returns the item at that
		 index with the first call to <code>next()</code> and the item at <code>index -1</code>
		 with the first call to <code>previous()</code>.</p>
		 
		 ]]></description>
<param><![CDATA[array The list.
		 ]]></param>
<param><![CDATA[index Start position of enumeration.
		 ]]></param>
</method>
<method name='addAfter' fullname='org.as3commons.collections.framework.core:ArrayListIterator/addAfter' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='uint'>
<description><![CDATA[
		 
		 Adds an item after the current cursor position.
		 
		 <p>The item added will be returned with a subsequent call to <code>next()</code>.</p>
		 
		 ]]></description>
<param><![CDATA[item The item to add.
		 ]]></param>
<return><![CDATA[The position where the item has been added.
		 ]]></return>
</method>
<method name='addBefore' fullname='org.as3commons.collections.framework.core:ArrayListIterator/addBefore' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='uint'>
<description><![CDATA[
		 
		 Adds an item before the current cursor position.
		 
		 <p>The item added will be returned with a subsequent call to <code>previous()</code>.</p>
		 
		 ]]></description>
<param><![CDATA[item The item to add.
		 ]]></param>
<return><![CDATA[The position where the item has been added.
		 ]]></return>
</method>
<method name='replace' fullname='org.as3commons.collections.framework.core:ArrayListIterator/replace' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 
		 Replaces the current item if any.
		 
		 <p>If the iterator has no current item or the replacing item
		 strictly equals the existing one, this method aborts with <code>false</code>.</p>
		 
		 ]]></description>
<param><![CDATA[item The replacing item.
		 ]]></param>
<return><![CDATA[<code>true</code> if the current item has been replaced.
		 ]]></return>
</method>
<method name='_arrayList' fullname='org.as3commons.collections.framework.core:ArrayListIterator/private:_arrayList/get' isStatic='false' isFinal='false' isOverride='false'  result_type='org.as3commons.collections.framework:IOrderedList'>
<description><![CDATA[
		 Casts the <code>IList</code> of the <code>AbstractListIterator</code> into an <code>IOrderedList</code>.
		 ]]></description>
</method>
<packageRec name='org.as3commons.collections.framework.core.null' fullname='org.as3commons.collections.framework.core.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<classRec name='SortedSetIterator' fullname='org.as3commons.collections.framework.core:SortedSetIterator' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\framework\core\SortedSetIterator.as' namespace='org.as3commons.collections.framework.core' access='public' baseclass='org.as3commons.collections.framework.core:AbstractSortedCollectionIterator' interfaces='org.as3commons.collections.framework:ISetIterator' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Internal <code>SortedSet</code> iterator implementation.
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 01.04.2010
	 ]]></author>
</classRec>
<method name='SortedSetIterator' fullname='org.as3commons.collections.framework.core:SortedSetIterator/SortedSetIterator' isStatic='false' isFinal='false' isOverride='false'  param_names='sortedSet;next' param_types='org.as3commons.collections:SortedSet;org.as3commons.collections.framework.core:SortedNode' param_defaults='undefined;null' result_type='*'>
<description><![CDATA[
		 SortedMapIterator constructor.
		 
		 <p>If <code>next</code> is specified, the iterator returns the item of that
		 node with the first call to <code>next()</code> and its predecessor
		 with the first call to <code>previous()</code>.</p>
		 
		 ]]></description>
<param><![CDATA[sortedSet The set to be enumerated.
		 ]]></param>
<param><![CDATA[next The node to start the iteration with.
		 ]]></param>
</method>
<method name='nextItem' fullname='org.as3commons.collections.framework.core:SortedSetIterator/nextItem/get' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 
		 The item right to the current cursor position.
		 
		 <p>This item is returned with the next call to <code>next()</code>.</p>
		 
		 <p><code>undefined</code> if the iterator is positioned at end or
		 the set is emtpy.</p>
		 ]]></description>
</method>
<method name='previousItem' fullname='org.as3commons.collections.framework.core:SortedSetIterator/previousItem/get' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 
		 The item left to the current cursor position.
		 
		 <p>This item is returned with the next call to <code>previous()</code>.</p>
		 
		 <p><code>undefined</code> if the iterator is positioned at start or
		 the set is emtpy.</p>
		 ]]></description>
</method>
<packageRec name='org.as3commons.collections.framework.core.null' fullname='org.as3commons.collections.framework.core.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<classRec name='SortedListIterator' fullname='org.as3commons.collections.framework.core:SortedListIterator' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\framework\core\SortedListIterator.as' namespace='org.as3commons.collections.framework.core' access='public' baseclass='org.as3commons.collections.framework.core:AbstractListIterator' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Internal <code>SortedList</code> iterator implementation.
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 01.04.2010
	 ]]></author>
</classRec>
<method name='SortedListIterator' fullname='org.as3commons.collections.framework.core:SortedListIterator/SortedListIterator' isStatic='false' isFinal='false' isOverride='false'  param_names='sortedList;index' param_types='org.as3commons.collections:SortedList;uint' param_defaults='undefined;0' result_type='*'>
<description><![CDATA[
		 SortedListIterator constructor.
		 
		 <p>If <code>index</code> is specified, the iterator returns the item at that
		 index with the first call to <code>next()</code> and the item at <code>index -1</code>
		 with the first call to <code>previous()</code>.</p>
		 
		 ]]></description>
<param><![CDATA[array The list.
		 ]]></param>
<param><![CDATA[index Start position of enumeration.
		 ]]></param>
</method>
<packageRec name='org.as3commons.collections.framework.core.null' fullname='org.as3commons.collections.framework.core.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<classRec name='SortedMapIterator' fullname='org.as3commons.collections.framework.core:SortedMapIterator' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\framework\core\SortedMapIterator.as' namespace='org.as3commons.collections.framework.core' access='public' baseclass='org.as3commons.collections.framework.core:AbstractSortedCollectionIterator' interfaces='org.as3commons.collections.framework:IMapIterator' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Internal <code>SortedMap</code> iterator implementation.
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 01.04.2010
	 ]]></author>
</classRec>
<method name='SortedMapIterator' fullname='org.as3commons.collections.framework.core:SortedMapIterator/SortedMapIterator' isStatic='false' isFinal='false' isOverride='false'  param_names='sortedMap;next' param_types='org.as3commons.collections:SortedMap;org.as3commons.collections.framework.core:SortedMapNode' param_defaults='undefined;undefined' result_type='*'>
<description><![CDATA[
		 SortedMapIterator constructor.
		 
		 <p>If <code>next</code> is specified, the iterator returns the item of that
		 node with the first call to <code>next()</code> and its predecessor
		 with the first call to <code>previous()</code>.</p>
		 
		 ]]></description>
<param><![CDATA[sortedMap The map to be enumerated.
		 ]]></param>
<param><![CDATA[next The node to start the iteration with.
		 ]]></param>
</method>
<method name='key' fullname='org.as3commons.collections.framework.core:SortedMapIterator/key/get' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 
		 The key of the last returned item.
		 
		 <p><code>undefined</code> if the iterator points to the postion before the first
		 or after the last item or the map is empty.</p>
		 
		 <p>The key is reset to <code>undefined</code> after all operations that modify the underlying
		 map order (<code>add(), remove()</code>) or modify the cursor position
		 (<code>start(), end()</code>).</p>
		 
		 <p>Initially <code>undefined</code>.</p>
		 ]]></description>
</method>
<method name='nextKey' fullname='org.as3commons.collections.framework.core:SortedMapIterator/nextKey/get' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 
		 The key of the item right to the current cursor position.
		 
		 <p>The item stored under this key is returned with the next call
		 to <code>next()</code>.</p>
		 
		 <p><code>undefined</code> if the iterator is positioned at end or
		 the map is emtpy.</p>
		 ]]></description>
</method>
<method name='previousKey' fullname='org.as3commons.collections.framework.core:SortedMapIterator/previousKey/get' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 
		 The key of the item left to the current cursor position.
		 
		 <p>The item stored under this key is returned with the next call
		 to <code>previous()</code>.</p>
		 
		 <p><code>undefined</code> if the iterator is positioned at start or
		 the map is emtpy.</p>
		 ]]></description>
</method>
<packageRec name='org.as3commons.collections.framework.core.null' fullname='org.as3commons.collections.framework.core.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<classRec name='LinkedMapIterator' fullname='org.as3commons.collections.framework.core:LinkedMapIterator' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\framework\core\LinkedMapIterator.as' namespace='org.as3commons.collections.framework.core' access='public' baseclass='org.as3commons.collections.framework.core:AbstractLinkedCollectionIterator' interfaces='org.as3commons.collections.framework:IOrderedMapIterator' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Internal <code>LinkedMap</code> iterator implementation.
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 26.03.2010
	 ]]></author>
</classRec>
<method name='LinkedMapIterator' fullname='org.as3commons.collections.framework.core:LinkedMapIterator/LinkedMapIterator' isStatic='false' isFinal='false' isOverride='false'  param_names='orderedMap;next' param_types='org.as3commons.collections:LinkedMap;org.as3commons.collections.framework.core:LinkedMapNode' param_defaults='undefined;null' result_type='*'>
<description><![CDATA[
		 LinkedMapIterator constructor.
		 
		 <p>If <code>next</code> is specified, the iterator returns the item of that
		 node with the first call to <code>next()</code> and its predecessor
		 with the first call to <code>previous()</code>.</p>
		 
		 ]]></description>
<param><![CDATA[orderedMap The map to be enumerated.
		 ]]></param>
<param><![CDATA[next The node to start the iteration with.
		 ]]></param>
</method>
<method name='addAfter' fullname='org.as3commons.collections.framework.core:LinkedMapIterator/addAfter' isStatic='false' isFinal='false' isOverride='false'  param_names='key;item' param_types='*;*' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[
		 
		 Adds an item after the current cursor position.
		 
		 <p>If the key is already contained, the method aborts with <code>false</code>.</p>
		 
		 <p>The item added will be returned with a subsequent call to <code>next()</code>.</p>
		 
		 ]]></description>
<param><![CDATA[key The key of the item to add.
		 ]]></param>
<param><![CDATA[item The item to add.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item has been added.
		 ]]></return>
</method>
<method name='addBefore' fullname='org.as3commons.collections.framework.core:LinkedMapIterator/addBefore' isStatic='false' isFinal='false' isOverride='false'  param_names='key;item' param_types='*;*' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[
		 
		 Adds an item before the current cursor position.
		 
		 <p>If the key is already contained, the method aborts with <code>false</code>.</p>
		 
		 <p>The item added will be returned with a subsequent call to <code>previous()</code>.</p>
		 
		 ]]></description>
<param><![CDATA[key The key of the item to add.
		 ]]></param>
<param><![CDATA[item The item to add.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item has been added.
		 ]]></return>
</method>
<method name='removeCurrent' fullname='org.as3commons.collections.framework.core:LinkedMapIterator/protected:removeCurrent' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[
		 
		 Template method to enable subclasses of this iterator to
		 remove the item of the current node from its particular associated
		 collection.
		 ]]></description>
</method>
<method name='replace' fullname='org.as3commons.collections.framework.core:LinkedMapIterator/replace' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 
		 Replaces the current item if any.
		 
		 <p>The key of the old item points now to the given item.</p>
		 
		 <p>If the iterator has no current item or the replacing item
		 strictly equals the existing one, this method aborts with <code>false</code>.</p>
		 
		 ]]></description>
<param><![CDATA[item The replacing item.
		 ]]></param>
<return><![CDATA[<code>true</code> if the current item has been replaced.
		 ]]></return>
</method>
<method name='key' fullname='org.as3commons.collections.framework.core:LinkedMapIterator/key/get' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 
		 The key of the last returned item.
		 
		 <p><code>undefined</code> if the iterator points to the postion before the first
		 or after the last item or the map is empty.</p>
		 
		 <p>The key is reset to <code>undefined</code> after all operations that modify the underlying
		 map order (<code>add(), remove()</code>) or modify the cursor position
		 (<code>start(), end()</code>).</p>
		 
		 <p>Initially <code>undefined</code>.</p>
		 ]]></description>
</method>
<method name='nextKey' fullname='org.as3commons.collections.framework.core:LinkedMapIterator/nextKey/get' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 
		 The key of the item right to the current cursor position.
		 
		 <p>The item stored under this key is returned with the next call
		 to <code>next()</code>.</p>
		 
		 <p><code>undefined</code> if the iterator is positioned at end or
		 the map is emtpy.</p>
		 ]]></description>
</method>
<method name='previousKey' fullname='org.as3commons.collections.framework.core:LinkedMapIterator/previousKey/get' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 
		 The key of the item left to the current cursor position.
		 
		 <p>The item stored under this key is returned with the next call
		 to <code>previous()</code>.</p>
		 
		 <p><code>undefined</code> if the iterator is positioned at start or
		 the map is emtpy.</p>
		 ]]></description>
</method>
<packageRec name='org.as3commons.collections.framework.core.null' fullname='org.as3commons.collections.framework.core.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<classRec name='LinkedListIterator' fullname='org.as3commons.collections.framework.core:LinkedListIterator' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\framework\core\LinkedListIterator.as' namespace='org.as3commons.collections.framework.core' access='public' baseclass='org.as3commons.collections.framework.core:AbstractLinkedCollectionIterator' interfaces='org.as3commons.collections.framework:ILinkedListIterator' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Internal <code>LinkedList</code> iterator implementation.
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 04.03.2010
	 ]]></author>
</classRec>
<method name='LinkedListIterator' fullname='org.as3commons.collections.framework.core:LinkedListIterator/LinkedListIterator' isStatic='false' isFinal='false' isOverride='false'  param_names='list' param_types='org.as3commons.collections:LinkedList' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 LinkedListIterator constructor.
		 
		 ]]></description>
<param><![CDATA[array The linked list.
		 ]]></param>
</method>
<method name='addAfter' fullname='org.as3commons.collections.framework.core:LinkedListIterator/addAfter' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 
		 Adds an item after the current cursor position.
		 
		 <p>The item added will be returned with a subsequent call to <code>next()</code>.</p>
		 
		 ]]></description>
<param><![CDATA[item The item to add.
		 ]]></param>
</method>
<method name='addBefore' fullname='org.as3commons.collections.framework.core:LinkedListIterator/addBefore' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 
		 Adds an item before the current cursor position.
		 
		 <p>The item added will be returned with a subsequent call to <code>previous()</code>.</p>
		 
		 ]]></description>
<param><![CDATA[item The item to add.
		 ]]></param>
</method>
<method name='removeCurrent' fullname='org.as3commons.collections.framework.core:LinkedListIterator/protected:removeCurrent' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[
		 
		 Template method to enable subclasses of this iterator to
		 remove the item of the current node from its particular associated
		 collection.
		 ]]></description>
</method>
<method name='replace' fullname='org.as3commons.collections.framework.core:LinkedListIterator/replace' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 
		 Replaces the current item if any.
		 
		 <p>If the iterator has no current item or the replacing item
		 strictly equals the existing one, this method aborts with <code>false</code>.</p>
		 
		 ]]></description>
<param><![CDATA[item The replacing item.
		 ]]></param>
<return><![CDATA[<code>true</code> if the current item has been replaced.
		 ]]></return>
</method>
<method name='nextItem' fullname='org.as3commons.collections.framework.core:LinkedListIterator/nextItem/get' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 
		 The item right to the current cursor position.
		 
		 <p>This item is returned with the next call to <code>next()</code>.</p>
		 
		 <p><code>undefined</code> if the iterator is positioned at end or
		 the list is emtpy.</p>
		 ]]></description>
</method>
<method name='previousItem' fullname='org.as3commons.collections.framework.core:LinkedListIterator/previousItem/get' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 
		 The item left to the current cursor position.
		 
		 <p>This item is returned with the next call to <code>previous()</code>.</p>
		 
		 <p><code>undefined</code> if the iterator is positioned at start or
		 the list is emtpy.</p>
		 ]]></description>
</method>
<packageRec name='org.as3commons.collections.utils.null' fullname='org.as3commons.collections.utils.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<classRec name='Args' fullname='org.as3commons.collections.utils:Args' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\utils\Args.as' namespace='org.as3commons.collections.utils' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Wrapper class for complex objects in variable argument lists.
	 
	 <p>If an object is wrapped into an Args object, not the object but its
	 items are being considered from the accepting method.</p>
	 
	 <listing>
	 
			var array : Array = [2, 3, 4];
			var list : ArrayList = Lists.newArrayList(1, array, 5);
			trace (list.size); // 3

			var array : Array = [2, 3, 4];
			var list : ArrayList = Lists.newArrayList(1, Args.from(array), 5);
			trace (list.size); // 5
	 </listing>
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 26.04.2011
	 ]]></author>
</classRec>
<method name='from' fullname='org.as3commons.collections.utils:Args/from' isStatic='true' isFinal='false' isOverride='false'  param_names='source' param_types='Object' param_defaults='undefined' result_type='org.as3commons.collections.utils:Args'>
<description><![CDATA[
		 Creates a wrapper.
		 
		 ]]></description>
<param><![CDATA[source The data container to be wrapped.
		 ]]></param>
<return><![CDATA[Wrapper of the given data source.
		 ]]></return>
</method>
<field name='source' fullname='org.as3commons.collections.utils:Args/source' type='Object' isStatic='false' isConst='false' >
<description><![CDATA[
		 The wrapped complex data source.
		 ]]></description>
</field>
<packageRec name='org.as3commons.collections.utils.null' fullname='org.as3commons.collections.utils.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<classRec name='NullComparator' fullname='org.as3commons.collections.utils:NullComparator' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\utils\NullComparator.as' namespace='org.as3commons.collections.utils' access='public' baseclass='Object' interfaces='org.as3commons.collections.framework:IComparator' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Null comparator.
	 
	 <p>This comparator is being used as the default comparator for sorted collections
	 if no comparator has been specified else.</p>
	 
	 <p>Using this comparator results in an insertion order.</p>
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 14.05.2011
	 ]]></author>
<see><![CDATA[org.as3commons.collections.framework.IComparator IComparator interface - Description of the comparator features.
	 ]]></see>
</classRec>
<method name='compare' fullname='org.as3commons.collections.utils:NullComparator/compare' isStatic='false' isFinal='false' isOverride='false'  param_names='item1;item2' param_types='*;*' param_defaults='undefined;undefined' result_type='int'>
<description><![CDATA[
		 Compares two items and returns 0.
		 
		 ]]></description>
<param><![CDATA[item1 The first item.
		 ]]></param>
<param><![CDATA[item1 The second item.
		 ]]></param>
<return><![CDATA[<code>0</code>.
		 ]]></return>
</method>
<packageRec name='org.as3commons.collections.utils.null' fullname='org.as3commons.collections.utils.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<classRec name='CollectionUtils' fullname='org.as3commons.collections.utils:CollectionUtils' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\utils\CollectionUtils.as' namespace='org.as3commons.collections.utils' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Collections utils.
	    
	 ]]></description>
<author><![CDATA[Jens Struwe 09.03.2009
	 ]]></author>
</classRec>
<method name='dumpAsString' fullname='org.as3commons.collections.utils:CollectionUtils/dumpAsString' isStatic='true' isFinal='false' isOverride='false'  param_names='data' param_types='org.as3commons.collections.framework:IIterable' param_defaults='undefined' result_type='String'>
<description><![CDATA[
		 Dumps an iterable structure recursively into a formatted string literal.
		 
		 <p id="link_DumpAsStringExample"><strong><code>dumpAsString()</code> example</strong></p>
		 
		 <a class="exampleCollapsed" href="#link_DumpAsStringExample" onClick="toggleExample(this, 'DumpAsStringExample');">Show example</a><br /><div id="DumpAsStringExample" style='display:none'><listing version="3.0">package {
    import org.as3commons.collections.utils.CollectionUtils;
    import flash.display.Sprite;

    public class DumpAsStringExample extends Sprite {

        public function DumpAsStringExample() {
            var root : Node = new Node(0);
            var child1 : Node = new Node(1);
            child1.children = [new Node(2), new Node(3)];
            var child2 : Node = new Node(4);
            child2.children = [new Node(5), new Node(6)];
            var child3 : Node = new Node(7);
            var child4 : Node = new Node(8);
            child4.children = [new Node(9), new Node(10)];
            child3.children = [child4, new Node(11)];
            root.children = [child1, child2, child3];
            
            trace (CollectionUtils.dumpAsString(root));

            // Node 0
            // .......Node 1
            // ..............Node 2
            // ..............Node 3
            // .......Node 4
            // ..............Node 5
            // ..............Node 6
            // .......Node 7
            // ..............Node 8
            // .....................Node 9
            // .....................Node 10
            // ..............Node 11
        }
    }
}

import org.as3commons.collections.framework.IIterable;
import org.as3commons.collections.framework.IIterator;
import org.as3commons.collections.iterators.ArrayIterator;

internal class Node implements IIterable {
    public var number : uint;
    public var children : Array;
    public function Node(theNumber : uint) {
        number = theNumber;
        children = new Array();
    }
    public function iterator(cursor : = undefined) : IIterator {
        return new ArrayIterator(children);
    }
    public function toString() : String {
        return "Node " + number.toString();
    }
}
</listing></div><br />
		 
		 ]]></description>
<param><![CDATA[data The iterable data structure.
		 ]]></param>
<return><![CDATA[The dump.
		 ]]></return>
</method>
<packageRec name='org.as3commons.collections.utils.null' fullname='org.as3commons.collections.utils.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<classRec name='UncomparableType' fullname='org.as3commons.collections.utils:UncomparableType' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\utils\UncomparableType.as' namespace='org.as3commons.collections.utils' access='public' baseclass='TypeError' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Uncomparable type Exception.
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 17.03.2009
	 ]]></author>
</classRec>
<method name='UncomparableType' fullname='org.as3commons.collections.utils:UncomparableType/UncomparableType' isStatic='false' isFinal='false' isOverride='false'  param_names='expectedType;failedValue' param_types='Class;*' param_defaults='undefined;undefined' result_type='*'>
<description><![CDATA[
		 UncomparableType constructor.
		 
		 ]]></description>
<param><![CDATA[expectedType The expected type of the value.
		 ]]></param>
<param><![CDATA[failedValue The value not matching that type.
		 ]]></param>
</method>
<packageRec name='org.as3commons.collections.utils.null' fullname='org.as3commons.collections.utils.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<classRec name='StringComparator' fullname='org.as3commons.collections.utils:StringComparator' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\utils\StringComparator.as' namespace='org.as3commons.collections.utils' access='public' baseclass='Object' interfaces='org.as3commons.collections.framework:IComparator' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 String comparator.
	 
	 <p>The succession order and the case sensitivity may be specified in constructor parameters.</p>
	    
	 ]]></description>
<author><![CDATA[Jens Struwe 13.03.2009
	 ]]></author>
<see><![CDATA[org.as3commons.collections.framework.IComparator IComparator interface - Description of the comparator features.
	 ]]></see>
</classRec>
<method name='StringComparator' fullname='org.as3commons.collections.utils:StringComparator/StringComparator' isStatic='false' isFinal='false' isOverride='false'  param_names='order;option' param_types='String;String' param_defaults='unknown;unknown' result_type='*'>
<description><![CDATA[
		 StringComparator constructor.
		 
		 ]]></description>
<param><![CDATA[order The order of items. <code>StringComparator.ORDER_ASC</code> (default)
		 or <code>StringComparator.ORDER_DESC</code>.
		 ]]></param>
<param><![CDATA[option The case sensitivity. <code>StringComparator.OPTION_CASESENSITIVE</code> (default)
		 or <code>StringComparator.OPTION_CASEINSENSITIVE</code>.
		 ]]></param>
</method>
<method name='compare' fullname='org.as3commons.collections.utils:StringComparator/compare' isStatic='false' isFinal='false' isOverride='false'  param_names='item1;item2' param_types='*;*' param_defaults='undefined;undefined' result_type='int'>
<description><![CDATA[
		 Compares two strings.
		 
		 ]]></description>
<param><![CDATA[item1 The first string.
		 ]]></param>
<param><![CDATA[item1 The second string.
		 ]]></param>
<return><![CDATA[<code>-1</code> if the first string is lesser, <code>1</code> if greater
		 and <code>0</code> if both strings are equal.
		 ]]></return>
<throws><![CDATA[UncomparableType if either of the items is not a string.
		 ]]></throws>
</method>
<field name='OPTION_CASEINSENSITIVE' fullname='org.as3commons.collections.utils:StringComparator/OPTION_CASEINSENSITIVE' type='String' isStatic='true' isConst='true' defaultValue='caseinsensitive' >
<description><![CDATA[
		 Constant defining case insensitive comparistion.
		 ]]></description>
</field>
<field name='OPTION_CASESENSITIVE' fullname='org.as3commons.collections.utils:StringComparator/OPTION_CASESENSITIVE' type='String' isStatic='true' isConst='true' defaultValue='casesensitive' >
<description><![CDATA[
		 Constant defining case sensitive comparistion (default).
		 ]]></description>
</field>
<field name='ORDER_ASC' fullname='org.as3commons.collections.utils:StringComparator/ORDER_ASC' type='String' isStatic='true' isConst='true' defaultValue='asc' >
<description><![CDATA[
		 Constant defining ascending order (default).
		 ]]></description>
</field>
<field name='ORDER_DESC' fullname='org.as3commons.collections.utils:StringComparator/ORDER_DESC' type='String' isStatic='true' isConst='true' defaultValue='desc' >
<description><![CDATA[
		 Constant defining descending order.
		 ]]></description>
</field>
<field name='_option' fullname='org.as3commons.collections.utils:StringComparator/protected:_option' type='String' isStatic='false' isConst='false' >
<description><![CDATA[
		 Case sensitivity.
		 ]]></description>
</field>
<field name='_order' fullname='org.as3commons.collections.utils:StringComparator/protected:_order' type='String' isStatic='false' isConst='false' >
<description><![CDATA[
		 Sort order.
		 ]]></description>
</field>
<packageRec name='org.as3commons.collections.utils.null' fullname='org.as3commons.collections.utils.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<classRec name='NumericComparator' fullname='org.as3commons.collections.utils:NumericComparator' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\utils\NumericComparator.as' namespace='org.as3commons.collections.utils' access='public' baseclass='Object' interfaces='org.as3commons.collections.framework:IComparator' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Numeric comparator.
	 
	 <p>The succession order may be specified in a constructor parameter.</p>
	    
	 ]]></description>
<author><![CDATA[Jens Struwe 13.03.2009
	 ]]></author>
<see><![CDATA[org.as3commons.collections.framework.IComparator IComparator interface - Description of the comparator features.
	 ]]></see>
</classRec>
<method name='NumericComparator' fullname='org.as3commons.collections.utils:NumericComparator/NumericComparator' isStatic='false' isFinal='false' isOverride='false'  param_names='order' param_types='String' param_defaults='unknown' result_type='*'>
<description><![CDATA[
		 NumericComparator constructor.
		 
		 ]]></description>
<param><![CDATA[order The order of items. <code>NumericComparator.ORDER_ASC</code> (default)
		 or <code>NumericComparator.ORDER_DESC</code>.
		 ]]></param>
</method>
<method name='compare' fullname='org.as3commons.collections.utils:NumericComparator/compare' isStatic='false' isFinal='false' isOverride='false'  param_names='item1;item2' param_types='*;*' param_defaults='undefined;undefined' result_type='int'>
<description><![CDATA[
		 Compares two numbers.
		 
		 ]]></description>
<param><![CDATA[item1 The first number.
		 ]]></param>
<param><![CDATA[item1 The second number.
		 ]]></param>
<return><![CDATA[<code>-1</code> if the first number is lesser, <code>1</code> if greater and
		 <code>0</code> if both are equal.
		 ]]></return>
<throws><![CDATA[UncomparableType if either of the items is not a number.
		 ]]></throws>
</method>
<field name='ORDER_ASC' fullname='org.as3commons.collections.utils:NumericComparator/ORDER_ASC' type='String' isStatic='true' isConst='true' defaultValue='asc' >
<description><![CDATA[
		 Constant defining ascending order (default).
		 ]]></description>
</field>
<field name='ORDER_DESC' fullname='org.as3commons.collections.utils:NumericComparator/ORDER_DESC' type='String' isStatic='true' isConst='true' defaultValue='desc' >
<description><![CDATA[
		 Constant defining descending order.
		 ]]></description>
</field>
<field name='_order' fullname='org.as3commons.collections.utils:NumericComparator/protected:_order' type='String' isStatic='false' isConst='false' >
<description><![CDATA[
		 Sort order.
		 ]]></description>
</field>
<packageRec name='org.as3commons.collections.utils.null' fullname='org.as3commons.collections.utils.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<classRec name='Lists' fullname='org.as3commons.collections.utils:Lists' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\utils\Lists.as' namespace='org.as3commons.collections.utils' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 <code>IList</code> utilities.
	 
	 <p id="link_ListsAddFromExample"><strong><code>Lists.addFrom...()</code> example</strong></p>
	 
	 <a class="exampleCollapsed" href="#link_ListsAddFromExample" onClick="toggleExample(this, 'ListsAddFromExample');">Show example</a><br /><div id="ListsAddFromExample" style='display:none'><listing version="3.0">package {
    import org.as3commons.collections.ArrayList;
    import org.as3commons.collections.LinkedList;
    import org.as3commons.collections.Map;
    import org.as3commons.collections.utils.Lists;
    import flash.display.Sprite;

    public class ListsAddFromExample extends Sprite {

        public function ListsAddFromExample() {
            // list to populate
            var list : ArrayList = new ArrayList();

            // from array (ordered)
            var a : Array = [1, "2", "2"];
            Lists.addFromArray(list, a);

            // from linked list (ordered)
            var l : LinkedList = new LinkedList();
            l.add("2");
            l.add(3);
            l.add("4");
            l.add(3);
            Lists.addFromCollection(list, l);

            // from map (no order)
            var m : Map = new Map();
            m.add("five", 5);
            m.add("six", "6");
            m.add("four", "4");
            Lists.addFromCollection(list, m);

            // from args (ordered)
            Lists.addFromArgs(list,
                7, "8", "8", 5
            );

            // test
            trace (list.toArray().join("n"));
            
            //    1            // from array
            //    2
            //    2
            //    2            // from linked list
            //    3
            //    4
            //    3
            //    4            // from map
            //    6
            //    5
            //    7            // from args
            //    8
            //    8
            //    5
        }

    }
}
</listing></div>
	 
	 <p id="link_ListsCloneExample"><strong><code>Lists.clone()</code> example</strong></p>
	 
	 <a class="exampleCollapsed" href="#link_ListsCloneExample" onClick="toggleExample(this, 'ListsCloneExample');">Show example</a><br /><div id="ListsCloneExample" style='display:none'><listing version="3.0">package {
    import org.as3commons.collections.utils.NumericComparator;
    import flash.utils.getQualifiedClassName;
    import org.as3commons.collections.framework.IList;
    import org.as3commons.collections.utils.Lists;
    import flash.display.Sprite;

    public class ListsCloneExample extends Sprite {

        public function ListsCloneExample() {
            // clone array list
            var list : IList = Lists.newArrayList(2, 4, 1, 3);
            var clone : IList = Lists.clone(list);
            trace (list.toArray().join("n"));
            trace (getQualifiedClassName(clone));
            //    2
            //    4
            //    1
            //    3
            //    org.as3commons.collections::ArrayList

            // clone sorted list
            list = Lists.newSortedList(
                new NumericComparator(),
                2, 4, 1, 3
            );
            clone = Lists.clone(list);
            trace (list.toArray().join("n"));
            trace (getQualifiedClassName(clone));
            //    1
            //    2
            //    3
            //    4
            //    org.as3commons.collections::SortedList
        }
        
    }
}
</listing></div>
	 
	 <p id="link_ListsCopyExample"><strong><code>Lists.copy()</code> example</strong></p>
	 
	 <a class="exampleCollapsed" href="#link_ListsCopyExample" onClick="toggleExample(this, 'ListsCopyExample');">Show example</a><br /><div id="ListsCopyExample" style='display:none'><listing version="3.0">package {
    import org.as3commons.collections.framework.IList;
    import org.as3commons.collections.utils.Lists;
    import org.as3commons.collections.utils.NumericComparator;
    import flash.display.Sprite;

    public class ListsCopyExample extends Sprite {
        public function ListsCopyExample() {
            // source
            var source : IList = Lists.newArrayList(1, 2, 3, 4);
            trace (source.toArray() + "n");
            //    1, 2, 3, 4
            
            // copy all
            var list : IList = Lists.newSortedList(
                new NumericComparator(),
                5, 6, 7, 8
            );
            trace (list.toArray() + "n");
            //    5, 6, 7, 8
            Lists.copy(source, list);
            trace (list.toArray() + "n");
            //    1, 2, 3, 4, 5, 6, 7, 8

            // copy only even items
            list = Lists.newSortedList(
                new NumericComparator(),
                6, 8
            );
            trace (list.toArray() + "n");
            //    6, 8
            Lists.copy(source, list, evenFilter);
            trace (list.toArray() + "n");
            //    2, 4, 6, 8
        }
        
        private function evenFilter(item :  : Boolean {
            return item % 2 == 0;
        }

    }
}
</listing></div>
	 
	 <p id="link_AddFromArgsExample"><strong><code>Lists.new...()</code> example</strong></p>
	 
	 <a class="exampleCollapsed" href="#link_AddFromArgsExample" onClick="toggleExample(this, 'AddFromArgsExample');">Show example</a><br /><div id="AddFromArgsExample" style='display:none'><listing version="3.0">package {
    import org.as3commons.collections.framework.
    import org.as3commons.collections.utils.
    import flash.display.Sprite;

    public class AddFromArgsExample extends Sprite {

        public function AddFromArgsExample() {
            // ArrayList
            var list : IList = Lists.newArrayList(
                1, 2, 3, 4, 5, 6, 7, 8
            );
            trace (list.toArray() + "n");
            // 1, 2, 3, 4, 5, 6, 7, 8
            
            // ArrayList
            list = Lists.newSortedList(
                new NumericComparator(),
                6, 3, 1, 5, 8, 2, 7, 4
            );
            trace (list.toArray() + "n");
            // 1, 2, 3, 4, 5, 6, 7, 8
            
            // Set
            var theSet : ISet = Sets.newSet(
                1, 2, 3, 4, 5, 6, 7, 8
            );
            trace (theSet.toArray() + "n");
            // 1, 2, 3, 4, 5, 6, 7, 8
            
            // LinkedSet
            theSet = Sets.newLinkedSet(
                1, 2, 3, 4, 5, 6, 7, 8
            );
            trace (theSet.toArray() + "n");
            // 1, 2, 3, 4, 5, 6, 7, 8
            
            // SortedSet
            theSet = Sets.newSortedSet(
                new NumericComparator(),
                6, 3, 1, 5, 8, 2, 7, 4
            );
            trace (theSet.toArray() + "n");
            // 1, 2, 3, 4, 5, 6, 7, 8
            
            // Map
            var map : IMap = Maps.newMap(
                "one", 1, "two", 2, "three", 3, "four", 4
            );
            trace (map.toArray() + "n");
            // 1, 4, 2, 3
            
            // LinkedMap
            map = Maps.newLinkedMap(
                "one", 1, "two", 2, "three", 3, "four", 4
            );
            trace (map.toArray() + "n");
            // 1, 2, 3, 4
            
            // SortedMap
            map = Maps.newSortedMap(
                new NumericComparator(),
                "one", 1, "two", 2, "three", 3, "four", 4
            );
            trace (map.toArray() + "n");
            // 1, 2, 3, 4
            
            // LinkedList
            var linkedList : ILinkedList = LinkedLists.newLinkedList(
                1, 2, 3, 4, 5, 6, 7, 8
            );
            trace (linkedList.toArray() + "n");
            // 1, 2, 3, 4, 5, 6, 7, 8
        }

    }
}
</listing></div>
	 
	 <p id="link_NestedCollectionsExample"><strong>Nested collections example</strong></p>
	 
	 <a class="exampleCollapsed" href="#link_NestedCollectionsExample" onClick="toggleExample(this, 'NestedCollectionsExample');">Show example</a><br /><div id="NestedCollectionsExample" style='display:none'><listing version="3.0">package {
    import org.as3commons.collections.ArrayList;
    import org.as3commons.collections.LinkedSet;
    import org.as3commons.collections.framework.IComparator;
    import org.as3commons.collections.utils.
    import flash.display.Sprite;

    public class NestedCollectionsExample extends Sprite {

        public function NestedCollectionsExample() {
            // nested array list
            var list : ArrayList = Lists.newArrayList(
                Lists.newArrayList(1, 2),
                Lists.newArrayList(
                    Lists.newArrayList(3, 4),
                    Lists.newArrayList(5, 6)
                ),
                Lists.newArrayList(7, 8),
                Lists.newArrayList(
                    Lists.newArrayList(9, 10),
                    Lists.newArrayList(11, 12)
                )
            );
            trace (CollectionUtils.dumpAsString(list));
            //    [object ArrayList]
            //    .......[object ArrayList]
            //    ..............1
            //    ..............2
            //    .......[object ArrayList]
            //    ..............[object ArrayList]
            //    .....................3
            //    .....................4
            //    ..............[object ArrayList]
            //    .....................5
            //    .....................6
            //    .......[object ArrayList]
            //    ..............7
            //    ..............8
            //    .......[object ArrayList]
            //    ..............[object ArrayList]
            //    .....................9
            //    .....................10
            //    ..............[object ArrayList]
            //    .....................11
            //    .....................12            
            
            // nested mixed collection
            var c : IComparator = new NumericComparator();
            var theSet : LinkedSet = Sets.newLinkedSet(
                Maps.newLinkedMap("one", 1, "two", 2),
                Lists.newArrayList(
                    Sets.newSortedSet(c, 4, 3),
                    LinkedLists.newLinkedList(5, 6)
                ),
                Lists.newSortedList(c, 8, 7),
                Lists.newArrayList(
                    Maps.newLinkedMap("nine", 9, "ten", 10),
                    Maps.newSortedMap(c, "twelve", 12, "eleven", 11)
                )
            );
            trace (CollectionUtils.dumpAsString(theSet));
            //    [object LinkedSet]
            //    .......[object LinkedMap]
            //    ..............1
            //    ..............2
            //    .......[object ArrayList]
            //    ..............[object SortedSet]
            //    .....................3
            //    .....................4
            //    ..............[object LinkedList]
            //    .....................5
            //    .....................6
            //    .......[object SortedList]
            //    ..............7
            //    ..............8
            //    .......[object ArrayList]
            //    ..............[object LinkedMap]
            //    .....................9
            //    .....................10
            //    ..............[object SortedMap]
            //    .....................11
            //    .....................12            
        }
    }
}
</listing></div>
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 21.04.2011
	 ]]></author>
</classRec>
<method name='addFromArgs' fullname='org.as3commons.collections.utils:Lists/addFromArgs' isStatic='true' isFinal='false' isOverride='false'  param_names='list;args' param_types='org.as3commons.collections.framework:IList;restParam' param_defaults='undefined;undefined' result_type='uint'>
<description><![CDATA[
		 Adds the given list of items to the specified list.
		 
		 <listing>
				Lists.addFromArgs(myList, item1, item2, ...);
		 </listing>
		 
		 ]]></description>
<param><![CDATA[list The list to populate.
		 ]]></param>
<param><![CDATA[...args List of items to add to the list.
		 ]]></param>
<return><![CDATA[The number of items added to the list.
		 ]]></return>
</method>
<method name='addFromArray' fullname='org.as3commons.collections.utils:Lists/addFromArray' isStatic='true' isFinal='false' isOverride='false'  param_names='list;source' param_types='org.as3commons.collections.framework:IList;Array' param_defaults='undefined;undefined' result_type='uint'>
<description><![CDATA[
		 Adds the contents of the given <code>Array</code> to the specified list.
		 
		 <listing>
				var array : Array = [item1, item2, ...];
				var count : uint = Lists.addFromArray(list, array);
		 </listing>
		 
		 ]]></description>
<param><![CDATA[list The list to populate.
		 ]]></param>
<param><![CDATA[source The <code>Array</code> to add from.
		 ]]></param>
<return><![CDATA[The number of items added to the list.
		 ]]></return>
</method>
<method name='addFromCollection' fullname='org.as3commons.collections.utils:Lists/addFromCollection' isStatic='true' isFinal='false' isOverride='false'  param_names='list;source' param_types='org.as3commons.collections.framework:IList;org.as3commons.collections.framework:ICollection' param_defaults='undefined;undefined' result_type='uint'>
<description><![CDATA[
		 Adds the contents of the given <code>ICollection</code> to the specified list.
		 
		 <listing>
				var count : uint = Lists.addFromCollection(list, sourceCollection);
		 </listing>
		 
		 ]]></description>
<param><![CDATA[list The list to populate.
		 ]]></param>
<param><![CDATA[source The <code>ICollection</code> to add from.
		 ]]></param>
<return><![CDATA[The number of items added to the list.
		 ]]></return>
</method>
<method name='clone' fullname='org.as3commons.collections.utils:Lists/clone' isStatic='true' isFinal='false' isOverride='false'  param_names='list;filter' param_types='org.as3commons.collections.framework:IList;Function' param_defaults='undefined;null' result_type='org.as3commons.collections.framework:IList'>
<description><![CDATA[
		 Clones the supplied <code>IList</code> instance returning a new <code>IList</code>
		 of the same type.
		 
		 <p>If a filter is specified the resulting list only contains items that
		 meet the supplied predicates.<p>
		 
		 <p>The filter function accepts the current item and returns a boolean
		 value (<code>true</code> if the item is accepted).</p>
		 
		 <listing>
			function itemFilter(item :  : Boolean {
				var accept : Boolean = false;
				// test the item
				return accept;
			}
					
			var list : IList = Lists.clone(list, filter);
		 </listing>
		 
		 ]]></description>
<param><![CDATA[list The <code>IList</code> instance to clone.
		 ]]></param>
<param><![CDATA[filter Function which will be applied to each item in the source list.
		 ]]></param>
<return><![CDATA[A new <code>IList</code> instance.
		 ]]></return>
</method>
<method name='copy' fullname='org.as3commons.collections.utils:Lists/copy' isStatic='true' isFinal='false' isOverride='false'  param_names='source;destination;filter' param_types='org.as3commons.collections.framework:IList;org.as3commons.collections.framework:IList;Function' param_defaults='undefined;undefined;null' result_type='uint'>
<description><![CDATA[
		 Copies items from one list to another.
		 
		 <p>If a filter is specified only items are copied that meet the
		 supplied predicates.<p>
		 
		 <p>The filter function accepts the current item and returns a boolean
		 value (<code>true</code> if the item is accepted).</p>
		 
		 <listing>
			function itemFilter(item :  : Boolean {
				var accept : Boolean = false;
				// test the item
				return accept;
			}
					
			Lists.copy(sourceList, destinationList, filter);
		 </listing>
		 
		 ]]></description>
<param><![CDATA[source The <code>IList</code> instance to copy from.
		 ]]></param>
<param><![CDATA[destination The <code>IList</code> to copy to.
		 ]]></param>
<param><![CDATA[filter Function which will be applied to each item in the source list.
		 ]]></param>
<return><![CDATA[The number of items copied to the list.
		 ]]></return>
</method>
<method name='newArrayList' fullname='org.as3commons.collections.utils:Lists/newArrayList' isStatic='true' isFinal='false' isOverride='false'  param_names='args' param_types='restParam' param_defaults='undefined' result_type='org.as3commons.collections:ArrayList'>
<description><![CDATA[
		 Creates, populates and returns a new <code>ArrayList</code> instance.
		 
		 <p>The arguments may be left out. In that case no item is added to the list.</p>
		 
		 <listing>
				var list : ArrayList = Lists.newArrayList(item1, item2, ...);
		 </listing>
		 
		 ]]></description>
<param><![CDATA[...args List of items to add to the list.
		 ]]></param>
<return><![CDATA[A new <code>ArrayList</code> instance populated from the given arguments.
		 ]]></return>
</method>
<method name='newSortedList' fullname='org.as3commons.collections.utils:Lists/newSortedList' isStatic='true' isFinal='false' isOverride='false'  param_names='comparator;args' param_types='org.as3commons.collections.framework:IComparator;restParam' param_defaults='undefined;undefined' result_type='org.as3commons.collections:SortedList'>
<description><![CDATA[
		 Creates, populates and returns a new <code>ArrayList</code> instance.
		 
		 <p>The arguments may be left out. In that case no item is added to the list.</p>
		 
		 <listing>
				var list : ArrayList = Lists.newSortedList(comparator, item1, item2, ...);
		 </listing>
		 
		 ]]></description>
<param><![CDATA[...args List of items to add to the list.
		 ]]></param>
<param><![CDATA[comparator The sort criterion.
		 ]]></param>
<return><![CDATA[A new <code>SortedList</code> instance populated from the given arguments.
		 ]]></return>
</method>
<packageRec name='org.as3commons.collections.utils.null' fullname='org.as3commons.collections.utils.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<classRec name='SetBuilder' fullname='org.as3commons.collections.utils:SetBuilder' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\utils\SetBuilder.as' namespace='org.as3commons.collections.utils' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Set builder using the builder pattern.
	 
	 <p>Uses the builder Pattern to simplify the creation of new ISet instances in a fluent fashion.</p>
	  
	 <p>Example: Creating a new LinkedSet instance using SetBuilder.</p>
	 
	 <listing>
	 		const result : ISet = SetBuilder.newLinkedSet()
	 			.add("item-one")
	 			.add("item-two")
	 			.build();
	 		
	 		// Creates the following set: { item-one, item-two }
	 		trace(result);
	 </listing>
	 
	 ]]></description>
<author><![CDATA[John Reeves 14.04.2011
	 ]]></author>
</classRec>
<method name='SetBuilder' fullname='org.as3commons.collections.utils:SetBuilder/SetBuilder' isStatic='false' isFinal='false' isOverride='false'  param_names='underlyingSet' param_types='org.as3commons.collections.framework:ISet' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 Please make use of one of the static factory methods for creating a new <code>SetBuilder</code> instance.
		 
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='add' fullname='org.as3commons.collections.utils:SetBuilder/add' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='org.as3commons.collections.utils:SetBuilder'>
<description><![CDATA[
		 Adds the supplied item to the <code>ISet</code> under construction.
		 
		 <p>Returns a reference to this SetBuilder instance.</p>
		 
		 ]]></description>
<param><![CDATA[item to add to the <code>ISet</code> instance under construction.
		 ]]></param>
<return><![CDATA[a reference to this <code>SetBuilder</code> instance to allow method chaining.
		 ]]></return>
</method>
<method name='build' fullname='org.as3commons.collections.utils:SetBuilder/build' isStatic='false' isFinal='false' isOverride='false'  result_type='org.as3commons.collections.framework:ISet'>
<description><![CDATA[
		 Completes construction.
		 ]]></description>
</method>
<method name='newLinkedSet' fullname='org.as3commons.collections.utils:SetBuilder/newLinkedSet' isStatic='true' isFinal='false' isOverride='false'  result_type='org.as3commons.collections.utils:SetBuilder'>
<description><![CDATA[
		 Starts construction of a new <code>LinkedSet</code> instance.
		 
		 ]]></description>
<return><![CDATA[a <code>SetBuilder</code> instance which will build and return an instance of <code>LinkedSet</code>
		 ]]></return>
</method>
<method name='newSet' fullname='org.as3commons.collections.utils:SetBuilder/newSet' isStatic='true' isFinal='false' isOverride='false'  result_type='org.as3commons.collections.utils:SetBuilder'>
<description><![CDATA[
		 Starts the construction of a new <code>Set</code> instance.
		 
		 ]]></description>
<return><![CDATA[a <code>SetBuilder</code> instance which will build and return an instance of Set
		 ]]></return>
</method>
<method name='newSortedSet' fullname='org.as3commons.collections.utils:SetBuilder/newSortedSet' isStatic='true' isFinal='false' isOverride='false'  param_names='comparator' param_types='org.as3commons.collections.framework:IComparator' param_defaults='undefined' result_type='org.as3commons.collections.utils:SetBuilder'>
<description><![CDATA[
		 Starts construction of a new <code>SortedSet</code> instance.
		 
		 ]]></description>
<param><![CDATA[comparator The sort criterion which will be used by the resulting <code>SortedSet</code> instance.
		 ]]></param>
<return><![CDATA[a <code>SetBuilder</code> instance which will build and return an instance of <code>SortedSet</code>
		 ]]></return>
</method>
<field name='_set' fullname='org.as3commons.collections.utils:SetBuilder/private:_set' type='org.as3commons.collections.framework:ISet' isStatic='false' isConst='false' >
<description><![CDATA[
		 Backing <code>ISet</code> instance.
		 ]]></description>
</field>
<packageRec name='org.as3commons.collections.utils.null' fullname='org.as3commons.collections.utils.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<classRec name='ListBuilder' fullname='org.as3commons.collections.utils:ListBuilder' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\utils\ListBuilder.as' namespace='org.as3commons.collections.utils' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 List builder using the builder pattern.
	 
	 <p>Uses the builder Pattern to simplify the creation of new <code>IList</code> instances
	 in a fluent fashion.</p>
	  
	 <p>Example: Creating a new <code>ArrayList</code> instance using ListBuilder.</p>
	 
	 <listing>
	 		const result : IList = ListBuilder.newArrayList()
	 			.add("item-one")
	 			.add("item-two")
	 			.build();
	 		
	 		// Creates the following list: { item-one, item-two }
	 		trace(result);
	 </listing>;
	 
	 ]]></description>
<author><![CDATA[John Reeves 14.04.2011
	 ]]></author>
</classRec>
<method name='ListBuilder' fullname='org.as3commons.collections.utils:ListBuilder/ListBuilder' isStatic='false' isFinal='false' isOverride='false'  param_names='underlyingList' param_types='org.as3commons.collections.framework:IList' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 Please make use of one of the static factory methods for creating a new <code>ListBuilder</code> instance.
		 
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='add' fullname='org.as3commons.collections.utils:ListBuilder/add' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='org.as3commons.collections.utils:ListBuilder'>
<description><![CDATA[
		 Adds the supplied item to the <code>IList</code> under construction.
		 
		 <p>Returns a reference to this <code>ListBuilder</code> instance.</p>
		 
		 ]]></description>
<param><![CDATA[item to add to the <code>IList</code> instance under construction.
		 ]]></param>
<return><![CDATA[A reference to this <code>ListBuilder</code> instance to allow method chaining.
		 ]]></return>
</method>
<method name='build' fullname='org.as3commons.collections.utils:ListBuilder/build' isStatic='false' isFinal='false' isOverride='false'  result_type='org.as3commons.collections.framework:IList'>
<description><![CDATA[
		 Completes construction.
		 ]]></description>
</method>
<method name='newArrayList' fullname='org.as3commons.collections.utils:ListBuilder/newArrayList' isStatic='true' isFinal='false' isOverride='false'  result_type='org.as3commons.collections.utils:ListBuilder'>
<description><![CDATA[
		 Starts construction of a new <code>ArrayList</code> instance.
		 
		 ]]></description>
<return><![CDATA[A <code>ListBuilder</code> instance which will build and return an instance of <code>ArrayList</code>
		 ]]></return>
</method>
<method name='newSortedList' fullname='org.as3commons.collections.utils:ListBuilder/newSortedList' isStatic='true' isFinal='false' isOverride='false'  param_names='comparator' param_types='org.as3commons.collections.framework:IComparator' param_defaults='undefined' result_type='org.as3commons.collections.utils:ListBuilder'>
<description><![CDATA[
		 Starts construction of a new <code>SortedList</code> instance.
		 
		 ]]></description>
<param><![CDATA[comparator The sort criterion which will be used by the resulting <code>SortedList</code> instance.
		 ]]></param>
<return><![CDATA[A <code>ListBuilder</code> instance which will build and return an instance of <code>SortedList</code>
		 ]]></return>
</method>
<field name='_list' fullname='org.as3commons.collections.utils:ListBuilder/private:_list' type='org.as3commons.collections.framework:IList' isStatic='false' isConst='false' >
<description><![CDATA[
		 Backing <code>IList</code> instance.
		 ]]></description>
</field>
<packageRec name='org.as3commons.collections.utils.null' fullname='org.as3commons.collections.utils.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<classRec name='Sets' fullname='org.as3commons.collections.utils:Sets' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\utils\Sets.as' namespace='org.as3commons.collections.utils' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 <code>ISet</code> utilities.
	 
	 <p id="link_SetsAddFromExample"><strong><code>Sets.addFrom...()</code> example</strong></p>
	 
	 <a class="exampleCollapsed" href="#link_SetsAddFromExample" onClick="toggleExample(this, 'SetsAddFromExample');">Show example</a><br /><div id="SetsAddFromExample" style='display:none'><listing version="3.0">package {
    import org.as3commons.collections.LinkedList;
    import org.as3commons.collections.LinkedSet;
    import org.as3commons.collections.Map;
    import org.as3commons.collections.utils.Sets;
    import flash.display.Sprite;

    public class SetsAddFromExample extends Sprite {

        public function SetsAddFromExample() {
            // set to populate
            var theSet : LinkedSet = new LinkedSet();

            // from array (ordered)
            var a : Array = [1, "2", "2"]; // second "2" ignored by set
            Sets.addFromArray(theSet, a);

            // from linked list (ordered)
            var l : LinkedList = new LinkedList();
            l.add("2"); // ignored by set
            l.add(3);
            l.add("4");
            l.add(3); // ignored by set
            Sets.addFromCollection(theSet, l);

            // from map (no order)
            var m : Map = new Map();
            m.add("five", 5);
            m.add("six", "6");
            m.add("four", "4"); // ignored by set
            Sets.addFromCollection(theSet, m);

            // from args (ordered)
            Sets.addFromArgs(theSet,
                7, "8", "6" // "6" ignored by set
            );

            // test
            trace (theSet.toArray().join("n"));
            
            //    1            // from array
            //    2
            //    3            // from linked list
            //    4
            //    6            // from map
            //    5
            //    7            // from args
            //    8
        }

    }
}
</listing></div>
	 
	 <p id="link_SetsCloneExample"><strong><code>Sets.clone()</code> example</strong></p>
	 
	 <a class="exampleCollapsed" href="#link_SetsCloneExample" onClick="toggleExample(this, 'SetsCloneExample');">Show example</a><br /><div id="SetsCloneExample" style='display:none'><listing version="3.0">package {
    import org.as3commons.collections.utils.NumericComparator;
    import flash.utils.getQualifiedClassName;
    import org.as3commons.collections.framework.ISet;
    import org.as3commons.collections.utils.Sets;
    import flash.display.Sprite;

    public class SetsCloneExample extends Sprite {

        public function SetsCloneExample() {
            // clone simple set
            var theSet : ISet = Sets.newSet(2, 4, 1, 3);
            var clone : ISet = Sets.clone(theSet);
            trace (theSet.toArray().join("n"));
            trace (getQualifiedClassName(clone));
            //    1
            //    2
            //    3
            //    4
            //    org.as3commons.collections::Set
            
            // clone linked theSet
            theSet = Sets.newLinkedSet(2, 4, 1, 3);
            clone = Sets.clone(theSet);
            trace (theSet.toArray().join("n"));
            trace (getQualifiedClassName(clone));
            //    2
            //    4
            //    1
            //    3
            //    org.as3commons.collections::LinkedSet

            // clone sorted set
            theSet = Sets.newSortedSet(
                new NumericComparator(),
                2, 4, 1, 3
            );
            clone = Sets.clone(theSet);
            trace (theSet.toArray().join("n"));
            trace (getQualifiedClassName(clone));
            //    1
            //    2
            //    3
            //    4
            //    org.as3commons.collections::SortedSet
        }
        
    }
}
</listing></div>
	 
	 <p id="link_SetsCopyExample"><strong><code>Sets.copy()</code> example</strong></p>
	 
	 <a class="exampleCollapsed" href="#link_SetsCopyExample" onClick="toggleExample(this, 'SetsCopyExample');">Show example</a><br /><div id="SetsCopyExample" style='display:none'><listing version="3.0">package {
    import org.as3commons.collections.framework.ISet;
    import org.as3commons.collections.utils.Sets;
    import org.as3commons.collections.utils.NumericComparator;
    import flash.display.Sprite;

    public class SetsCopyExample extends Sprite {
        public function SetsCopyExample() {
            // source
            var source : ISet = Sets.newLinkedSet(1, 2, 3, 4);
            trace (source.toArray() + "n");
            //    1, 2, 3, 4
            
            // copy all
            var theSet : ISet = Sets.newSortedSet(
                new NumericComparator(),
                5, 6, 7, 8
            );
            trace (theSet.toArray() + "n");
            //    5, 6, 7, 8
            Sets.copy(source, theSet);
            trace (theSet.toArray() + "n");
            //    1, 2, 3, 4, 5, 6, 7, 8

            // copy only even items
            theSet = Sets.newSortedSet(
                new NumericComparator(),
                6, 8
            );
            trace (theSet.toArray() + "n");
            //    6, 8
            Sets.copy(source, theSet, evenFilter);
            trace (theSet.toArray() + "n");
            //    2, 4, 6, 8
        }
        
        private function evenFilter(item :  : Boolean {
            return item % 2 == 0;
        }

    }
}
</listing></div>
	 
	 <p id="link_AddFromArgsExample"><strong><code>Sets.new...()</code> example</strong></p>
	 
	 <a class="exampleCollapsed" href="#link_AddFromArgsExample" onClick="toggleExample(this, 'AddFromArgsExample');">Show example</a><br /><div id="AddFromArgsExample" style='display:none'><listing version="3.0">package {
    import org.as3commons.collections.framework.
    import org.as3commons.collections.utils.
    import flash.display.Sprite;

    public class AddFromArgsExample extends Sprite {

        public function AddFromArgsExample() {
            // ArrayList
            var list : IList = Lists.newArrayList(
                1, 2, 3, 4, 5, 6, 7, 8
            );
            trace (list.toArray() + "n");
            // 1, 2, 3, 4, 5, 6, 7, 8
            
            // ArrayList
            list = Lists.newSortedList(
                new NumericComparator(),
                6, 3, 1, 5, 8, 2, 7, 4
            );
            trace (list.toArray() + "n");
            // 1, 2, 3, 4, 5, 6, 7, 8
            
            // Set
            var theSet : ISet = Sets.newSet(
                1, 2, 3, 4, 5, 6, 7, 8
            );
            trace (theSet.toArray() + "n");
            // 1, 2, 3, 4, 5, 6, 7, 8
            
            // LinkedSet
            theSet = Sets.newLinkedSet(
                1, 2, 3, 4, 5, 6, 7, 8
            );
            trace (theSet.toArray() + "n");
            // 1, 2, 3, 4, 5, 6, 7, 8
            
            // SortedSet
            theSet = Sets.newSortedSet(
                new NumericComparator(),
                6, 3, 1, 5, 8, 2, 7, 4
            );
            trace (theSet.toArray() + "n");
            // 1, 2, 3, 4, 5, 6, 7, 8
            
            // Map
            var map : IMap = Maps.newMap(
                "one", 1, "two", 2, "three", 3, "four", 4
            );
            trace (map.toArray() + "n");
            // 1, 4, 2, 3
            
            // LinkedMap
            map = Maps.newLinkedMap(
                "one", 1, "two", 2, "three", 3, "four", 4
            );
            trace (map.toArray() + "n");
            // 1, 2, 3, 4
            
            // SortedMap
            map = Maps.newSortedMap(
                new NumericComparator(),
                "one", 1, "two", 2, "three", 3, "four", 4
            );
            trace (map.toArray() + "n");
            // 1, 2, 3, 4
            
            // LinkedList
            var linkedList : ILinkedList = LinkedLists.newLinkedList(
                1, 2, 3, 4, 5, 6, 7, 8
            );
            trace (linkedList.toArray() + "n");
            // 1, 2, 3, 4, 5, 6, 7, 8
        }

    }
}
</listing></div>
	 
	 <p id="link_NestedCollectionsExample"><strong>Nested collections example</strong></p>
	 
	 <a class="exampleCollapsed" href="#link_NestedCollectionsExample" onClick="toggleExample(this, 'NestedCollectionsExample');">Show example</a><br /><div id="NestedCollectionsExample" style='display:none'><listing version="3.0">package {
    import org.as3commons.collections.ArrayList;
    import org.as3commons.collections.LinkedSet;
    import org.as3commons.collections.framework.IComparator;
    import org.as3commons.collections.utils.
    import flash.display.Sprite;

    public class NestedCollectionsExample extends Sprite {

        public function NestedCollectionsExample() {
            // nested array list
            var list : ArrayList = Lists.newArrayList(
                Lists.newArrayList(1, 2),
                Lists.newArrayList(
                    Lists.newArrayList(3, 4),
                    Lists.newArrayList(5, 6)
                ),
                Lists.newArrayList(7, 8),
                Lists.newArrayList(
                    Lists.newArrayList(9, 10),
                    Lists.newArrayList(11, 12)
                )
            );
            trace (CollectionUtils.dumpAsString(list));
            //    [object ArrayList]
            //    .......[object ArrayList]
            //    ..............1
            //    ..............2
            //    .......[object ArrayList]
            //    ..............[object ArrayList]
            //    .....................3
            //    .....................4
            //    ..............[object ArrayList]
            //    .....................5
            //    .....................6
            //    .......[object ArrayList]
            //    ..............7
            //    ..............8
            //    .......[object ArrayList]
            //    ..............[object ArrayList]
            //    .....................9
            //    .....................10
            //    ..............[object ArrayList]
            //    .....................11
            //    .....................12            
            
            // nested mixed collection
            var c : IComparator = new NumericComparator();
            var theSet : LinkedSet = Sets.newLinkedSet(
                Maps.newLinkedMap("one", 1, "two", 2),
                Lists.newArrayList(
                    Sets.newSortedSet(c, 4, 3),
                    LinkedLists.newLinkedList(5, 6)
                ),
                Lists.newSortedList(c, 8, 7),
                Lists.newArrayList(
                    Maps.newLinkedMap("nine", 9, "ten", 10),
                    Maps.newSortedMap(c, "twelve", 12, "eleven", 11)
                )
            );
            trace (CollectionUtils.dumpAsString(theSet));
            //    [object LinkedSet]
            //    .......[object LinkedMap]
            //    ..............1
            //    ..............2
            //    .......[object ArrayList]
            //    ..............[object SortedSet]
            //    .....................3
            //    .....................4
            //    ..............[object LinkedList]
            //    .....................5
            //    .....................6
            //    .......[object SortedList]
            //    ..............7
            //    ..............8
            //    .......[object ArrayList]
            //    ..............[object LinkedMap]
            //    .....................9
            //    .....................10
            //    ..............[object SortedMap]
            //    .....................11
            //    .....................12            
        }
    }
}
</listing></div>
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 21.04.2011
	 ]]></author>
</classRec>
<method name='addFromArgs' fullname='org.as3commons.collections.utils:Sets/addFromArgs' isStatic='true' isFinal='false' isOverride='false'  param_names='theSet;args' param_types='org.as3commons.collections.framework:ISet;restParam' param_defaults='undefined;undefined' result_type='uint'>
<description><![CDATA[
		 Adds the given list of items to the specified set.
		 
		 <listing>
				Sets.addFromArgs(mySet, item1, item2, ...);
		 </listing>
		 
		 ]]></description>
<param><![CDATA[theSet The set to populate.
		 ]]></param>
<param><![CDATA[...args List of items to add to the set.
		 ]]></param>
<return><![CDATA[The number of items added to the set.
		 ]]></return>
</method>
<method name='addFromArray' fullname='org.as3commons.collections.utils:Sets/addFromArray' isStatic='true' isFinal='false' isOverride='false'  param_names='theSet;source' param_types='org.as3commons.collections.framework:ISet;Array' param_defaults='undefined;undefined' result_type='uint'>
<description><![CDATA[
		 Adds the contents of the given <code>Array</code> to the specified set.
		 
		 <listing>
				var array : Array = [item1, item2, ...];
				var count : uint = Sets.addFromArray(theSet, array);
		 </listing>
		 
		 ]]></description>
<param><![CDATA[theSet The set to populate.
		 ]]></param>
<param><![CDATA[source The <code>Array</code> to add from.
		 ]]></param>
<return><![CDATA[The number of items added to the set.
		 ]]></return>
</method>
<method name='addFromCollection' fullname='org.as3commons.collections.utils:Sets/addFromCollection' isStatic='true' isFinal='false' isOverride='false'  param_names='theSet;source' param_types='org.as3commons.collections.framework:ISet;org.as3commons.collections.framework:ICollection' param_defaults='undefined;undefined' result_type='uint'>
<description><![CDATA[
		 Adds the contents of the given <code>ICollection</code> to the specified set.
		 
		 <listing>
				var count : uint = Sets.addFromCollection(theSet, sourceCollection);
		 </listing>
		 
		 ]]></description>
<param><![CDATA[theSet The set to populate.
		 ]]></param>
<param><![CDATA[source The <code>ICollection</code> to add from.
		 ]]></param>
<return><![CDATA[The number of items added to the set.
		 ]]></return>
</method>
<method name='clone' fullname='org.as3commons.collections.utils:Sets/clone' isStatic='true' isFinal='false' isOverride='false'  param_names='theSet;filter' param_types='org.as3commons.collections.framework:ISet;Function' param_defaults='undefined;null' result_type='org.as3commons.collections.framework:ISet'>
<description><![CDATA[
		 Clones the supplied <code>ISet</code> instance returning a new <code>ISet</code>
		 of the same type.
		 
		 <p>If a filter is specified the resulting set only contains items that
		 meet the supplied predicates.<p>
		 
		 <p>The filter function accepts the current item and returns a boolean
		 value (<code>true</code> if the item is accepted).</p>
		 
		 <listing>
			function itemFilter(item :  : Boolean {
				var accept : Boolean = false;
				// test the item
				return accept;
			}
					
			var theSet : ISet = Sets.clone(theSet, filter);
		 </listing>
		 
		 ]]></description>
<param><![CDATA[theSet The <code>ISet</code> instance to clone.
		 ]]></param>
<param><![CDATA[filter Function which will be applied to each item in the source theSet.
		 ]]></param>
<return><![CDATA[A new <code>ISet</code> instance.
		 ]]></return>
</method>
<method name='copy' fullname='org.as3commons.collections.utils:Sets/copy' isStatic='true' isFinal='false' isOverride='false'  param_names='source;destination;filter' param_types='org.as3commons.collections.framework:ISet;org.as3commons.collections.framework:ISet;Function' param_defaults='undefined;undefined;null' result_type='uint'>
<description><![CDATA[
		 Copies items from one set to another.
		 
		 <p>If a filter is specified only items are copied that meet the
		 supplied predicates.<p>
		 
		 <p>The filter function accepts the current item and returns a boolean
		 value (<code>true</code> if the item is accepted).</p>
		 
		 <listing>
			function itemFilter(item :  : Boolean {
				var accept : Boolean = false;
				// test the item
				return accept;
			}
					
			Sets.copy(sourceSet, destinationSet, filter);
		 </listing>
		 
		 ]]></description>
<param><![CDATA[source The <code>ISet</code> instance to copy from.
		 ]]></param>
<param><![CDATA[destination The <code>ISet</code> to copy to.
		 ]]></param>
<param><![CDATA[filter Function which will be applied to each item in the source set.
		 ]]></param>
<return><![CDATA[The number of items copied to the set.
		 ]]></return>
</method>
<method name='newLinkedSet' fullname='org.as3commons.collections.utils:Sets/newLinkedSet' isStatic='true' isFinal='false' isOverride='false'  param_names='args' param_types='restParam' param_defaults='undefined' result_type='org.as3commons.collections:LinkedSet'>
<description><![CDATA[
		 Creates, populates and returns a new <code>LinkedSet</code> instance.
		 
		 <p>The arguments may be left out. In that case no item is added to the set.</p>
		 
		 <listing>
				var theSet : LinkedSet = Sets.newLinkedSet(item1, item2, ...);
		 </listing>
		 
		 ]]></description>
<param><![CDATA[...args List of items to add to the set.
		 ]]></param>
<return><![CDATA[A new <code>LinkedSet</code> instance populated from the given arguments.
		 ]]></return>
</method>
<method name='newSet' fullname='org.as3commons.collections.utils:Sets/newSet' isStatic='true' isFinal='false' isOverride='false'  param_names='args' param_types='restParam' param_defaults='undefined' result_type='org.as3commons.collections:Set'>
<description><![CDATA[
		 Creates, populates and returns a new <code>Set</code> instance.
		 
		 <p>The arguments may be left out. In that case no item is added to the set.</p>
		 
		 <listing>
				var theSet : LinkedSet = Sets.newSet(item1, item2, ...);
		 </listing>
		 
		 ]]></description>
<param><![CDATA[...args List of key-item-pairs to add to the set.
		 ]]></param>
<return><![CDATA[A new <code>Set</code> instance populated from the given arguments.
		 ]]></return>
</method>
<method name='newSortedSet' fullname='org.as3commons.collections.utils:Sets/newSortedSet' isStatic='true' isFinal='false' isOverride='false'  param_names='comparator;args' param_types='org.as3commons.collections.framework:IComparator;restParam' param_defaults='undefined;undefined' result_type='org.as3commons.collections:SortedSet'>
<description><![CDATA[
		 Creates, populates and returns a new <code>LinkedSet</code> instance.
		 
		 <p>The arguments may be left out. In that case no item is added to the set.</p>
		 
		 <listing>
				var theSet : LinkedSet = Sets.newSortedSet(comparator, item1, item2, ...);
		 </listing>
		 
		 ]]></description>
<param><![CDATA[...args List of items to add to the set.
		 ]]></param>
<param><![CDATA[comparator The sort criterion.
		 ]]></param>
<return><![CDATA[A new <code>LinkedSet</code> instance populated from the given arguments.
		 ]]></return>
</method>
<packageRec name='org.as3commons.collections.utils.null' fullname='org.as3commons.collections.utils.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<classRec name='ArrayUtils' fullname='org.as3commons.collections.utils:ArrayUtils' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\utils\ArrayUtils.as' namespace='org.as3commons.collections.utils' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Array utils.
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 11.02.2009
	 ]]></author>
</classRec>
<method name='arraysEqual' fullname='org.as3commons.collections.utils:ArrayUtils/arraysEqual' isStatic='true' isFinal='false' isOverride='false'  param_names='array1;array2' param_types='Array;Array' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[
		 Tests if two arrays contain the same items in the same order.
		 
		 ]]></description>
<param><![CDATA[array1 The first array.
		 ]]></param>
<param><![CDATA[array2 The second array.
		 ]]></param>
<return><![CDATA[<code>true</code> if both arrays contain the same items in the same order.
		 ]]></return>
</method>
<method name='arraysMatch' fullname='org.as3commons.collections.utils:ArrayUtils/arraysMatch' isStatic='true' isFinal='false' isOverride='false'  param_names='array1;array2' param_types='Array;Array' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[
		 Tests if two arrays contain the same items regardless of their order.
		 
		 ]]></description>
<param><![CDATA[array1 The first array.
		 ]]></param>
<param><![CDATA[array2 The second array.
		 ]]></param>
<return><![CDATA[<code>true</code> if both arrays contain the same items.
		 ]]></return>
</method>
<method name='insertionSort' fullname='org.as3commons.collections.utils:ArrayUtils/insertionSort' isStatic='true' isFinal='false' isOverride='false'  param_names='array;comparator' param_types='Array;org.as3commons.collections.framework:IComparator' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[
		 Sorts the given array using the insertion sort algorithm.
		 
		 <p>In difference to the <code>Array.sort()</code> implemention is this sort stable which
		 means that equal items are sorted in the same order they had in the orgininal array.</p>
		 
		 <p>Faster than <code>mergeSort()</code> for very small arrays (about 10 items).</p>
		 
		 ]]></description>
<param><![CDATA[array The array to sort.
		 ]]></param>
<param><![CDATA[comparator The sort criterion.
		 ]]></param>
<return><![CDATA[<code>true</code> if the array has more than 1 item.
		 ]]></return>
</method>
<method name='mergeSort' fullname='org.as3commons.collections.utils:ArrayUtils/mergeSort' isStatic='true' isFinal='false' isOverride='false'  param_names='array;comparator' param_types='Array;org.as3commons.collections.framework:IComparator' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[
		 Sorts the given array using the merge sort algorithm.
		 
		 <p>In difference to the <code>Array.sort()</code> implemention is this sort stable which
		 means that equal items are sorted in the order they appear in the orgininal array.</p>
		 
		 <p>Faster than <code>insertionSort()</code> for arrays greater than about 10 items.</p>
		 
		 ]]></description>
<param><![CDATA[array The array to sort.
		 ]]></param>
<param><![CDATA[comparator The sort criterion.
		 ]]></param>
<return><![CDATA[<code>true</code> if the array has more than 1 item.
		 ]]></return>
</method>
<method name='shuffle' fullname='org.as3commons.collections.utils:ArrayUtils/shuffle' isStatic='true' isFinal='false' isOverride='false'  param_names='array' param_types='Array' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 Shuffles the items of the given array.
		 
		 <p>Modern version of the Fisher-Yates algorithm.</p>
		 
		 ]]></description>
<param><![CDATA[array The array to shuffle.
		 ]]></param>
<return><![CDATA[<code>true</code> if the array has more than 1 item.
		 ]]></return>
</method>
<packageRec name='org.as3commons.collections.utils.null' fullname='org.as3commons.collections.utils.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<classRec name='MapBuilder' fullname='org.as3commons.collections.utils:MapBuilder' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\utils\MapBuilder.as' namespace='org.as3commons.collections.utils' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Map builder using the builder pattern.
	 
	 <p>Uses the builder Pattern to simplify the creation of new <code>IMap</code> instances in a fluent fashion.</p>
	  
	 <p>Example: Creating a new <code>LinkedMap</code> instance using MapBuilder.</p>
	 
	 <listing>
	 		const result : IMap = MapBuilder.newLinkedMap()
	 			.add("key1", "item-one")
	 			.add("key2", "item-two")
	 			.build();
	 		
	 		// Creates the following map: { key1 => item-one, key2 => item-two }
	 		trace(result);
	 </listing>
	 
	 ]]></description>
<author><![CDATA[John Reeves 14.04.2011
	 ]]></author>
</classRec>
<method name='MapBuilder' fullname='org.as3commons.collections.utils:MapBuilder/MapBuilder' isStatic='false' isFinal='false' isOverride='false'  param_names='underlyingMap' param_types='org.as3commons.collections.framework:IMap' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 Please make use of one of the static factory methods for creating a new <code>MapBuilder</code> instance.
		 
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='add' fullname='org.as3commons.collections.utils:MapBuilder/add' isStatic='false' isFinal='false' isOverride='false'  param_names='key;item' param_types='*;*' param_defaults='undefined;undefined' result_type='org.as3commons.collections.utils:MapBuilder'>
<description><![CDATA[
		 Adds the supplied key and item mapping to the <code>IMap</code> under construction.
		 
		 <p>Returns a reference to this <code>MapBuilder</code> instance.</p>
		 
		 ]]></description>
<param><![CDATA[key to add to the map
		 ]]></param>
<param><![CDATA[item to be mapped to the supplied key 
		 ]]></param>
<return><![CDATA[a reference to this <code>MapBuilder</code> instance to allow method chaining.
		 ]]></return>
</method>
<method name='build' fullname='org.as3commons.collections.utils:MapBuilder/build' isStatic='false' isFinal='false' isOverride='false'  result_type='org.as3commons.collections.framework:IMap'>
<description><![CDATA[
		 Completes construction.
		 ]]></description>
</method>
<method name='newLinkedMap' fullname='org.as3commons.collections.utils:MapBuilder/newLinkedMap' isStatic='true' isFinal='false' isOverride='false'  result_type='org.as3commons.collections.utils:MapBuilder'>
<description><![CDATA[
		 Starts construction of a new <code>LinkedMap</code> instance.
		 
		 ]]></description>
<return><![CDATA[a <code>MapBuilder</code> instance which will build and return an instance of <code>LinkedMap</code>
		 ]]></return>
</method>
<method name='newMap' fullname='org.as3commons.collections.utils:MapBuilder/newMap' isStatic='true' isFinal='false' isOverride='false'  result_type='org.as3commons.collections.utils:MapBuilder'>
<description><![CDATA[
		 Starts the construction of a new <code>Map</code> instance.
		 
		 ]]></description>
<return><![CDATA[a <code>MapBuilder</code> instance which will build and return an instance of <code>Map</code>
		 ]]></return>
</method>
<method name='newSortedMap' fullname='org.as3commons.collections.utils:MapBuilder/newSortedMap' isStatic='true' isFinal='false' isOverride='false'  param_names='comparator' param_types='org.as3commons.collections.framework:IComparator' param_defaults='undefined' result_type='org.as3commons.collections.utils:MapBuilder'>
<description><![CDATA[
		 Starts construction of a new <code>SortedMap</code> instance.
		 
		 ]]></description>
<param><![CDATA[comparator The sort criterion which will be used by the resulting <code>SortedMap</code> instance.
		 ]]></param>
<return><![CDATA[a <code>MapBuilder</code> instance which will build and return an instance of <code>SortedMap</code>
		 ]]></return>
</method>
<field name='_map' fullname='org.as3commons.collections.utils:MapBuilder/private:_map' type='org.as3commons.collections.framework:IMap' isStatic='false' isConst='false' >
<description><![CDATA[
		 Backing <code>IMap</code> instance.
		 ]]></description>
</field>
<packageRec name='org.as3commons.collections.utils.null' fullname='org.as3commons.collections.utils.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<classRec name='Maps' fullname='org.as3commons.collections.utils:Maps' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\utils\Maps.as' namespace='org.as3commons.collections.utils' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 <code>IMap</code> utilities.
	 
	 <p id="link_MapsAddFromExample"><strong><code>Maps.addFrom...()</code> example</strong></p>
	 
	 <a class="exampleCollapsed" href="#link_MapsAddFromExample" onClick="toggleExample(this, 'MapsAddFromExample');">Show example</a><br /><div id="MapsAddFromExample" style='display:none'><listing version="3.0">package {
    import org.as3commons.collections.LinkedMap;
    import org.as3commons.collections.framework.IMapIterator;
    import org.as3commons.collections.utils.Maps;
    import flash.display.Sprite;
    import flash.utils.Dictionary;

    public class MapsAddFromExample extends Sprite {

        public function MapsAddFromExample() {
            // map to populate
            var map : LinkedMap = new LinkedMap();

            // from object (no order)
            var o : Object = {
                1: "1",
                "2": "two"
            };
            Maps.addFromObject(map, o);

            // from dictionary (no order)
            var d : Dictionary = new Dictionary();
            d["2"] = "two (2)"; // ignored by map
            d[3] = "3";
            d["4"] = "four";
            Maps.addFromObject(map, d);

            // from array (ordered)
            var a : Array = [
                3, "3 (2)", // ignored by map
                5, "5",
                "6", "six"
            ];
            Maps.addFromArray(map, a);

            // from map (ordered)
            var m : LinkedMap = new LinkedMap();
            m.add("6", "six (2)"); // ignored by map
            m.add(7, "7");
            m.add("8", "eight");
            Maps.addFromMap(map, m);

            // from args (ordered)
            Maps.addFromArgs(map,
                "8", "eight (2)", // ignored by map
                9, "9",
                "10", "ten"
            );

            // test
            var i : IMapIterator = map.iterator() as IMapIterator;
            while (i.next()) trace (i.key, "=&gt;", i.current);
            
            //    1 =&gt; 1            // from object
            //    2 =&gt; two
            //    4 =&gt; four        // from dictionary
            //    3 =&gt; 3
            //    5 =&gt; 5            // from array
            //    6 =&gt; six
            //    7 =&gt; 7            // from linked map
            //    8 =&gt; eight
            //    9 =&gt; 9            // from args
            //    10 =&gt; ten
        }

    }
}
</listing></div>
	 
	 <p id="link_MapsCloneExample"><strong><code>Maps.clone()</code> example</strong></p>
	 
	 <a class="exampleCollapsed" href="#link_MapsCloneExample" onClick="toggleExample(this, 'MapsCloneExample');">Show example</a><br /><div id="MapsCloneExample" style='display:none'><listing version="3.0">package {
    import org.as3commons.collections.utils.NumericComparator;
    import flash.utils.getQualifiedClassName;
    import org.as3commons.collections.framework.IMap;
    import org.as3commons.collections.framework.IMapIterator;
    import org.as3commons.collections.utils.Maps;
    import flash.display.Sprite;

    public class MapsCloneExample extends Sprite {

        public function MapsCloneExample() {
            // clone simple map
            var map : IMap = Maps.newMap(
                "two", 2, "four", 4, "one", 1, "three", 3
            );
            var clone : IMap = Maps.clone(map);
            dumpMap(clone);
            trace (getQualifiedClassName(clone));
            //    three =&gt; 3
            //    four =&gt; 4
            //    one =&gt; 1
            //    two =&gt; 2
            //    org.as3commons.collections::Map
            
            // clone linked map
            map = Maps.newLinkedMap(
                "two", 2, "four", 4, "one", 1, "three", 3
            );
            clone = Maps.clone(map);
            dumpMap(clone);
            trace (getQualifiedClassName(clone));
            //    two =&gt; 2
            //    four =&gt; 4
            //    one =&gt; 1
            //    three =&gt; 3
            //    org.as3commons.collections::LinkedMap

            // clone sorted map
            map = Maps.newSortedMap(
                new NumericComparator(),
                "two", 2, "four", 4, "one", 1, "three", 3
            );
            clone = Maps.clone(map);
            dumpMap(clone);
            trace (getQualifiedClassName(clone));
            //    one =&gt; 1
            //    two =&gt; 2
            //    three =&gt; 3
            //    four =&gt; 4
            //    org.as3commons.collections::SortedMap
        }
        
        private function dumpMap(map : IMap) : void {
            var i : IMapIterator = map.iterator() as IMapIterator;
            while (i.next()) trace (i.key, "=&gt;", i.current);
        }
    }
}
</listing></div>
	 
	 <p id="link_MapsCopyExample"><strong><code>Maps.copy()</code> example</strong></p>
	 
	 <a class="exampleCollapsed" href="#link_MapsCopyExample" onClick="toggleExample(this, 'MapsCopyExample');">Show example</a><br /><div id="MapsCopyExample" style='display:none'><listing version="3.0">package {
    import org.as3commons.collections.framework.IMap;
    import org.as3commons.collections.framework.IMapIterator;
    import org.as3commons.collections.utils.Maps;
    import org.as3commons.collections.utils.NumericComparator;
    import flash.display.Sprite;

    public class MapsCopyExample extends Sprite {
        public function MapsCopyExample() {
            // source
            var source : IMap = Maps.newLinkedMap(
                1, 1, 2, 1,
                3, 2, 4, 2 
            );
            dumpMap(source);
            //    1 =&gt; 1
            //    2 =&gt; 1
            //    3 =&gt; 2
            //    4 =&gt; 2
            
            // copy all
            var map : IMap = Maps.newSortedMap(
                new NumericComparator(),
                5, 3, 6, 3,
                7, 4, 8, 4
            );
            dumpMap(map);
            //    5 =&gt; 3
            //    6 =&gt; 3
            //    7 =&gt; 4
            //    8 =&gt; 4
            Maps.copy(source, map);
            dumpMap(map);
            //    1 =&gt; 1
            //    2 =&gt; 1
            //    3 =&gt; 2
            //    4 =&gt; 2
            //    5 =&gt; 3
            //    6 =&gt; 3
            //    7 =&gt; 4
            //    8 =&gt; 4

            // copy only even keys
            map = Maps.newSortedMap(
                new NumericComparator(),
                6, 3,
                8, 4
            );
            dumpMap(map);
            //    6 =&gt; 3
            //    8 =&gt; 4
            Maps.copy(source, map, evenFilter);
            dumpMap(map);
            //    2 =&gt; 1
            //    4 =&gt; 2
            //    6 =&gt; 3
            //    8 =&gt; 4

            // copy only even items
            map = Maps.newSortedMap(
                new NumericComparator(),
                7, 4, 8, 4
            );
            dumpMap(map);
            //    7 =&gt; 4
            //    8 =&gt; 4
            Maps.copy(source, map, null, evenFilter);
            dumpMap(map);
            //    3 =&gt; 2
            //    4 =&gt; 2
            //    7 =&gt; 4
            //    8 =&gt; 4

            // copy only even keys with even items
            map = Maps.newSortedMap(
                new NumericComparator(),
                8, 4
            );
            dumpMap(map);
            //    8 =&gt; 4
            Maps.copy(source, map, evenFilter, evenFilter);
            dumpMap(map);
            //    4 =&gt; 2
            //    8 =&gt; 4
        }
        
        private function evenFilter(item :  : Boolean {
            return item % 2 == 0;
        }

        private function dumpMap(map : IMap) : void {
            var i : IMapIterator = map.iterator() as IMapIterator;
            while (i.next()) trace (i.key, "=&gt;", i.current);
            trace();
        }

    }
}
</listing></div>
	 
	 <p id="link_AddFromArgsExample"><strong><code>Maps.new...()</code> example</strong></p>
	 
	 <a class="exampleCollapsed" href="#link_AddFromArgsExample" onClick="toggleExample(this, 'AddFromArgsExample');">Show example</a><br /><div id="AddFromArgsExample" style='display:none'><listing version="3.0">package {
    import org.as3commons.collections.framework.
    import org.as3commons.collections.utils.
    import flash.display.Sprite;

    public class AddFromArgsExample extends Sprite {

        public function AddFromArgsExample() {
            // ArrayList
            var list : IList = Lists.newArrayList(
                1, 2, 3, 4, 5, 6, 7, 8
            );
            trace (list.toArray() + "n");
            // 1, 2, 3, 4, 5, 6, 7, 8
            
            // ArrayList
            list = Lists.newSortedList(
                new NumericComparator(),
                6, 3, 1, 5, 8, 2, 7, 4
            );
            trace (list.toArray() + "n");
            // 1, 2, 3, 4, 5, 6, 7, 8
            
            // Set
            var theSet : ISet = Sets.newSet(
                1, 2, 3, 4, 5, 6, 7, 8
            );
            trace (theSet.toArray() + "n");
            // 1, 2, 3, 4, 5, 6, 7, 8
            
            // LinkedSet
            theSet = Sets.newLinkedSet(
                1, 2, 3, 4, 5, 6, 7, 8
            );
            trace (theSet.toArray() + "n");
            // 1, 2, 3, 4, 5, 6, 7, 8
            
            // SortedSet
            theSet = Sets.newSortedSet(
                new NumericComparator(),
                6, 3, 1, 5, 8, 2, 7, 4
            );
            trace (theSet.toArray() + "n");
            // 1, 2, 3, 4, 5, 6, 7, 8
            
            // Map
            var map : IMap = Maps.newMap(
                "one", 1, "two", 2, "three", 3, "four", 4
            );
            trace (map.toArray() + "n");
            // 1, 4, 2, 3
            
            // LinkedMap
            map = Maps.newLinkedMap(
                "one", 1, "two", 2, "three", 3, "four", 4
            );
            trace (map.toArray() + "n");
            // 1, 2, 3, 4
            
            // SortedMap
            map = Maps.newSortedMap(
                new NumericComparator(),
                "one", 1, "two", 2, "three", 3, "four", 4
            );
            trace (map.toArray() + "n");
            // 1, 2, 3, 4
            
            // LinkedList
            var linkedList : ILinkedList = LinkedLists.newLinkedList(
                1, 2, 3, 4, 5, 6, 7, 8
            );
            trace (linkedList.toArray() + "n");
            // 1, 2, 3, 4, 5, 6, 7, 8
        }

    }
}
</listing></div>
	 
	 <p id="link_NestedCollectionsExample"><strong>Nested collections example</strong></p>
	 
	 <a class="exampleCollapsed" href="#link_NestedCollectionsExample" onClick="toggleExample(this, 'NestedCollectionsExample');">Show example</a><br /><div id="NestedCollectionsExample" style='display:none'><listing version="3.0">package {
    import org.as3commons.collections.ArrayList;
    import org.as3commons.collections.LinkedSet;
    import org.as3commons.collections.framework.IComparator;
    import org.as3commons.collections.utils.
    import flash.display.Sprite;

    public class NestedCollectionsExample extends Sprite {

        public function NestedCollectionsExample() {
            // nested array list
            var list : ArrayList = Lists.newArrayList(
                Lists.newArrayList(1, 2),
                Lists.newArrayList(
                    Lists.newArrayList(3, 4),
                    Lists.newArrayList(5, 6)
                ),
                Lists.newArrayList(7, 8),
                Lists.newArrayList(
                    Lists.newArrayList(9, 10),
                    Lists.newArrayList(11, 12)
                )
            );
            trace (CollectionUtils.dumpAsString(list));
            //    [object ArrayList]
            //    .......[object ArrayList]
            //    ..............1
            //    ..............2
            //    .......[object ArrayList]
            //    ..............[object ArrayList]
            //    .....................3
            //    .....................4
            //    ..............[object ArrayList]
            //    .....................5
            //    .....................6
            //    .......[object ArrayList]
            //    ..............7
            //    ..............8
            //    .......[object ArrayList]
            //    ..............[object ArrayList]
            //    .....................9
            //    .....................10
            //    ..............[object ArrayList]
            //    .....................11
            //    .....................12            
            
            // nested mixed collection
            var c : IComparator = new NumericComparator();
            var theSet : LinkedSet = Sets.newLinkedSet(
                Maps.newLinkedMap("one", 1, "two", 2),
                Lists.newArrayList(
                    Sets.newSortedSet(c, 4, 3),
                    LinkedLists.newLinkedList(5, 6)
                ),
                Lists.newSortedList(c, 8, 7),
                Lists.newArrayList(
                    Maps.newLinkedMap("nine", 9, "ten", 10),
                    Maps.newSortedMap(c, "twelve", 12, "eleven", 11)
                )
            );
            trace (CollectionUtils.dumpAsString(theSet));
            //    [object LinkedSet]
            //    .......[object LinkedMap]
            //    ..............1
            //    ..............2
            //    .......[object ArrayList]
            //    ..............[object SortedSet]
            //    .....................3
            //    .....................4
            //    ..............[object LinkedList]
            //    .....................5
            //    .....................6
            //    .......[object SortedList]
            //    ..............7
            //    ..............8
            //    .......[object ArrayList]
            //    ..............[object LinkedMap]
            //    .....................9
            //    .....................10
            //    ..............[object SortedMap]
            //    .....................11
            //    .....................12            
        }
    }
}
</listing></div>
	 
	 ]]></description>
<author><![CDATA[John Reeves 14.04.2011
	 ]]></author>
</classRec>
<method name='addFromArgs' fullname='org.as3commons.collections.utils:Maps/addFromArgs' isStatic='true' isFinal='false' isOverride='false'  param_names='map;args' param_types='org.as3commons.collections.framework:IMap;restParam' param_defaults='undefined;undefined' result_type='uint'>
<description><![CDATA[
		 Adds the given list of key-item-pairs to the specified map.
		 
		 <listing>
				Maps.addFromArgs(myMap, key1, item1, key2, item2, ...);
		 </listing>
		 
		 ]]></description>
<param><![CDATA[map The map to populate.
		 ]]></param>
<param><![CDATA[...args List of key-item-pairs to add to the map.
		 ]]></param>
<return><![CDATA[The number of items added to the map.
		 ]]></return>
</method>
<method name='addFromArray' fullname='org.as3commons.collections.utils:Maps/addFromArray' isStatic='true' isFinal='false' isOverride='false'  param_names='map;source' param_types='org.as3commons.collections.framework:IMap;Array' param_defaults='undefined;undefined' result_type='uint'>
<description><![CDATA[
		 Adds the contents of the given <code>Array</code> to the specified map.
		 
		 <p>The <code>Array</code> needs to be in a key-item-pair shape.</p>
		 
		 <p>The last <code>Array</code> element is skipped if the size of the Array is not even.</p>
		 
		 <listing>
				var array : Array = [key1, item1, key2, item2, ...];
				var count : uint = Maps.addFromArray(map, array);
		 </listing>
		 
		 ]]></description>
<param><![CDATA[map The map to populate.
		 ]]></param>
<param><![CDATA[source The <code>Array</code> to add from.
		 ]]></param>
<return><![CDATA[The number of items added to the map.
		 ]]></return>
</method>
<method name='addFromMap' fullname='org.as3commons.collections.utils:Maps/addFromMap' isStatic='true' isFinal='false' isOverride='false'  param_names='map;source' param_types='org.as3commons.collections.framework:IMap;org.as3commons.collections.framework:IMap' param_defaults='undefined;undefined' result_type='uint'>
<description><![CDATA[
		 Adds the contents of the given <code>IMap</code> to the specified map.
		 
		 <listing>
				var count : uint = Maps.addFromMap(map, sourceMap);
		 </listing>
		 
		 ]]></description>
<param><![CDATA[map The map to populate.
		 ]]></param>
<param><![CDATA[source The <code>IMap</code> to add from.
		 ]]></param>
<return><![CDATA[The number of items added to the map.
		 ]]></return>
</method>
<method name='addFromObject' fullname='org.as3commons.collections.utils:Maps/addFromObject' isStatic='true' isFinal='false' isOverride='false'  param_names='map;source' param_types='org.as3commons.collections.framework:IMap;Object' param_defaults='undefined;undefined' result_type='uint'>
<description><![CDATA[
		 Adds the contents of the given <code>Object</code> to the specified map.
		 
		 <listing>
				var count : uint = Maps.addFromObject(map, object);
		 </listing>
		 
		 ]]></description>
<param><![CDATA[map The map to populate.
		 ]]></param>
<param><![CDATA[source The <code>Object</code> to add from.
		 ]]></param>
<return><![CDATA[The number of items added to the map.
		 ]]></return>
</method>
<method name='clone' fullname='org.as3commons.collections.utils:Maps/clone' isStatic='true' isFinal='false' isOverride='false'  param_names='map;keyFilter;itemFilter' param_types='org.as3commons.collections.framework:IMap;Function;Function' param_defaults='undefined;null;null' result_type='org.as3commons.collections.framework:IMap'>
<description><![CDATA[
		 Clones the supplied <code>IMap</code> instance returning a new <code>IMap</code>
		 of the same type.
		 
		 <p>If filters are specified the resulting map only contains mappings that
		 meet the supplied predicates.<p>
		 
		 <p>The key filter function accepts the current key and returns a boolean
		 value (<code>true</code> if the key is accepted).</p>
		 
		 <listing>
			function keyFilter(key :  : Boolean {
				var accept : Boolean = false;
				// test the key
				return accept;
			}
					
			var clone : IMap = Maps.clone(map, keyFilter);
		 </listing>
		 
		 <p>The item filter function accepts the current item and returns a boolean
		 value (<code>true</code> if the item is accepted).</p>
		 
		 <listing>
			function itemFilter(item :  : Boolean {
				var accept : Boolean = false;
				// test the item
				return accept;
			}
					
			var clone : IMap = Maps.clone(map, keyFilter, itemFilter);
		 </listing>
		 
		 ]]></description>
<param><![CDATA[map The <code>IMap</code> instance to clone.
		 ]]></param>
<param><![CDATA[keyFilter Function which will be applied to each key in the source map.
		 ]]></param>
<param><![CDATA[itemFilter Function which will be applied to each item in the source map.
		 ]]></param>
<return><![CDATA[A new <code>IMap</code> instance.
		 ]]></return>
</method>
<method name='copy' fullname='org.as3commons.collections.utils:Maps/copy' isStatic='true' isFinal='false' isOverride='false'  param_names='source;destination;keyFilter;itemFilter' param_types='org.as3commons.collections.framework:IMap;org.as3commons.collections.framework:IMap;Function;Function' param_defaults='undefined;undefined;null;null' result_type='uint'>
<description><![CDATA[
		 Copies mappings from one to another map.
		 
		 <p>If filters are specified only mappings are copied that meet
		 the supplied predicates.<p>
		 
		 <p>The key filter function accepts the current key and returns a boolean
		 value (<code>true</code> if the key is accepted).</p>
		 
		 <listing>
			function keyFilter(key :  : Boolean {
				var accept : Boolean = false;
				// test the key
				return accept;
			}
					
			Maps.copy(sourceMap, destinationMap, keyFilter);
		 </listing>
		 
		 <p>The item filter function accepts the current item and returns a boolean
		 value (<code>true</code> if the item is accepted).</p>
		 
		 <listing>
			function itemFilter(item :  : Boolean {
				var accept : Boolean = false;
				// test the item
				return accept;
			}
					
			Maps.copy(sourceMap, destinationMap, keyFilter, itemFilter);
		 </listing>
		 
		 ]]></description>
<param><![CDATA[source The <code>IMap</code> instance to copy from.
		 ]]></param>
<param><![CDATA[destination The <code>IMap</code> to copy to.
		 ]]></param>
<param><![CDATA[keyFilter Function which will be applied to each key in the source map.
		 ]]></param>
<param><![CDATA[itemFilter Function which will be applied to each item in the source map.
		 ]]></param>
<return><![CDATA[The number of items copied to the map.
		 ]]></return>
</method>
<method name='itemForOrAdd' fullname='org.as3commons.collections.utils:Maps/itemForOrAdd' isStatic='true' isFinal='false' isOverride='false'  param_names='map;key;item' param_types='org.as3commons.collections.framework:IMap;*;*' param_defaults='undefined;undefined;undefined' result_type='*'>
<description><![CDATA[
		 Attempts to retrieve the item mapped to the supplied key.
		 
		 <p>If the supplied key is not mapped then the supplied value will mapped to the key and returned.</p>
		 
		 ]]></description>
<param><![CDATA[map the IMap instance to operate on.
		 ]]></param>
<param><![CDATA[key the key to perform the lookup using.
		 ]]></param>
<param><![CDATA[item	if no mapping exists for the supplied key a new mapping will be added between the key and 
		 this value.
		 ]]></param>
<return><![CDATA[if a prior mapping exists for the supplied key then the assosiated value in the map will be 
		 returned; if no prior mapping exists the supplied value will be returned instead. 
		 ]]></return>
</method>
<method name='itemForOrError' fullname='org.as3commons.collections.utils:Maps/itemForOrError' isStatic='true' isFinal='false' isOverride='false'  param_names='map;key;errorMessage' param_types='org.as3commons.collections.framework:IMap;*;String' param_defaults='undefined;undefined;null' result_type='*'>
<description><![CDATA[
		 Attempts to retrieve the item mapped to the supplied key.
		 
		 <p>If the supplied key is not mapped an ArgumentError will be thrown.</p>
		 		 ]]></description>
<param><![CDATA[map the IMap instance to operate on. 
		 ]]></param>
<param><![CDATA[key the key to perform the lookup using.
		 ]]></param>
<param><![CDATA[errorMessage optional error message which will be used if an Error needs to be thrown.
		 ]]></param>
<return><![CDATA[the item mapped to the supplied key.
		 ]]></return>
<throws><![CDATA[ArgumentError if no mapping exists for the supplied key.
		 ]]></throws>
</method>
<method name='itemForOrValue' fullname='org.as3commons.collections.utils:Maps/itemForOrValue' isStatic='true' isFinal='false' isOverride='false'  param_names='map;key;defaultValue' param_types='org.as3commons.collections.framework:IMap;*;*' param_defaults='undefined;undefined;undefined' result_type='*'>
<description><![CDATA[
		 Attempts to retrieve the item mapped to the supplied key.
		 
		 <p>If the supplied key is not mapped then the supplied default value
		 will be returned instead.</p>
		 
		 ]]></description>
<param><![CDATA[map the IMap instance to operate on.
		 ]]></param>
<param><![CDATA[key the key to perform the lookup using.
		 ]]></param>
<param><![CDATA[defaultValue the value to return if the supplied key does not exist in the supplied Map.
		 ]]></param>
<return><![CDATA[if the supplied key exists in the map then the value mapped to that key will be  returned, otherwise 
		 the supplied defaultValue will be returned instead. 
		 ]]></return>
</method>
<method name='newLinkedMap' fullname='org.as3commons.collections.utils:Maps/newLinkedMap' isStatic='true' isFinal='false' isOverride='false'  param_names='args' param_types='restParam' param_defaults='undefined' result_type='org.as3commons.collections:LinkedMap'>
<description><![CDATA[
		 Creates, populates and returns a new <code>LinkedMap</code> instance.
		 
		 <p>The arguments may be left out. In that case no item is added to the map.</p>
		 
		 <p>The last argument is skipped if the size of arguments is not even.</p>
		 
		 <listing>
				var map : Map = Maps.newLinkedMap(key1, item1, key2, item2, ...);
		 </listing>
		 
		 ]]></description>
<param><![CDATA[...args List of key-item-pairs to add to the map.
		 ]]></param>
<return><![CDATA[A new <code>LinkedMap</code> instance populated from the given arguments.
		 ]]></return>
</method>
<method name='newMap' fullname='org.as3commons.collections.utils:Maps/newMap' isStatic='true' isFinal='false' isOverride='false'  param_names='args' param_types='restParam' param_defaults='undefined' result_type='org.as3commons.collections:Map'>
<description><![CDATA[
		 Creates, populates and returns a new <code>Map</code> instance.
		 
		 <p>The arguments may be left out. In that case no item is added to the map.</p>
		 
		 <p>The last argument is skipped if the size of arguments is not even.</p>
		 
		 <listing>
				var map : Map = Maps.newMap(key1, item1, key2, item2, ...);
		 </listing>
		 
		 ]]></description>
<param><![CDATA[...args List of key-item-pairs to add to the map.
		 ]]></param>
<return><![CDATA[A new <code>Map</code> instance populated from the given arguments.
		 ]]></return>
</method>
<method name='newSortedMap' fullname='org.as3commons.collections.utils:Maps/newSortedMap' isStatic='true' isFinal='false' isOverride='false'  param_names='comparator;args' param_types='org.as3commons.collections.framework:IComparator;restParam' param_defaults='undefined;undefined' result_type='org.as3commons.collections:SortedMap'>
<description><![CDATA[
		 Creates, populates and returns a new <code>SortedMap</code> instance.
		 
		 <p>The arguments may be left out. In that case no item is added to the map.</p>
		 
		 <p>The last argument is skipped if the size of arguments is not even.</p>
		 
		 <listing>
				var map : Map = Maps.newSortedMap(key1, item1, key2, item2, ...);
		 </listing>
		 
		 ]]></description>
<param><![CDATA[comparator The sort criterion.
		 ]]></param>
<param><![CDATA[...args List of key-item-pairs to add to the map.
		 ]]></param>
<return><![CDATA[A new <code>SortedMap</code> instance populated from the given arguments.
		 ]]></return>
</method>
<packageRec name='org.as3commons.collections.utils.null' fullname='org.as3commons.collections.utils.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<classRec name='LinkedLists' fullname='org.as3commons.collections.utils:LinkedLists' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\utils\LinkedLists.as' namespace='org.as3commons.collections.utils' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 <code>ILinkedList</code> utilities.
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 21.04.2011
	 ]]></author>
</classRec>
<method name='addFromArgs' fullname='org.as3commons.collections.utils:LinkedLists/addFromArgs' isStatic='true' isFinal='false' isOverride='false'  param_names='list;args' param_types='org.as3commons.collections.framework:ILinkedList;restParam' param_defaults='undefined;undefined' result_type='uint'>
<description><![CDATA[
		 Adds the given list of items to the specified list.
		 
		 <listing>
				LinkedLists.addFromArgs(myList, item1, item2, ...);
		 </listing>
		 
		 ]]></description>
<param><![CDATA[list The list to populate.
		 ]]></param>
<param><![CDATA[...args List of items to add to the list.
		 ]]></param>
<return><![CDATA[The number of items added to the list.
		 ]]></return>
</method>
<method name='addFromArray' fullname='org.as3commons.collections.utils:LinkedLists/addFromArray' isStatic='true' isFinal='false' isOverride='false'  param_names='list;source' param_types='org.as3commons.collections.framework:ILinkedList;Array' param_defaults='undefined;undefined' result_type='uint'>
<description><![CDATA[
		 Adds the contents of the given <code>Array</code> to the specified list.
		 
		 <listing>
				var array : Array = [item1, item2, ...];
				var count : uint = LinkedLists.addFromArray(list, array);
		 </listing>
		 
		 ]]></description>
<param><![CDATA[list The list to populate.
		 ]]></param>
<param><![CDATA[source The <code>Array</code> to add from.
		 ]]></param>
<return><![CDATA[The number of items added to the list.
		 ]]></return>
</method>
<method name='addFromCollection' fullname='org.as3commons.collections.utils:LinkedLists/addFromCollection' isStatic='true' isFinal='false' isOverride='false'  param_names='list;source' param_types='org.as3commons.collections.framework:ILinkedList;org.as3commons.collections.framework:ICollection' param_defaults='undefined;undefined' result_type='uint'>
<description><![CDATA[
		 Adds the contents of the given <code>ICollection</code> to the specified list.
		 
		 <listing>
				var count : uint = LinkedLists.addFromCollection(list, sourceCollection);
		 </listing>
		 
		 ]]></description>
<param><![CDATA[list The list to populate.
		 ]]></param>
<param><![CDATA[source The <code>ICollection</code> to add from.
		 ]]></param>
<return><![CDATA[The number of items added to the list.
		 ]]></return>
</method>
<method name='clone' fullname='org.as3commons.collections.utils:LinkedLists/clone' isStatic='true' isFinal='false' isOverride='false'  param_names='list;filter' param_types='org.as3commons.collections.framework:ILinkedList;Function' param_defaults='undefined;null' result_type='org.as3commons.collections.framework:ILinkedList'>
<description><![CDATA[
		 Clones the supplied <code>ILinkedList</code> instance returning a new <code>ILinkedList</code>
		 of the same type.
		 
		 <p>If a filter is specified the resulting list only contains items that
		 meet the supplied predicates.<p>
		 
		 <p>The filter function accepts the current item and returns a boolean
		 value (<code>true</code> if the item is accepted).</p>
		 
		 <listing>
			function itemFilter(item :  : Boolean {
				var accept : Boolean = false;
				// test the item
				return accept;
			}
					
			var list : ILinkedList = LinkedLists.clone(list, filter);
		 </listing>
		 
		 ]]></description>
<param><![CDATA[list The <code>ILinkedList</code> instance to clone.
		 ]]></param>
<param><![CDATA[filter Function which will be applied to each item in the source list.
		 ]]></param>
<return><![CDATA[A new <code>ILinkedList</code> instance.
		 ]]></return>
</method>
<method name='copy' fullname='org.as3commons.collections.utils:LinkedLists/copy' isStatic='true' isFinal='false' isOverride='false'  param_names='source;destination;filter' param_types='org.as3commons.collections.framework:ILinkedList;org.as3commons.collections.framework:ILinkedList;Function' param_defaults='undefined;undefined;null' result_type='uint'>
<description><![CDATA[
		 Copies items from one list to another.
		 
		 <p>If a filter is specified only items are copied that meet the
		 supplied predicates.<p>
		 
		 <p>The filter function accepts the current item and returns a boolean
		 value (<code>true</code> if the item is accepted).</p>
		 
		 <listing>
			function itemFilter(item :  : Boolean {
				var accept : Boolean = false;
				// test the item
				return accept;
			}
					
			LinkedLists.copy(sourceList, destinationList, filter);
		 </listing>
		 
		 ]]></description>
<param><![CDATA[source The <code>ILinkedList</code> instance to copy from.
		 ]]></param>
<param><![CDATA[destination The <code>ILinkedList</code> to copy to.
		 ]]></param>
<param><![CDATA[filter Function which will be applied to each item in the source list.
		 ]]></param>
<return><![CDATA[The number of items copied to the list.
		 ]]></return>
</method>
<method name='newLinkedList' fullname='org.as3commons.collections.utils:LinkedLists/newLinkedList' isStatic='true' isFinal='false' isOverride='false'  param_names='args' param_types='restParam' param_defaults='undefined' result_type='org.as3commons.collections:LinkedList'>
<description><![CDATA[
		 Creates, populates and returns a new <code>LinkedList</code> instance.
		 
		 <p>The arguments may be left out. In that case no item is added to the list.</p>
		 
		 <listing>
				var list : LinkedList = LinkedLists.newLinkedList(item1, item2, ...);
		 </listing>
		 
		 ]]></description>
<param><![CDATA[...args List of items to add to the list.
		 ]]></param>
<return><![CDATA[A new <code>LinkedList</code> instance populated from the given arguments.
		 ]]></return>
</method>
<packageRec name='org.as3commons.collections.utils.null' fullname='org.as3commons.collections.utils.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<classRec name='LinkedListBuilder' fullname='org.as3commons.collections.utils:LinkedListBuilder' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\utils\LinkedListBuilder.as' namespace='org.as3commons.collections.utils' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 LinkedList builder using the builder pattern.
	 
	 <p>Uses the builder Pattern to simplify the creation of new <code>ILinkedList</code> instances
	 in a fluent fashion.</p>
	  
	 <p>Example: Creating a new <code>LinkedList</code> instance using LinkedListBuilder.</p>
	 
	 <listing>
	 		const result : ILinkedList = LinkedListBuilder.newLinkedList()
	 			.add("item-one")
	 			.add("item-two")
	 			.build();
	 		
	 		// Creates the following list: { item-one, item-two }
	 		trace(result);
	 </listing>;
	 
	 ]]></description>
<author><![CDATA[John Reeves 14.04.2011
	 ]]></author>
</classRec>
<method name='LinkedListBuilder' fullname='org.as3commons.collections.utils:LinkedListBuilder/LinkedListBuilder' isStatic='false' isFinal='false' isOverride='false'  param_names='underlyingLinkedList' param_types='org.as3commons.collections.framework:ILinkedList' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 Please make use of one of the static factory methods for creating a new <code>LinkedListBuilder</code> instance.
		 
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='add' fullname='org.as3commons.collections.utils:LinkedListBuilder/add' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='org.as3commons.collections.utils:LinkedListBuilder'>
<description><![CDATA[
		 Adds the supplied item to the <code>ILinkedList</code> under construction.
		 
		 <p>Returns a reference to this <code>LinkedListBuilder</code> instance.</p>
		 
		 ]]></description>
<param><![CDATA[item to add to the <code>ILinkedList</code> instance under construction.
		 ]]></param>
<return><![CDATA[A reference to this <code>LinkedListBuilder</code> instance to allow method chaining.
		 ]]></return>
</method>
<method name='build' fullname='org.as3commons.collections.utils:LinkedListBuilder/build' isStatic='false' isFinal='false' isOverride='false'  result_type='org.as3commons.collections.framework:ILinkedList'>
<description><![CDATA[
		 Completes construction.
		 ]]></description>
</method>
<method name='newLinkedList' fullname='org.as3commons.collections.utils:LinkedListBuilder/newLinkedList' isStatic='true' isFinal='false' isOverride='false'  result_type='org.as3commons.collections.utils:LinkedListBuilder'>
<description><![CDATA[
		 Starts construction of a new <code>LinkedList</code> instance.
		 
		 ]]></description>
<return><![CDATA[A <code>LinkedListBuilder</code> instance which will build and return an instance of <code>LinkedList</code>
		 ]]></return>
</method>
<field name='_list' fullname='org.as3commons.collections.utils:LinkedListBuilder/private:_list' type='org.as3commons.collections.framework:ILinkedList' isStatic='false' isConst='false' >
<description><![CDATA[
		 Backing <code>ILinkedList</code> instance.
		 ]]></description>
</field>
<packageRec name='org.as3commons.collections.fx.events.null' fullname='org.as3commons.collections.fx.events.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<classRec name='CollectionEvent' fullname='org.as3commons.collections.fx.events:CollectionEvent' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\fx\events\CollectionEvent.as' namespace='org.as3commons.collections.fx.events' access='public' baseclass='flash.events:Event' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Bindable collection base event.
	 
	 <p><strong>Description</strong></p>
	 
	 <p>The <code>CollectionEvent</code> is the base class of all events dispatched
	 by the bindable collections in this library.</p>
	 
	 <p>A collection event is either an atomic or a bulk change notification.</p>
	 
	 <p>Atomic changes are dispatched after items have been added, removed or replaced.
	 Atomic change notifications enable a listener to incrementally update its
	 internal representation of the collection's state. To locate the position
	 of an insertion, removal or replace operation, the collection event is
	 equipped with a preinitialised iterator which points to the affected item
	 (insert, replace) or its successor (remove).</p>
	 
	 <p>Bulk changes are dispatched after drastical modifications that can not be expressed
	 in atomic insertion, removal or replacement events (clear, sort, reverse). Bulk change notifications
	 require the listener to fully update its internal representation of the collection's state.
	 A bulk notification does not provide an event iterator.</p>
	 
	 <p><strong>Features</strong></p>
	 
	 <p>A collection event consists of a set of useful properties to reconstruct and reflect
	 the modifications made to a collection.</p>
	 
	 <ul>
	 <li><code>kind</code> - The particular kind of the change.</li>
	 <li><code>numItems</code> - The number of items affected (added, removed, replaced).</li>
	 <li><code>item</code> - The item that has been added, removed or the replacing item (if single item) or<br />
	 <code>items</code> - The items that have been added or removed (if multiple items).</li>
	 <li><code>iterator()</code> - An iterator pointing to the position of the add, remove or replace
	 operation.</li>
	 </ul>
	 
	 <p><strong>Event kinds</strong></p>
	 
	 <p>A collection event has only one event type <code>CollectionEvent.COLLECTION_CHANGED</code>.
	 The kind of the event can be distinguished by the event <code>kind</code> property.</p>
	 
	 <ul>
	 <li><code>CollectionEvent.ITEM_ADDED</code> - An item (or a number of items) has been added.</li>
	 <li><code>CollectionEvent.ITEM_REPLACED</code> - The item a specific position has been replaced.</li>
	 <li><code>CollectionEvent.ITEM_REMOVED</code> - An item (or a number of items) has been removed.</li>
	 <li><code>CollectionEvent.RESET</code> - The collection has been changed so drastically that atomic add,
	 replace or remove events do not suffice (clear, sort, reverse or any other reset).</li>
	 </ul>
	 
	 <p><strong><code>CollectionEvent</code> subclasses</strong></p>
	 
	 <p>To reflect its particular semantic, each bindable collection dispatch its custom specialised
	 form of the <code>CollectionEvent</code>. The custom events add distinctive access properties
	 such as index, item or key. You need to downcast the general CollectionEvent to the event type
	 of the particular collection to access the additional properties.</p>
	 
	 <p><strong>Event iterator</strong></p>
	 
	 <p>The iterator returned by this event's <code>iterator()</code> method has always the same type as
	 the iterator returned by the iterator returned by the event dispatching collection's
	 <code>iterator()</code> method and can be safely downcasted to this interface.</p>
	 
	 <p id="link_CollectionEventDowncastExample"><strong>Event downcast example</strong></p>
	 
	 <a class="exampleCollapsed" href="#link_CollectionEventDowncastExample" onClick="toggleExample(this, 'CollectionEventDowncastExample');">Show example</a><br /><div id="CollectionEventDowncastExample" style='display:none'><listing version="3.0">package {
    import org.as3commons.collections.fx.ArrayListFx;
    import org.as3commons.collections.fx.events.CollectionEvent;
    import org.as3commons.collections.fx.events.ListEvent;
    import flash.display.Sprite;

    public class CollectionEventDowncastExample extends Sprite {

        public function CollectionEventDowncastExample() {
            var list : ArrayListFx = new ArrayListFx();
            list.addEventListener(CollectionEvent.COLLECTION_CHANGED, changedHandler);
            list.addEventListener(CollectionEvent.COLLECTION_CHANGED, changedHandler2);
            list.add(1);
        }
        
        // possibility 1
        private function changedHandler(e : CollectionEvent) : void {
            var listEvent : ListEvent = e as ListEvent;
            trace (listEvent.index, listEvent.item); // 0 1
        }

        // possibility 2
        private function changedHandler2(e : ListEvent) : void {
            trace (e.index, e.item); // 0 1
        }
    }
}
</listing></div>
	 
	 <p id="link_CollectionEventIteratorExample"><strong>Event iterator example</strong></p>
	 
	 <a class="exampleCollapsed" href="#link_CollectionEventIteratorExample" onClick="toggleExample(this, 'CollectionEventIteratorExample');">Show example</a><br /><div id="CollectionEventIteratorExample" style='display:none'><listing version="3.0">package {
    import org.as3commons.collections.framework.IListIterator;
    import org.as3commons.collections.fx.ArrayListFx;
    import org.as3commons.collections.fx.events.CollectionEvent;
    import flash.display.Sprite;

    public class CollectionEventIteratorExample extends Sprite {

        public function CollectionEventIteratorExample() {
            var list : ArrayListFx = new ArrayListFx();
            list.array = [1, 2, 4, 5];
            list.addEventListener(CollectionEvent.COLLECTION_CHANGED, changedHandler);

            list.addAt(2, 3); // 1, 2, 3, 4, 5
            list.replaceAt(3, 6); // 1, 2, 3, 6, 5
            list.removeAt(4); // 1, 2, 3, 6
            list.reverse(); // 6, 3, 2, 1
        }
        
        private function changedHandler(event : CollectionEvent) : void {
            var iterator : IListIterator = event.iterator() as IListIterator;
            
            switch (event.kind) {
                case CollectionEvent.ITEM_ADDED: // 1 2 ^ 3 4 5
                    trace (iterator.previousIndex); // 1
                    trace (iterator.nextIndex); // 2
                    trace (iterator.next()); // 3
                    break;

                case CollectionEvent.ITEM_REPLACED: // 1 2 3 ^ 6 5
                    trace (iterator.previousIndex); // 2
                    trace (iterator.nextIndex); // 3
                    trace (iterator.next()); // 6
                    break;

                case CollectionEvent.ITEM_REMOVED: // 1 2 3 6 ^
                    trace (iterator.previousIndex); // 3
                    trace (iterator.nextIndex); // -1
                    trace (iterator.next()); // undefined
                    break;

                case CollectionEvent.RESET:
                    trace (iterator); // null
                    break;
            }
        }
    }
}
</listing></div>
	 
	 <p id="link_CollectionEventIteratorDownCastExample"><strong>Event iterator downcast example</strong></p>
	 
	 <a class="exampleCollapsed" href="#link_CollectionEventIteratorDownCastExample" onClick="toggleExample(this, 'CollectionEventIteratorDownCastExample');">Show example</a><br /><div id="CollectionEventIteratorDownCastExample" style='display:none'><listing version="3.0">package {
    import org.as3commons.collections.framework.ICollectionIterator;
    import org.as3commons.collections.framework.IIterator;
    import org.as3commons.collections.framework.IListIterator;
    import org.as3commons.collections.framework.IOrderedListIterator;
    import org.as3commons.collections.fx.ArrayListFx;
    import org.as3commons.collections.fx.events.CollectionEvent;
    import flash.display.Sprite;

    public class CollectionEventIteratorDownCastExample extends Sprite {

        public function CollectionEventIteratorDownCastExample() {
            var list : ArrayListFx = new ArrayListFx();
            list.addEventListener(CollectionEvent.COLLECTION_CHANGED, changedHandler);
            list.add(1);
        }
        
        private function changedHandler(event : CollectionEvent) : void {
            var i : IIterator = event.iterator() as IIterator;
            
            trace ("i", i is IIterator); // true
            trace ("ci", i is ICollectionIterator); // true
            trace ("li", i is IListIterator); // true
            trace ("ali", i is IOrderedListIterator); // true
            
            var ci : ICollectionIterator = event.iterator() as ICollectionIterator;

            trace ("i", ci is IIterator); // true
            trace ("ci", ci is ICollectionIterator); // true
            trace ("li", ci is IListIterator); // true
            trace ("ali", ci is IOrderedListIterator); // true

            var li : IListIterator = event.iterator() as IListIterator;

            trace ("i", li is IIterator); // true
            trace ("ci", li is ICollectionIterator); // true
            trace ("li", li is IListIterator); // true
            trace ("ali", li is IOrderedListIterator); // true

            var ali : IOrderedListIterator = event.iterator() as IOrderedListIterator;

            trace ("i", ali is IIterator); // true
            trace ("ci", ali is ICollectionIterator); // true
            trace ("li", ali is IListIterator); // true
            trace ("ali", ali is IOrderedListIterator); // true
        }
    }
}
</listing></div>
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 01.03.2010
	 ]]></author>
</classRec>
<method name='CollectionEvent' fullname='org.as3commons.collections.fx.events:CollectionEvent/CollectionEvent' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 CollectionEvent constructor.
		 ]]></description>
</method>
<method name='iterator' fullname='org.as3commons.collections.fx.events:CollectionEvent/iterator' isStatic='false' isFinal='false' isOverride='false'  result_type='org.as3commons.collections.framework:ICollectionIterator'>
<description><![CDATA[
		 Returns an iterator pointing to the position of the affected item.
		 
		 <p>Only set for the event kinds <code>CollectionEvent.ITEM_ADDED</code>,
		 <code>CollectionEvent.ITEM_REPLACED</code>, <code>CollectionEvent.ITEM_REMOVED</code>.</p>
		 
		 ]]></description>
<return><![CDATA[An <code>ICollectionIterator</code> pointing to the position of the last
		 change or <code>null</code> if the event kind is <code>CollectionEvent.RESET</code>.
		 ]]></return>
</method>
<field name='COLLECTION_CHANGED' fullname='org.as3commons.collections.fx.events:CollectionEvent/COLLECTION_CHANGED' type='String' isStatic='true' isConst='false' defaultValue='collectionChanged' >
<description><![CDATA[
		 Event type of all collection events.
		 
		 <p>Dispatched after all modifications of the collection.</p>
		 
		 <table class="innertable">
		 
		 <tr>
		 <th>Property</th>
		 <th>Value</th>
		 </tr>
		 
		 <tr>
		 <td>type</td>
		 <td>CollectionEvent.COLLECTION_CHANGED</td>
		 </tr>
		 
		 <tr>
		 <td>kind</td>
		 <td>CollectionEvent.ITEM_ADDED - Item (or items) has been added.<br />
		 CollectionEvent.ITEM_REPLACED - Item has been replaced.<br />
		 CollectionEvent.ITEM_REMOVED - Item (or items) has been removed.<br />
		 CollectionEvent.RESET - Collection has changed drastically.</td>
		 </tr>
		 
		 <tr>
		 <td>item<br />
		 items</td>
		 <td>The item that has been added, removed or the replacing item (singular operation).<br />
		 The items that have been added or removed (bulk operation).</td>
		 </tr>
		 
		 <tr>
		 <td>numItems</td>
		 <td>The number of items added, removed or replaced.</td>
		 </tr>
		 
		 <tr>
		 <td>iterator()</td>
		 <td>Iterator pointing to the position of an insertion, replacement or removal operation.</td>
		 </tr>
		 
		 <tr>
		 <th colspan="2">ListEvent</th>
		 </tr>
		 
		 <tr>
		 <td>list<br />
		 index</td>
		 <td>The event dispatching list.<br />
		 The position of the item added, removed or replacing.</td>
		 </tr>
		 
		 <tr>
		 <th colspan="2">SetEvent</th>
		 </tr>
		 
		 <tr>
		 <td>set</td>
		 <td>The event dispatching set.</td>
		 </tr>
		 
		 <tr>
		 <th colspan="2">MapEvent</th>
		 </tr>
		 
		 <tr>
		 <td>map<br />
		 key</td>
		 <td>The event dispatching map.<br />
		 The key of the item added, removed or replacing.</td>
		 </tr>
		 
		 </table>
		 
		 ]]></description>
<eventType><![CDATA[collectionChanged
		 ]]></eventType>
</field>
<field name='ITEM_ADDED' fullname='org.as3commons.collections.fx.events:CollectionEvent/ITEM_ADDED' type='String' isStatic='true' isConst='false' defaultValue='itemAdded' >
<description><![CDATA[
		 Event kind of an item insertion event.
		 
		 <p>Dispatched after a single item or a list of items have been added
		 at a specific position.</p>
		 ]]></description>
</field>
<field name='ITEM_REMOVED' fullname='org.as3commons.collections.fx.events:CollectionEvent/ITEM_REMOVED' type='String' isStatic='true' isConst='false' defaultValue='itemRemoved' >
<description><![CDATA[
		 Event kind of an item removal event.
		 
		 <p>Dispatched after a single item or a number of items have been removed
		 from a specific position.</p>
		 ]]></description>
</field>
<field name='ITEM_REPLACED' fullname='org.as3commons.collections.fx.events:CollectionEvent/ITEM_REPLACED' type='String' isStatic='true' isConst='false' defaultValue='itemReplaced' >
<description><![CDATA[
		 Event kind of an item replacement event.
		 
		 <p>Dispatched after the item at a specific position has been replaced.</p>
		 ]]></description>
</field>
<field name='RESET' fullname='org.as3commons.collections.fx.events:CollectionEvent/RESET' type='String' isStatic='true' isConst='false' defaultValue='reset' >
<description><![CDATA[
		 Event kind of collection reset events.
		 
		 <p>Dispatched if the collection has been changed completely. E.g. after all
		 items have been removed <code>clear()</code> or the underlying data source
		 has been replaced <code>arrayList.array = newArray;</code> or multiple modification
		 have been made in one step (<code>reverse(), sort()</code>).</p>
		 ]]></description>
</field>
<field name='item' fullname='org.as3commons.collections.fx.events:CollectionEvent/item' type='' isStatic='false' isConst='false' >
<description><![CDATA[
		 The affected item.
		 
		 <p>Only set for the event kinds <code>CollectionEvent.ITEM_ADDED</code>,
		 <code>CollectionEvent.ITEM_REPLACED</code>, ITEM_REMOVED.</p>
		 
		 <p>Only set if the event is a result of a singular modification such as
		 <code>add(), addAt(), replaceAt(), remove(), removeAt()</code> and not after
		 bulk operations such as <code>addAllAt(), removeAllAt()</code>. In the latter
		 case, the property <code>items</code> is set instead.</p>
		 ]]></description>
</field>
<field name='items' fullname='org.as3commons.collections.fx.events:CollectionEvent/items' type='Array' isStatic='false' isConst='false' >
<description><![CDATA[
		 The affected items.
		 
		 <p>Only set for the event kinds <code>CollectionEvent.ITEM_ADDED</code>,
		 <code>CollectionEvent.ITEM_REPLACED</code>, <code>CollectionEvent.ITEM_REMOVED</code>.</p>
		 
		 <p>Only set if the event is a result of a bulk operation such as <code>addAllAt(),
		 removeAllAt()</code> and not after a singular modification such as <code>add(), addAt(),
		 replaceAt(), remove(), removeAt()</code>. In the latter case, the property <code>item</code>
		 is set instead.</p>
		 ]]></description>
</field>
<field name='kind' fullname='org.as3commons.collections.fx.events:CollectionEvent/kind' type='String' isStatic='false' isConst='false' >
<description><![CDATA[
		 The event kind.
		 ]]></description>
</field>
<field name='numItems' fullname='org.as3commons.collections.fx.events:CollectionEvent/numItems' type='int' isStatic='false' isConst='false' >
<description><![CDATA[
		 Number of added or removed items.
		 
		 <p>Only set for the event kinds <code>CollectionEvent.ITEM_ADDED</code>,
		 <code>CollectionEvent.ITEM_REPLACED</code>, <code>CollectionEvent.ITEM_REMOVED</code>.</p>
		 
		 <p><code>-1</code> if the event kind is <code>CollectionEvent.RESET</code>.</p>
		 ]]></description>
</field>
<packageRec name='org.as3commons.collections.fx.events.null' fullname='org.as3commons.collections.fx.events.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<classRec name='SetEvent' fullname='org.as3commons.collections.fx.events:SetEvent' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\fx\events\SetEvent.as' namespace='org.as3commons.collections.fx.events' access='public' baseclass='org.as3commons.collections.fx.events:CollectionEvent' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Bindable set event.
	 
	 <p><strong>Features</strong></p>
	 
	 <p>The <code>SetEvent</code> provides additionally to the base collection event:</p>
	 
	 <ul>
	 <li>Reference to the bindable set.<br />
	 <code>set</code></li>
	 <li>An <code>ISetIterator</code><br />
	 <code>iterator()</code></li>	 </ul>
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 29.03.2010
	 ]]></author>
<see><![CDATA[CollectionEvent CollectionEvent - Description of the base collection event properties.
	 ]]></see>
</classRec>
<method name='SetEvent' fullname='org.as3commons.collections.fx.events:SetEvent/SetEvent' isStatic='false' isFinal='false' isOverride='false'  param_names='theKind;theSet;theItem' param_types='String;org.as3commons.collections.framework:ISet;*' param_defaults='undefined;undefined;unknown' result_type='*'>
<description><![CDATA[
		 SetEvent constructor.
		 
		 ]]></description>
<param><![CDATA[theKind The event kind.
		 ]]></param>
<param><![CDATA[theSet The set.
		 ]]></param>
<param><![CDATA[theItem The affected item in a singular operation.
		 ]]></param>
</method>
<field name='set' fullname='org.as3commons.collections.fx.events:SetEvent/set' type='org.as3commons.collections.framework:ISet' isStatic='false' isConst='false' >
<description><![CDATA[
		 The bindable set.
		 ]]></description>
</field>
<packageRec name='org.as3commons.collections.fx.events.null' fullname='org.as3commons.collections.fx.events.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<classRec name='ListEvent' fullname='org.as3commons.collections.fx.events:ListEvent' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\fx\events\ListEvent.as' namespace='org.as3commons.collections.fx.events' access='public' baseclass='org.as3commons.collections.fx.events:CollectionEvent' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Bindable list event.
	 
	 <p><strong>Features</strong></p>
	 
	 <p>The <code>ListEvent</code> provides additionally to the base collection event:</p>
	 
	 <ul>
	 <li>Reference to the bindable list.<br />
	 <code>list</code></li>
	 <li>Index of the affected item or items in insertion or removal operations.<br />
	 <code>index</code></li>
	 <li>An <code>IListIterator</code><br />
	 <code>iterator()</code></li>
	 </ul>
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 01.03.2010
	 ]]></author>
<see><![CDATA[CollectionEvent CollectionEvent - Description of the base collection event properties.
	 ]]></see>
</classRec>
<method name='ListEvent' fullname='org.as3commons.collections.fx.events:ListEvent/ListEvent' isStatic='false' isFinal='false' isOverride='false'  param_names='theKind;theList;theIndex;theNumItems;theItem;theItems' param_types='String;org.as3commons.collections.framework:IList;int;int;*;Array' param_defaults='undefined;undefined;-1;-1;unknown;unknown' result_type='*'>
<description><![CDATA[
		 ArrayListEvent constructor.
		 
		 ]]></description>
<param><![CDATA[theKind The event kind.
		 ]]></param>
<param><![CDATA[theList The list.
		 ]]></param>
<param><![CDATA[theIndex The position of modification.
		 ]]></param>
<param><![CDATA[theNumItems The number of affected items.
		 ]]></param>
<param><![CDATA[theItem The affected item in a singular operation.
		 ]]></param>
<param><![CDATA[theItems The affected items in a bulk operation.
		 ]]></param>
</method>
<method name='iterator' fullname='org.as3commons.collections.fx.events:ListEvent/iterator' isStatic='false' isFinal='false' isOverride='true'  result_type='org.as3commons.collections.framework:ICollectionIterator'>
<description><![CDATA[
		 
		 Returns an iterator pointing to the position of the affected item.
		 
		 <p>Only set for the event kinds <code>CollectionEvent.ITEM_ADDED</code>,
		 <code>CollectionEvent.ITEM_REPLACED</code>, <code>CollectionEvent.ITEM_REMOVED</code>.</p>
		 
		 ]]></description>
<return><![CDATA[An <code>ICollectionIterator</code> pointing to the position of the last
		 change or <code>null</code> if the event kind is <code>CollectionEvent.RESET</code>.
		 ]]></return>
</method>
<field name='index' fullname='org.as3commons.collections.fx.events:ListEvent/index' type='int' isStatic='false' isConst='false' >
<description><![CDATA[
		 The index where the modification occurred.
		 
		 <p>Only set for the event kinds <code>CollectionEvent.ITEM_ADDED</code>,
		 <code>CollectionEvent.ITEM_REPLACED</code>, <code>CollectionEvent.ITEM_REMOVED</code>.</p>
		 
		 <p><code>-1</code> if the event kind is <code>CollectionEvent.RESET</code>.</p>
		 ]]></description>
</field>
<field name='list' fullname='org.as3commons.collections.fx.events:ListEvent/list' type='org.as3commons.collections.framework:IList' isStatic='false' isConst='false' >
<description><![CDATA[
		 The bindable list.
		 ]]></description>
</field>
<packageRec name='org.as3commons.collections.fx.events.null' fullname='org.as3commons.collections.fx.events.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<classRec name='MapEvent' fullname='org.as3commons.collections.fx.events:MapEvent' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\fx\events\MapEvent.as' namespace='org.as3commons.collections.fx.events' access='public' baseclass='org.as3commons.collections.fx.events:CollectionEvent' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Bindable map event.
	 
	 <p><strong>Features</strong></p>
	 
	 <p>The <code>MapEvent</code> provides additionally to the base collection event:</p>
	 
	 <ul>
	 <li>Reference to the bindable map.<br />
	 <code>map</code></li>
	 <li>Key of the affected item in insertion or removal operations.<br />
	 <code>key</code></li>
	 <li>An <code>IMapIterator</code><br />
	 <code>iterator()</code></li>
	 </ul>
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 29.03.2010
	 ]]></author>
<see><![CDATA[CollectionEvent CollectionEvent - Description of the base collection event properties.
	 ]]></see>
</classRec>
<method name='MapEvent' fullname='org.as3commons.collections.fx.events:MapEvent/MapEvent' isStatic='false' isFinal='false' isOverride='false'  param_names='theKind;theMap;theKey;theItem' param_types='String;org.as3commons.collections.framework:IMap;*;*' param_defaults='undefined;undefined;unknown;unknown' result_type='*'>
<description><![CDATA[
		 MapEvent constructor.
		 
		 ]]></description>
<param><![CDATA[theKind The event kind.
		 ]]></param>
<param><![CDATA[theMap The map.
		 ]]></param>
<param><![CDATA[theKey The key of the item added, removed or replaced.
		 ]]></param>
<param><![CDATA[theItem The affected item in a singular operation.
		 ]]></param>
</method>
<field name='key' fullname='org.as3commons.collections.fx.events:MapEvent/key' type='' isStatic='false' isConst='false' >
<description><![CDATA[
		 The key of the affected item.
		 
		 <p>Only set for the event kinds <code>CollectionEvent.ITEM_ADDED</code>,
		 <code>CollectionEvent.ITEM_REPLACED</code>, <code>CollectionEvent.ITEM_REMOVED</code>.</p>
		 
		 <p><code>undefined</code> if the event kind is <code>CollectionEvent.RESET</code>.</p>
		 ]]></description>
</field>
<field name='map' fullname='org.as3commons.collections.fx.events:MapEvent/map' type='org.as3commons.collections.framework:IMap' isStatic='false' isConst='false' >
<description><![CDATA[
		 The bindable map.
		 ]]></description>
</field>
<packageRec name='org.as3commons.collections.iterators.null' fullname='org.as3commons.collections.iterators.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<classRec name='FilterIterator' fullname='org.as3commons.collections.iterators:FilterIterator' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\iterators\FilterIterator.as' namespace='org.as3commons.collections.iterators' access='public' baseclass='Object' interfaces='org.as3commons.collections.framework:IIterator' isFinal='true' isDynamic='false' >
<description><![CDATA[
	 Filter iterator.
	 
	 <p><strong>Description</strong></p>
	 
	 <p>The <code>FilterIterator</code> accepts an <code>IIterable</code> instance
	 and a filter function and works the same way as the <code>IIterator</code> returned
	 by the particular <code>iterator()</code> method of the given iterable collection.
	 In difference to, the <code>FilterIterator</code> considers only those items that
	 pass the given filter.</p>
	 
	 <p><strong>Filter function</strong></p>
	 
	 <p>The filter function accepts the current item and returns a boolean
	 value (<code>true</code> if the item is accepted).</p>
	 
	 <listing>
			function filter(item :  : Boolean {
				var accept : Boolean = false;
				// test the item
				return accept;
			}
			
			var iterator : IIterator = new FilterIterator(collection, filter);
	 </listing>
	 
	 <p id="link_FilterIteratorExample"><strong>Filter iterator example</strong></p>
	 
	 <a class="exampleCollapsed" href="#link_FilterIteratorExample" onClick="toggleExample(this, 'FilterIteratorExample');">Show example</a><br /><div id="FilterIteratorExample" style='display:none'><listing version="3.0">package {
    import org.as3commons.collections.ArrayList;
    import org.as3commons.collections.framework.IIterator;
    import org.as3commons.collections.iterators.FilterIterator;
    import flash.display.Sprite;

    public class FilterIteratorExample extends Sprite {

        public function FilterIteratorExample() {
            var list : ArrayList = new ArrayList();
            var iterator : IIterator;

            list.array = [1, 2, 3, 4, 5, 6];
            iterator = new FilterIterator(list, evenFilter);
            while (iterator.hasNext()) {
                trace (iterator.next()); // 2, 4, 6
            }
        }

        private function evenFilter(item :  : Boolean {
            // lets pass only even numbers
            return item % 2 == 0;
        }
    }
}
</listing></div>
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 12.02.2009
	 ]]></author>
<see><![CDATA[org.as3commons.collections.framework.IIterator IIterator interface - Description of the basic iterator features.
	 ]]></see>
</classRec>
<method name='FilterIterator' fullname='org.as3commons.collections.iterators:FilterIterator/FilterIterator' isStatic='false' isFinal='false' isOverride='false'  param_names='iterable;filter' param_types='org.as3commons.collections.framework:IIterable;Function' param_defaults='undefined;undefined' result_type='*'>
<description><![CDATA[
		 FilterIterator constructor.
		 
		 ]]></description>
<param><![CDATA[iterable An <code>IIterable</code> implementing collection.
		 ]]></param>
<param><![CDATA[filter The filter function. 
		 ]]></param>
</method>
<method name='hasNext' fullname='org.as3commons.collections.iterators:FilterIterator/hasNext' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		 
		 Returns <code>true</code> if there are succeeding items to be enumerated.
		 
		 <p>Returns <code>false</code>, if the internal cursor is placed after the
		 last item or the collection is empty.</p>
		 
		 ]]></description>
<return><![CDATA[<code>true</code> if there are items left to be enumerated.
		 ]]></return>
</method>
<method name='next' fullname='org.as3commons.collections.iterators:FilterIterator/next' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 
		 Returns the next item and places the internal cursor after that item.
		 
		 <p>Returnes <code>undefined</code> if no next item exists or the collection is empty.</p>
		 
		 ]]></description>
<return><![CDATA[The next item of iteration or <code>undefined</code> if no such item exists.
		 ]]></return>
</method>
<method name='nullFilter' fullname='org.as3commons.collections.iterators:FilterIterator/private:nullFilter' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 Filter to be used if no filter has been specified else.
		 ]]></description>
</method>
<field name='_filter' fullname='org.as3commons.collections.iterators:FilterIterator/private:_filter' type='Function' isStatic='false' isConst='false' >
<description><![CDATA[
		 The filter.
		 ]]></description>
</field>
<field name='_iterator' fullname='org.as3commons.collections.iterators:FilterIterator/private:_iterator' type='org.as3commons.collections.framework:IIterator' isStatic='false' isConst='false' >
<description><![CDATA[
		 The inner iterator.
		 ]]></description>
</field>
<field name='_next' fullname='org.as3commons.collections.iterators:FilterIterator/private:_next' type='' isStatic='false' isConst='false' >
<description><![CDATA[
		 The next item to return.
		 ]]></description>
</field>
<packageRec name='org.as3commons.collections.iterators.null' fullname='org.as3commons.collections.iterators.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<classRec name='RecursiveIterator' fullname='org.as3commons.collections.iterators:RecursiveIterator' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\iterators\RecursiveIterator.as' namespace='org.as3commons.collections.iterators' access='public' baseclass='Object' interfaces='org.as3commons.collections.framework:IRecursiveIterator' isFinal='true' isDynamic='false' >
<description><![CDATA[
	 Recursive iterator.
	 
	 <p><strong>Description</strong></p>
	 
	 <p>The <code>RecursiveIterator</code> accepts an <code>IIterable</code> instance
	 and iterates recursively over the items of the given iterable collection. To do so,
	 all children that should be further iterated should be also instance of <code>IIterable</code>.</p>
	 
	 <p id="link_RecursiveIteratorExample"><strong>Recursive iterator example</strong></p>
	 
	 <a class="exampleCollapsed" href="#link_RecursiveIteratorExample" onClick="toggleExample(this, 'RecursiveIteratorExample');">Show example</a><br /><div id="RecursiveIteratorExample" style='display:none'><listing version="3.0">package {
    import org.as3commons.collections.framework.IRecursiveIterator;
    import org.as3commons.collections.iterators.RecursiveIterator;
    import flash.display.Sprite;

    public class RecursiveIteratorExample extends Sprite {

        public function RecursiveIteratorExample() {
            var root : Node = new Node(0);
            var child1 : Node = new Node(1);
            child1.children = [new Node(2), new Node(3)];
            var child2 : Node = new Node(4);
            child2.children = [new Node(5), new Node(6)];
            var child3 : Node = new Node(7);
            var child4 : Node = new Node(8);
            child4.children = [new Node(9), new Node(10)];
            child3.children = [child4, new Node(11)];
            root.children = [child1, child2, child3];
            
            var iterator : IRecursiveIterator = new RecursiveIterator(root);
            var item : Node;
            while (iterator.hasNext()) {
                item = iterator.next();
                trace (prefix(iterator.depth) + item);
            }

            // Node 1
            // .......Node 2
            // .......Node 3
            // Node 4
            // .......Node 5
            // .......Node 6
            // Node 7
            // .......Node 8
            // ..............Node 9
            // ..............Node 10
            // .......Node 11
        }

        private function prefix(depth : uint) : String {
            var prefix : String = "";
            for (var i : uint = 0; i &lt; depth; i++) prefix += ".......";
            return prefix;
        }
    }
}

import org.as3commons.collections.framework.IIterable;
import org.as3commons.collections.framework.IIterator;
import org.as3commons.collections.iterators.ArrayIterator;

internal class Node implements IIterable {
    public var number : uint;
    public var children : Array;
    public function Node(theNumber : uint) {
        number = theNumber;
        children = new Array();
    }
    public function iterator(cursor : = undefined) : IIterator {
        return new ArrayIterator(children);
    }
    public function toString() : String {
        return "Node " + number.toString();
    }
}
</listing></div>
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 11.02.2009
	 ]]></author>
<see><![CDATA[org.as3commons.collections.framework.IRecursiveIterator IRecursiveIterator interface - Description of the recursive iterator features.
	 ]]></see>
</classRec>
<method name='RecursiveIterator' fullname='org.as3commons.collections.iterators:RecursiveIterator/RecursiveIterator' isStatic='false' isFinal='false' isOverride='false'  param_names='iterable;depth;parentItems' param_types='org.as3commons.collections.framework:IIterable;uint;Array' param_defaults='undefined;0;null' result_type='*'>
<description><![CDATA[
		 RecursiveIterator constructor.
		 
		 ]]></description>
<param><![CDATA[iterable An <code>IIterable</code> implementing collection.
		 ]]></param>
<param><![CDATA[depth Internally passed recursion depth. 
		 ]]></param>
<param><![CDATA[parentItems Internally passed parent chain, considered in recursion detection.
		 ]]></param>
</method>
<method name='hasNext' fullname='org.as3commons.collections.iterators:RecursiveIterator/hasNext' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		 
		 Returns <code>true</code> if there are succeeding items to be enumerated.
		 
		 <p>Returns <code>false</code>, if the internal cursor is placed after the
		 last item or the collection is empty.</p>
		 
		 ]]></description>
<return><![CDATA[<code>true</code> if there are items left to be enumerated.
		 ]]></return>
</method>
<method name='next' fullname='org.as3commons.collections.iterators:RecursiveIterator/next' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 
		 Returns the next item and places the internal cursor after that item.
		 
		 <p>Returnes <code>undefined</code> if no next item exists or the collection is empty.</p>
		 
		 ]]></description>
<return><![CDATA[The next item of iteration or <code>undefined</code> if no such item exists.
		 ]]></return>
</method>
<method name='depth' fullname='org.as3commons.collections.iterators:RecursiveIterator/depth/get' isStatic='false' isFinal='false' isOverride='false'  result_type='uint'>
<description><![CDATA[
		 The recursion depth of the current item.
		 ]]></description>
</method>
<field name='_childIterator' fullname='org.as3commons.collections.iterators:RecursiveIterator/private:_childIterator' type='org.as3commons.collections.framework:IRecursiveIterator' isStatic='false' isConst='false' >
<description><![CDATA[
		 Cursor child iterator.
		 ]]></description>
</field>
<field name='_depth' fullname='org.as3commons.collections.iterators:RecursiveIterator/private:_depth' type='uint' isStatic='false' isConst='false' >
<description><![CDATA[
		 Depth of the current child iterator.
		 ]]></description>
</field>
<field name='_iterator' fullname='org.as3commons.collections.iterators:RecursiveIterator/private:_iterator' type='org.as3commons.collections.framework:IIterator' isStatic='false' isConst='false' >
<description><![CDATA[
		 Iterator to start with.
		 ]]></description>
</field>
<field name='_parentItems' fullname='org.as3commons.collections.iterators:RecursiveIterator/private:_parentItems' type='Array' isStatic='false' isConst='false' >
<description><![CDATA[
		 Cache for recursion detection.
		 ]]></description>
</field>
<field name='_rootDepth' fullname='org.as3commons.collections.iterators:RecursiveIterator/private:_rootDepth' type='uint' isStatic='false' isConst='false' >
<description><![CDATA[
		 Base depth of the iterator.
		 ]]></description>
</field>
<packageRec name='org.as3commons.collections.iterators.null' fullname='org.as3commons.collections.iterators.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<classRec name='RecursiveFilterIterator' fullname='org.as3commons.collections.iterators:RecursiveFilterIterator' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\iterators\RecursiveFilterIterator.as' namespace='org.as3commons.collections.iterators' access='public' baseclass='Object' interfaces='org.as3commons.collections.framework:IRecursiveIterator' isFinal='true' isDynamic='false' >
<description><![CDATA[
	 Recursive filter iterator.
	 
	 <p><strong>Description</strong></p>
	 
	 <p>The <code>RecursiveFilterIterator</code> accepts an <code>IIterable</code> instance
	 and iterates recursively over the items of the given iterable collection while applying
	 the specified filters. To do so, all children that should be further iterated should be
	 also instance of <code>IIterable</code>.</p>
	 
	 <p><strong>Filter functions</strong></p>
	 
	 <p>Its possible to set up two different filters. The first filter tests if an
	 item should be returned. The second filter tests if children of a specific item
	 should be considered or not. Children of items that did not pass the first
	 <code>filter</code> function are skipped by the iterator. This is the difference
	 to <code>RecursiveFilterIterator2</code>. It is possible to set
	 up both filters together.</p>
	 
	 <p>Both filter functions accept the current item and return a boolean
	 value (<code>true</code> if the item is accepted).</p>
	 
	 <listing>
			function filter(item :  : Boolean {
				var accept : Boolean = false;
				// test the item
				return accept;
			}

			function childrenFilter(item :  : Boolean {
				var accept : Boolean = false;
				// test the item
				return accept;
			}
			
			var iterator : IRecursiveIterator = new RecursiveFilterIterator(collection, filter, childrenFilter);
	 </listing>
	 
	 <p id="link_RecursiveFilterIteratorExample"><strong>Recursive filter iterator example</strong></p>
	 
	 <a class="exampleCollapsed" href="#link_RecursiveFilterIteratorExample" onClick="toggleExample(this, 'RecursiveFilterIteratorExample');">Show example</a><br /><div id="RecursiveFilterIteratorExample" style='display:none'><listing version="3.0">package {
    import org.as3commons.collections.framework.IRecursiveIterator;
    import org.as3commons.collections.iterators.RecursiveFilterIterator;
    import flash.display.Sprite;

    public class RecursiveFilterIteratorExample extends Sprite {

        public function RecursiveFilterIteratorExample() {
            var root : Node = new Node(0);
            var child1 : Node = new Node(1);
            child1.children = [new Node(2), new Node(3)];
            var child2 : Node = new Node(4);
            child2.children = [new Node(5), new Node(6)];
            var child3 : Node = new Node(7);
            var child4 : Node = new Node(8);
            child4.children = [new Node(9), new Node(10)];
            child3.children = [child4, new Node(11)];
            root.children = [child1, child2, child3];
            
            var iterator : IRecursiveIterator;
            var item : Node;
            
            // All items
            
            iterator = new RecursiveFilterIterator(root, null, null);
            while (iterator.hasNext()) {
                item = iterator.next();
                trace (prefix(iterator.depth) + item);
            }

            // Node 1
            // .......Node 2
            // .......Node 3
            // Node 4
            // .......Node 5
            // .......Node 6
            // Node 7
            // .......Node 8
            // ..............Node 9
            // ..............Node 10
            // .......Node 11
            
            // Only odd items

            iterator = new RecursiveFilterIterator(
                root, oddFilter, null
            );
            while (iterator.hasNext()) {
                item = iterator.next();
                trace (prefix(iterator.depth) + item);
            }

            // Node 1
            // .......Node 3
            // Node 7
            // .......Node 11

            // Only even items

            iterator = new RecursiveFilterIterator(
                root, evenFilter, null
            );
            while (iterator.hasNext()) {
                item = iterator.next();
                trace (prefix(iterator.depth) + item);
            }

            // Node 4
            // .......Node 6

            // All items + only children of odd items

            iterator = new RecursiveFilterIterator(
                root, null, oddFilter
            );
            while (iterator.hasNext()) {
                item = iterator.next();
                trace (prefix(iterator.depth) + item);
            }

            // Node 1
            // .......Node 2
            // .......Node 3
            // Node 4
            // Node 7
            // .......Node 8
            // .......Node 11

            // All items + only children of even items

            iterator = new RecursiveFilterIterator(
                root, null, evenFilter
            );
            while (iterator.hasNext()) {
                item = iterator.next();
                trace (prefix(iterator.depth) + item);
            }

            // Node 1
            // Node 4
            // .......Node 5
            // .......Node 6
            // Node 7

            // Only items &gt; 5

            iterator = new RecursiveFilterIterator(
                root, greater5Filter, null
            );
            while (iterator.hasNext()) {
                item = iterator.next();
                trace (prefix(iterator.depth) + item);
            }

            // Node 7
            // .......Node 8
            // ..............Node 9
            // ..............Node 10
            // .......Node 11

            // All items + only children of items &gt; 5

            iterator = new RecursiveFilterIterator(
                root, null, greater5Filter
            );
            while (iterator.hasNext()) {
                item = iterator.next();
                trace (prefix(iterator.depth) + item);
            }

            // Node 1
            // Node 4
            // Node 7
            // .......Node 8
            // ..............Node 9
            // ..............Node 10
            // .......Node 11
        }
        
        private function oddFilter(item :  : Boolean {
            // lets pass only odd numbers
            return Node(item).number % 2 == 1;
        }

        private function evenFilter(item :  : Boolean {
            // lets pass only even numbers
            return Node(item).number % 2 == 0;
        }

        private function greater5Filter(item :  : Boolean {
            // lets pass only items &gt; 5
            return Node(item).number &gt; 5;
        }

        private function prefix(depth : uint) : String {
            var prefix : String = "";
            for (var i : uint = 0; i &lt; depth; i++) prefix += ".......";
            return prefix;
        }
    }
}

import org.as3commons.collections.framework.IIterable;
import org.as3commons.collections.framework.IIterator;
import org.as3commons.collections.iterators.ArrayIterator;

internal class Node implements IIterable {
    public var number : uint;
    public var children : Array;
    public function Node(theNumber : uint) {
        number = theNumber;
        children = new Array();
    }
    public function iterator(cursor : = undefined) : IIterator {
        return new ArrayIterator(children);
    }
    public function toString() : String {
        return "Node " + number.toString();
    }
}
</listing></div>
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 14.05.2009
	 ]]></author>
<see><![CDATA[org.as3commons.collections.framework.IRecursiveIterator IRecursiveIterator interface - Description of the recursive iterator features.
	 ]]></see>
<see><![CDATA[FilterIterator FilterIterator - Filter iterator usage example.
	 ]]></see>
</classRec>
<method name='RecursiveFilterIterator' fullname='org.as3commons.collections.iterators:RecursiveFilterIterator/RecursiveFilterIterator' isStatic='false' isFinal='false' isOverride='false'  param_names='iterable;filter;childrenFilter;depth;parentItems' param_types='org.as3commons.collections.framework:IIterable;Function;Function;uint;Array' param_defaults='undefined;undefined;undefined;0;null' result_type='*'>
<description><![CDATA[
		 RecursiveFilterIterator constructor.
		 
		 ]]></description>
<param><![CDATA[iterable An <code>IIterable</code> implementing collection.
		 ]]></param>
<param><![CDATA[filter The filter function. 
		 ]]></param>
<param><![CDATA[childrenFilter The children filter function. 
		 ]]></param>
<param><![CDATA[depth Internally passed recursion depth. 
		 ]]></param>
<param><![CDATA[parentItems Internally passed parent chain, considered in recursion detection.
		 ]]></param>
</method>
<method name='hasNext' fullname='org.as3commons.collections.iterators:RecursiveFilterIterator/hasNext' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		 
		 Returns <code>true</code> if there are succeeding items to be enumerated.
		 
		 <p>Returns <code>false</code>, if the internal cursor is placed after the
		 last item or the collection is empty.</p>
		 
		 ]]></description>
<return><![CDATA[<code>true</code> if there are items left to be enumerated.
		 ]]></return>
</method>
<method name='next' fullname='org.as3commons.collections.iterators:RecursiveFilterIterator/next' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 
		 Returns the next item and places the internal cursor after that item.
		 
		 <p>Returnes <code>undefined</code> if no next item exists or the collection is empty.</p>
		 
		 ]]></description>
<return><![CDATA[The next item of iteration or <code>undefined</code> if no such item exists.
		 ]]></return>
</method>
<method name='nullFilter' fullname='org.as3commons.collections.iterators:RecursiveFilterIterator/private:nullFilter' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 Filter to be used if no filter has been specified else.
		 ]]></description>
</method>
<method name='depth' fullname='org.as3commons.collections.iterators:RecursiveFilterIterator/depth/get' isStatic='false' isFinal='false' isOverride='false'  result_type='uint'>
<description><![CDATA[
		 The recursion depth of the current item.
		 ]]></description>
</method>
<field name='_childIterator' fullname='org.as3commons.collections.iterators:RecursiveFilterIterator/private:_childIterator' type='org.as3commons.collections.framework:IRecursiveIterator' isStatic='false' isConst='false' >
<description><![CDATA[
		 Cursor child iterator.
		 ]]></description>
</field>
<field name='_childrenFilter' fullname='org.as3commons.collections.iterators:RecursiveFilterIterator/private:_childrenFilter' type='Function' isStatic='false' isConst='false' >
<description><![CDATA[
		 The children filter.
		 ]]></description>
</field>
<field name='_depth' fullname='org.as3commons.collections.iterators:RecursiveFilterIterator/private:_depth' type='uint' isStatic='false' isConst='false' >
<description><![CDATA[
		 Depth of the current child iterator.
		 ]]></description>
</field>
<field name='_filter' fullname='org.as3commons.collections.iterators:RecursiveFilterIterator/private:_filter' type='Function' isStatic='false' isConst='false' >
<description><![CDATA[
		 The filter.
		 ]]></description>
</field>
<field name='_iterator' fullname='org.as3commons.collections.iterators:RecursiveFilterIterator/private:_iterator' type='org.as3commons.collections.framework:IIterator' isStatic='false' isConst='false' >
<description><![CDATA[
		 Iterator to start with.
		 ]]></description>
</field>
<field name='_next' fullname='org.as3commons.collections.iterators:RecursiveFilterIterator/private:_next' type='' isStatic='false' isConst='false' >
<description><![CDATA[
		 Next item to return.
		 ]]></description>
</field>
<field name='_parentItems' fullname='org.as3commons.collections.iterators:RecursiveFilterIterator/private:_parentItems' type='Array' isStatic='false' isConst='false' >
<description><![CDATA[
		 Cache for recursion detection.
		 ]]></description>
</field>
<field name='_rootDepth' fullname='org.as3commons.collections.iterators:RecursiveFilterIterator/private:_rootDepth' type='uint' isStatic='false' isConst='false' >
<description><![CDATA[
		 Base depth of the iterator.
		 ]]></description>
</field>
<packageRec name='org.as3commons.collections.iterators.null' fullname='org.as3commons.collections.iterators.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<classRec name='RecursiveFilterIterator2' fullname='org.as3commons.collections.iterators:RecursiveFilterIterator2' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\iterators\RecursiveFilterIterator2.as' namespace='org.as3commons.collections.iterators' access='public' baseclass='Object' interfaces='org.as3commons.collections.framework:IRecursiveIterator' isFinal='true' isDynamic='false' >
<description><![CDATA[
	 Recursive filter iterator.
	 
	 <p><strong>Description</strong></p>
	 
	 <p>Filter a complex data structure using this iterator. Two filters let specify what
	 items should be returned and if children of a parent item should be considered.</p>
	 
	 <p>In difference to the legacy <code>RecursiveFilterIterator</code> this iterator
	 iterates through parent items even if the parent items should not be returned.
	 The <code>RecursiveFilterIterator</code> never checks children of items that are
	 excluded by the <code>filter</code> function.</p>
	 
	 <p>The <code>RecursiveFilterIterator2</code> accepts an <code>IIterable</code> instance
	 and iterates recursively over the items of the given iterable collection while applying
	 the specified filters. To do so, all children that should be further iterated should be
	 also instance of <code>IIterable</code>.</p>
	 
	 <p><strong>Filter functions</strong></p>
	 
	 <p>Its possible to set up two different filters. The first filter tests if an
	 item should be returned. The second filter tests if children of a specific item
	 should be considered or not. Children of items that did not pass the first
	 <code>filter</code> function are still being considered by the iterator. It is
	 possible to set up both filters together.</p>
	 
	 <p>Both filter functions accept the current item and return a boolean
	 value (<code>true</code> if the item is accepted).</p>
	 
	 <listing>
			function filter(item :  : Boolean {
				var accept : Boolean = false;
				// test the item
				return accept;
			}

			function childrenFilter(item :  : Boolean {
				var accept : Boolean = false;
				// test the item
				return accept;
			}
			
			var iterator : IRecursiveIterator = new RecursiveFilterIterator(collection, filter, childrenFilter);
	 </listing>
	 
	 <p id="link_RecursiveFilterIteratorExample"><strong>Recursive filter iterator example</strong></p>
	 
	 <a class="exampleCollapsed" href="#link_RecursiveFilterIteratorExample" onClick="toggleExample(this, 'RecursiveFilterIteratorExample');">Show example</a><br /><div id="RecursiveFilterIteratorExample" style='display:none'><listing version="3.0">package {
    import org.as3commons.collections.framework.IRecursiveIterator;
    import org.as3commons.collections.iterators.RecursiveFilterIterator;
    import flash.display.Sprite;

    public class RecursiveFilterIteratorExample extends Sprite {

        public function RecursiveFilterIteratorExample() {
            var root : Node = new Node(0);
            var child1 : Node = new Node(1);
            child1.children = [new Node(2), new Node(3)];
            var child2 : Node = new Node(4);
            child2.children = [new Node(5), new Node(6)];
            var child3 : Node = new Node(7);
            var child4 : Node = new Node(8);
            child4.children = [new Node(9), new Node(10)];
            child3.children = [child4, new Node(11)];
            root.children = [child1, child2, child3];
            
            var iterator : IRecursiveIterator;
            var item : Node;
            
            // All items
            
            iterator = new RecursiveFilterIterator(root, null, null);
            while (iterator.hasNext()) {
                item = iterator.next();
                trace (prefix(iterator.depth) + item);
            }

            // Node 1
            // .......Node 2
            // .......Node 3
            // Node 4
            // .......Node 5
            // .......Node 6
            // Node 7
            // .......Node 8
            // ..............Node 9
            // ..............Node 10
            // .......Node 11
            
            // Only odd items

            iterator = new RecursiveFilterIterator(
                root, oddFilter, null
            );
            while (iterator.hasNext()) {
                item = iterator.next();
                trace (prefix(iterator.depth) + item);
            }

            // Node 1
            // .......Node 3
            // Node 7
            // .......Node 11

            // Only even items

            iterator = new RecursiveFilterIterator(
                root, evenFilter, null
            );
            while (iterator.hasNext()) {
                item = iterator.next();
                trace (prefix(iterator.depth) + item);
            }

            // Node 4
            // .......Node 6

            // All items + only children of odd items

            iterator = new RecursiveFilterIterator(
                root, null, oddFilter
            );
            while (iterator.hasNext()) {
                item = iterator.next();
                trace (prefix(iterator.depth) + item);
            }

            // Node 1
            // .......Node 2
            // .......Node 3
            // Node 4
            // Node 7
            // .......Node 8
            // .......Node 11

            // All items + only children of even items

            iterator = new RecursiveFilterIterator(
                root, null, evenFilter
            );
            while (iterator.hasNext()) {
                item = iterator.next();
                trace (prefix(iterator.depth) + item);
            }

            // Node 1
            // Node 4
            // .......Node 5
            // .......Node 6
            // Node 7

            // Only items &gt; 5

            iterator = new RecursiveFilterIterator(
                root, greater5Filter, null
            );
            while (iterator.hasNext()) {
                item = iterator.next();
                trace (prefix(iterator.depth) + item);
            }

            // Node 7
            // .......Node 8
            // ..............Node 9
            // ..............Node 10
            // .......Node 11

            // All items + only children of items &gt; 5

            iterator = new RecursiveFilterIterator(
                root, null, greater5Filter
            );
            while (iterator.hasNext()) {
                item = iterator.next();
                trace (prefix(iterator.depth) + item);
            }

            // Node 1
            // Node 4
            // Node 7
            // .......Node 8
            // ..............Node 9
            // ..............Node 10
            // .......Node 11
        }
        
        private function oddFilter(item :  : Boolean {
            // lets pass only odd numbers
            return Node(item).number % 2 == 1;
        }

        private function evenFilter(item :  : Boolean {
            // lets pass only even numbers
            return Node(item).number % 2 == 0;
        }

        private function greater5Filter(item :  : Boolean {
            // lets pass only items &gt; 5
            return Node(item).number &gt; 5;
        }

        private function prefix(depth : uint) : String {
            var prefix : String = "";
            for (var i : uint = 0; i &lt; depth; i++) prefix += ".......";
            return prefix;
        }
    }
}

import org.as3commons.collections.framework.IIterable;
import org.as3commons.collections.framework.IIterator;
import org.as3commons.collections.iterators.ArrayIterator;

internal class Node implements IIterable {
    public var number : uint;
    public var children : Array;
    public function Node(theNumber : uint) {
        number = theNumber;
        children = new Array();
    }
    public function iterator(cursor : = undefined) : IIterator {
        return new ArrayIterator(children);
    }
    public function toString() : String {
        return "Node " + number.toString();
    }
}
</listing></div>
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 14.05.2009
	 ]]></author>
<see><![CDATA[org.as3commons.collections.framework.IRecursiveIterator IRecursiveIterator interface - Description of the recursive iterator features.
	 ]]></see>
<see><![CDATA[FilterIterator FilterIterator - Filter iterator usage example.
	 
	 ]]></see>
<TODO><![CDATA[Peplace RecursiveFilterIterator with this implementation in V2.
	 ]]></TODO>
</classRec>
<method name='RecursiveFilterIterator2' fullname='org.as3commons.collections.iterators:RecursiveFilterIterator2/RecursiveFilterIterator2' isStatic='false' isFinal='false' isOverride='false'  param_names='iterable;filter;childrenFilter;depth;parentItems' param_types='org.as3commons.collections.framework:IIterable;Function;Function;uint;Array' param_defaults='undefined;undefined;undefined;0;null' result_type='*'>
<description><![CDATA[
		 RecursiveFilterIterator constructor.
		 
		 ]]></description>
<param><![CDATA[iterable An <code>IIterable</code> implementing collection.
		 ]]></param>
<param><![CDATA[filter The filter function. 
		 ]]></param>
<param><![CDATA[childrenFilter The children filter function. 
		 ]]></param>
<param><![CDATA[depth Internally passed recursion depth. 
		 ]]></param>
<param><![CDATA[parentItems Internally passed parent chain, considered in recursion detection.
		 ]]></param>
</method>
<method name='hasNext' fullname='org.as3commons.collections.iterators:RecursiveFilterIterator2/hasNext' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		 
		 Returns <code>true</code> if there are succeeding items to be enumerated.
		 
		 <p>Returns <code>false</code>, if the internal cursor is placed after the
		 last item or the collection is empty.</p>
		 
		 ]]></description>
<return><![CDATA[<code>true</code> if there are items left to be enumerated.
		 ]]></return>
</method>
<method name='next' fullname='org.as3commons.collections.iterators:RecursiveFilterIterator2/next' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 
		 Returns the next item and places the internal cursor after that item.
		 
		 <p>Returnes <code>undefined</code> if no next item exists or the collection is empty.</p>
		 
		 ]]></description>
<return><![CDATA[The next item of iteration or <code>undefined</code> if no such item exists.
		 ]]></return>
</method>
<method name='nullFilter' fullname='org.as3commons.collections.iterators:RecursiveFilterIterator2/private:nullFilter' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 Filter to be used if no filter has been specified else.
		 ]]></description>
</method>
<method name='depth' fullname='org.as3commons.collections.iterators:RecursiveFilterIterator2/depth/get' isStatic='false' isFinal='false' isOverride='false'  result_type='uint'>
<description><![CDATA[
		 The recursion depth of the current item.
		 ]]></description>
</method>
<field name='_childIterator' fullname='org.as3commons.collections.iterators:RecursiveFilterIterator2/private:_childIterator' type='org.as3commons.collections.framework:IRecursiveIterator' isStatic='false' isConst='false' >
<description><![CDATA[
		 Cursor child iterator.
		 ]]></description>
</field>
<field name='_childrenFilter' fullname='org.as3commons.collections.iterators:RecursiveFilterIterator2/private:_childrenFilter' type='Function' isStatic='false' isConst='false' >
<description><![CDATA[
		 The children filter.
		 ]]></description>
</field>
<field name='_depth' fullname='org.as3commons.collections.iterators:RecursiveFilterIterator2/private:_depth' type='uint' isStatic='false' isConst='false' >
<description><![CDATA[
		 Depth of the current child iterator.
		 ]]></description>
</field>
<field name='_filter' fullname='org.as3commons.collections.iterators:RecursiveFilterIterator2/private:_filter' type='Function' isStatic='false' isConst='false' >
<description><![CDATA[
		 The filter.
		 ]]></description>
</field>
<field name='_iterator' fullname='org.as3commons.collections.iterators:RecursiveFilterIterator2/private:_iterator' type='org.as3commons.collections.framework:IIterator' isStatic='false' isConst='false' >
<description><![CDATA[
		 Iterator to start with.
		 ]]></description>
</field>
<field name='_next' fullname='org.as3commons.collections.iterators:RecursiveFilterIterator2/private:_next' type='' isStatic='false' isConst='false' >
<description><![CDATA[
		 Next item to return.
		 ]]></description>
</field>
<field name='_parentItems' fullname='org.as3commons.collections.iterators:RecursiveFilterIterator2/private:_parentItems' type='Array' isStatic='false' isConst='false' >
<description><![CDATA[
		 Cache for recursion detection.
		 ]]></description>
</field>
<field name='_rootDepth' fullname='org.as3commons.collections.iterators:RecursiveFilterIterator2/private:_rootDepth' type='uint' isStatic='false' isConst='false' >
<description><![CDATA[
		 Base depth of the iterator.
		 ]]></description>
</field>
<packageRec name='org.as3commons.collections.iterators.null' fullname='org.as3commons.collections.iterators.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<classRec name='CollectionFilterIterator' fullname='org.as3commons.collections.iterators:CollectionFilterIterator' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\iterators\CollectionFilterIterator.as' namespace='org.as3commons.collections.iterators' access='public' baseclass='Object' interfaces='org.as3commons.collections.framework:ICollectionIterator' isFinal='true' isDynamic='false' >
<description><![CDATA[
	 Collection filter iterator.
	 
	 <p><strong>Description</strong></p>
	 
	 <p>The <code>CollectionFilterIterator</code> accepts an <code>ICollection</code> instance
	 and a filter function and works the same way as the <code>ICollectionIterator</code> returned
	 by the particular <code>iterator()</code> method of the given collection. In difference to,
	 the <code>CollectionFilterIterator</code> considers only those items that pass the given filter.</p>
	 
	 <p><strong>Filter function</strong></p>
	 
	 <p>The filter function accepts the current item and returns a boolean
	 value (<code>true</code> if the item is accepted).</p>
	 
	 <listing>
			function filter(item :  : Boolean {
				var accept : Boolean = false;
				// test the item
				return accept;
			}
			
			var iterator : ICollectionIterator = new CollectionFilterIterator(collection, filter);
	 </listing>
	 
	 <p id="link_CollectionFilterIteratorExample"><strong>Collection filter iterator example</strong></p>
	 
	 <a class="exampleCollapsed" href="#link_CollectionFilterIteratorExample" onClick="toggleExample(this, 'CollectionFilterIteratorExample');">Show example</a><br /><div id="CollectionFilterIteratorExample" style='display:none'><listing version="3.0">package {
    import org.as3commons.collections.ArrayList;
    import org.as3commons.collections.framework.ICollectionIterator;
    import org.as3commons.collections.iterators.CollectionFilterIterator;
    import flash.display.Sprite;

    public class CollectionFilterIteratorExample extends Sprite {

        public function CollectionFilterIteratorExample() {
            var list : ArrayList = new ArrayList();
            var iterator : ICollectionIterator;

            // ^ = cursor, [n] = current
            
            // Navigation

            list.array = [1, 2, 3, 4, 5, 6];
            iterator = new CollectionFilterIterator(list, evenFilter);
            
                                   //  ^  1  2  3  4  5  6
            iterator.next();       //  1 [2] ^  3  4  5  6
            iterator.next();       //  1  2  3 [4] ^  5  6
            iterator.next();       //  1  2  3  4  5 [6] ^
            iterator.next();       //  1  2  3  4  5  6  ^
            iterator.previous();   //  1  2  3  4  5  ^ [6]
            iterator.previous();   //  1  2  3  ^ [4] 5  6
            iterator.start();      //  ^  1  2  3  4  5  6
            iterator.end();        //  1  2  3  4  5  6  ^
            
            // Remove

            iterator = new CollectionFilterIterator(list, evenFilter);
            
                                   //  ^  1  2  3  4  5  6
            iterator.next();       //  1 [2] ^  3  4  5  6
            iterator.next();       //  1  2  3 [4] ^  5  6
            iterator.remove();     //  1  2  3  ^  5  6
            iterator.next();       //  1  2  3  5 [6] ^
            iterator.remove();     //  1  2  3  5  ^
            iterator.previous();   //  1  ^ [2] 3  5
            iterator.remove();     //  1  ^  3  5
            iterator.previous();   //  ^  1  3  5
            iterator.next();       //  1  3  5  ^
            
            // Remove during iteration

            list.array = [1, 2, 3, 4, 5, 6];
            iterator = new CollectionFilterIterator(list, evenFilter);
            var item : 
            while (iterator.hasNext()) {
                item = iterator.next();
                trace (item); // 2, 4, 6
                if (item == 2) iterator.remove();
                if (item == 6) iterator.remove();
            }
            trace (list.toArray()); // 1,3,4,5

            // Reverse iteration

            list.array = [1, 2, 3, 4, 5, 6];
            iterator = new CollectionFilterIterator(list, evenFilter);
            iterator.end();
            while (iterator.hasPrevious()) {
                trace (iterator.previous()); // 6, 4, 2
            }
        }
        
        private function evenFilter(item :  : Boolean {
            // lets pass only even numbers
            return item % 2 == 0;
        }
    }
}
</listing></div>
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 25.02.2010
	 ]]></author>
<see><![CDATA[org.as3commons.collections.framework.ICollectionIterator ICollectionIterator interface - Detailed description of the ICollectionIterator features.
	 ]]></see>
<see><![CDATA[FilterIterator FilterIterator - Filter iterator usage example.
	 ]]></see>
</classRec>
<method name='CollectionFilterIterator' fullname='org.as3commons.collections.iterators:CollectionFilterIterator/CollectionFilterIterator' isStatic='false' isFinal='false' isOverride='false'  param_names='collection;filter' param_types='org.as3commons.collections.framework:ICollection;Function' param_defaults='undefined;undefined' result_type='*'>
<description><![CDATA[
		 CollectionFilterIterator constructor.
		 
		 ]]></description>
<param><![CDATA[collection The collection to be enumerated.
		 ]]></param>
<param><![CDATA[filter The filter function. 
		 ]]></param>
</method>
<method name='end' fullname='org.as3commons.collections.iterators:CollectionFilterIterator/end' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 
		 Resets the iterator to the position after the last item.
		 
		 <p>The last item of the collection is then returned with a subsequent
		 call to <code>previous()</code>.</p>
		 ]]></description>
</method>
<method name='hasNext' fullname='org.as3commons.collections.iterators:CollectionFilterIterator/hasNext' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		 
		 Returns <code>true</code> if there are succeeding items to be enumerated.
		 
		 <p>Returns <code>false</code>, if the internal cursor is placed after the
		 last item or the collection is empty.</p>
		 
		 ]]></description>
<return><![CDATA[<code>true</code> if there are items left to be enumerated.
		 ]]></return>
</method>
<method name='hasPrevious' fullname='org.as3commons.collections.iterators:CollectionFilterIterator/hasPrevious' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		 
		 Returns <code>true</code> if there are preceeding items to be enumerated.
		 
		 <p>Returns <code>false</code>, if the internal cursor is placed before the
		 first item or the collection is empty.</p>
		 
		 ]]></description>
<return><![CDATA[<code>true</code> if there are items left to be enumerated.
		 ]]></return>
</method>
<method name='next' fullname='org.as3commons.collections.iterators:CollectionFilterIterator/next' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 
		 Returns the next item and places the internal cursor after that item.
		 
		 <p>Returnes <code>undefined</code> if no next item exists or the collection is empty.</p>
		 
		 ]]></description>
<return><![CDATA[The next item of iteration or <code>undefined</code> if no such item exists.
		 ]]></return>
</method>
<method name='nullFilter' fullname='org.as3commons.collections.iterators:CollectionFilterIterator/private:nullFilter' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 Filter to be used if no filter has been specified else.
		 ]]></description>
</method>
<method name='previous' fullname='org.as3commons.collections.iterators:CollectionFilterIterator/previous' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 
		 Returns the previous item and places the internal cursor before that item. 
		 
		 <p>Returnes <code>undefined</code> if no previous item exists or the collection is empty.</p>
		 
		 ]]></description>
<return><![CDATA[The previous item of iteration or <code>undefined</code> if no such item exists.
		 ]]></return>
</method>
<method name='remove' fullname='org.as3commons.collections.iterators:CollectionFilterIterator/remove' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		 
		 Removes the current item from the collection if any.
		 
		 ]]></description>
<return><![CDATA[<code>true</code> if an item has been removed.
		 ]]></return>
</method>
<method name='rewindBackward' fullname='org.as3commons.collections.iterators:CollectionFilterIterator/private:rewindBackward' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Places the inner iterator before the given item.
		 ]]></description>
</method>
<method name='rewindForward' fullname='org.as3commons.collections.iterators:CollectionFilterIterator/private:rewindForward' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Places the inner iterator after the given item.
		 ]]></description>
</method>
<method name='start' fullname='org.as3commons.collections.iterators:CollectionFilterIterator/start' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 
		 Resets the iterator to the position before the first item.
		 
		 <p>The first item of the collection is then returned with a subsequent
		 call to <code>next()</code>.</p>
		 ]]></description>
</method>
<method name='current' fullname='org.as3commons.collections.iterators:CollectionFilterIterator/current/get' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 
		 The item that most recently has been returned by <code>next()</code>
		 or <code>previous()</code>.
		 
		 <p>Returns <code>undefined</code> if the iterator points to the postion before the first
		 or after the last item or the collection is empty.</p>
		 
		 <p>The current item is nullified after all operations that modify the underlying
		 collection order (<code>add(), remove()</code>) or modify the cursor position
		 (<code>start(), end()</code>).</p>
		 
		 <p>Returns initially <code>undefined</code>.</p>
		 
		 ]]></description>
<return><![CDATA[The last returned item or <code>undefined</code> if no such item.
		 ]]></return>
</method>
<field name='_current' fullname='org.as3commons.collections.iterators:CollectionFilterIterator/private:_current' type='' isStatic='false' isConst='false' >
<description><![CDATA[
		 The last returned item.
		 ]]></description>
</field>
<field name='_filter' fullname='org.as3commons.collections.iterators:CollectionFilterIterator/private:_filter' type='Function' isStatic='false' isConst='false' >
<description><![CDATA[
		 The filter.
		 ]]></description>
</field>
<field name='_iterator' fullname='org.as3commons.collections.iterators:CollectionFilterIterator/private:_iterator' type='org.as3commons.collections.framework:ICollectionIterator' isStatic='false' isConst='false' >
<description><![CDATA[
		 The inner iterator.
		 ]]></description>
</field>
<field name='_lastLookUp' fullname='org.as3commons.collections.iterators:CollectionFilterIterator/private:_lastLookUp' type='String' isStatic='false' isConst='false' >
<description><![CDATA[
		 The last lookup direction.
		 ]]></description>
</field>
<field name='_next' fullname='org.as3commons.collections.iterators:CollectionFilterIterator/private:_next' type='' isStatic='false' isConst='false' >
<description><![CDATA[
		 The next item to return.
		 ]]></description>
</field>
<field name='_previous' fullname='org.as3commons.collections.iterators:CollectionFilterIterator/private:_previous' type='' isStatic='false' isConst='false' >
<description><![CDATA[
		 The previous item to return.
		 ]]></description>
</field>
<packageRec name='org.as3commons.collections.iterators.null' fullname='org.as3commons.collections.iterators.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<classRec name='MapFilterIterator' fullname='org.as3commons.collections.iterators:MapFilterIterator' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\iterators\MapFilterIterator.as' namespace='org.as3commons.collections.iterators' access='public' baseclass='Object' interfaces='org.as3commons.collections.framework:IBasicMapIterator' isFinal='true' isDynamic='false' >
<description><![CDATA[
	 MapFilterIterator iterator.
	 
	 <p><strong>Description</strong></p>
	 
	 <p>The <code>MapFilterIterator</code> accepts an <code>IMap</code> instance
	 and a key filter function and works the same way as the <code>IIterator</code> returned
	 by the particular <code>iterator()</code> method of the given iterable collection.
	 In difference to, the <code>MapFilterIterator</code> considers only those items that
	 pass the given filter.</p>
	 
	 <p>It is possible to additionally specify an item filter, which further narrows the
	 result by testing against the possible returned item.</p>
	 
	 <p><strong>Filter functions</strong></p>
	 
	 <p>The key filter function accepts the current key and returns a boolean
	 value (<code>true</code> if the key is accepted).</p>
	 
	 <listing>
			function keyFilter(key :  : Boolean {
				var accept : Boolean = false;
				// test the key
				return accept;
			}
			
			var iterator : IIterator = new MapFilterIterator(map, keyFilter);
	 </listing>
	 
	 <p>The item filter function accepts the current item and returns a boolean
	 value (<code>true</code> if the item is accepted).</p>
	 
	 <listing>
			function itemFilter(item :  : Boolean {
				var accept : Boolean = false;
				// test the item
				return accept;
			}
			
			var iterator : IIterator = new MapFilterIterator(map, keyFilter, itemFilter);
	 </listing>
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 12.02.2009
	 ]]></author>
<see><![CDATA[org.as3commons.collections.framework.IIterator IIterator interface - Description of the basic iterator features.
	 ]]></see>
<see><![CDATA[FilterIterator FilterIterator - Filter iterator usage example.
	 
	 ]]></see>
<TODO><![CDATA[To be tested.
	 ]]></TODO>
</classRec>
<method name='MapFilterIterator' fullname='org.as3commons.collections.iterators:MapFilterIterator/MapFilterIterator' isStatic='false' isFinal='false' isOverride='false'  param_names='map;keyFilter;itemFilter' param_types='org.as3commons.collections.framework:IMap;Function;Function' param_defaults='undefined;undefined;null' result_type='*'>
<description><![CDATA[
		 MapFilterIterator constructor.
		 
		 ]]></description>
<param><![CDATA[iterable An <code>IIterable</code> implementing collection.
		 ]]></param>
<param><![CDATA[keyFilter The key filter function. 
		 ]]></param>
<param><![CDATA[itemFilter The item filter function (optional). 
		 ]]></param>
</method>
<method name='hasNext' fullname='org.as3commons.collections.iterators:MapFilterIterator/hasNext' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		 
		 Returns <code>true</code> if there are succeeding items to be enumerated.
		 
		 <p>Returns <code>false</code>, if the internal cursor is placed after the
		 last item or the collection is empty.</p>
		 
		 ]]></description>
<return><![CDATA[<code>true</code> if there are items left to be enumerated.
		 ]]></return>
</method>
<method name='next' fullname='org.as3commons.collections.iterators:MapFilterIterator/next' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 
		 Returns the next item and places the internal cursor after that item.
		 
		 <p>Returnes <code>undefined</code> if no next item exists or the collection is empty.</p>
		 
		 ]]></description>
<return><![CDATA[The next item of iteration or <code>undefined</code> if no such item exists.
		 ]]></return>
</method>
<method name='nullFilter' fullname='org.as3commons.collections.iterators:MapFilterIterator/private:nullFilter' isStatic='false' isFinal='false' isOverride='false'  param_names='key' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 Filter to be used if no filter has been specified else.
		 ]]></description>
</method>
<method name='key' fullname='org.as3commons.collections.iterators:MapFilterIterator/key/get' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 
		 The key of the last returned item.
		 
		 <p><code>undefined</code> if the iterator points to the postion before the first
		 or after the last item or the map is empty.</p>
		 
		 <p>The key is reset to <code>undefined</code> after all operations that modify the underlying
		 map order (<code>add(), remove()</code>) or modify the cursor position
		 (<code>start(), end()</code>).</p>
		 
		 <p>Initially <code>undefined</code>.</p>
		 ]]></description>
</method>
<field name='_currentKey' fullname='org.as3commons.collections.iterators:MapFilterIterator/private:_currentKey' type='' isStatic='false' isConst='false' >
<description><![CDATA[
		 The key of last returned item.
		 ]]></description>
</field>
<field name='_itemFilter' fullname='org.as3commons.collections.iterators:MapFilterIterator/private:_itemFilter' type='Function' isStatic='false' isConst='false' >
<description><![CDATA[
		 The item filter.
		 ]]></description>
</field>
<field name='_iterator' fullname='org.as3commons.collections.iterators:MapFilterIterator/private:_iterator' type='org.as3commons.collections.framework:IIterator' isStatic='false' isConst='false' >
<description><![CDATA[
		 The inner iterator.
		 ]]></description>
</field>
<field name='_keyFilter' fullname='org.as3commons.collections.iterators:MapFilterIterator/private:_keyFilter' type='Function' isStatic='false' isConst='false' >
<description><![CDATA[
		 The key filter.
		 ]]></description>
</field>
<field name='_map' fullname='org.as3commons.collections.iterators:MapFilterIterator/private:_map' type='org.as3commons.collections.framework:IMap' isStatic='false' isConst='false' >
<description><![CDATA[
		 The map to filter.
		 ]]></description>
</field>
<field name='_nextKey' fullname='org.as3commons.collections.iterators:MapFilterIterator/private:_nextKey' type='' isStatic='false' isConst='false' >
<description><![CDATA[
		 The key of the next item to return.
		 ]]></description>
</field>
<packageRec name='org.as3commons.collections.iterators.null' fullname='org.as3commons.collections.iterators.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<classRec name='ArrayIterator' fullname='org.as3commons.collections.iterators:ArrayIterator' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\iterators\ArrayIterator.as' namespace='org.as3commons.collections.iterators' access='public' baseclass='Object' interfaces='org.as3commons.collections.framework:IListIterator' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Array iterator.
	 
	 <p><strong>Description</strong></p>
	 
	 <p>The <code>ArrayIterator</code> is an <code>IListIterator</code> capable to
	 enumerate an arbitrary array.</p>
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 09.03.2009
	 ]]></author>
<see><![CDATA[org.as3commons.collections.framework.IListIterator IListIterator interface - Description of the basic list iterator features.
	 ]]></see>
</classRec>
<method name='ArrayIterator' fullname='org.as3commons.collections.iterators:ArrayIterator/ArrayIterator' isStatic='false' isFinal='false' isOverride='false'  param_names='array;index' param_types='Array;uint' param_defaults='undefined;0' result_type='*'>
<description><![CDATA[
		 ArrayIterator constructor.
		 
		 <p>If <code>index</code> is specified, the iterator returns the item at that
		 index with the first call to <code>next()</code> and the item at <code>index -1</code>
		 with the first call to <code>previous()</code>.</p>
		 
		 ]]></description>
<param><![CDATA[array The array to be enumerated.
		 ]]></param>
<param><![CDATA[index Start position of enumeration.
		 ]]></param>
</method>
<method name='end' fullname='org.as3commons.collections.iterators:ArrayIterator/end' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 
		 Resets the iterator to the position after the last item.
		 
		 <p>The last item of the collection is then returned with a subsequent
		 call to <code>previous()</code>.</p>
		 ]]></description>
</method>
<method name='hasNext' fullname='org.as3commons.collections.iterators:ArrayIterator/hasNext' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		 
		 Returns <code>true</code> if there are succeeding items to be enumerated.
		 
		 <p>Returns <code>false</code>, if the internal cursor is placed after the
		 last item or the collection is empty.</p>
		 
		 ]]></description>
<return><![CDATA[<code>true</code> if there are items left to be enumerated.
		 ]]></return>
</method>
<method name='hasPrevious' fullname='org.as3commons.collections.iterators:ArrayIterator/hasPrevious' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		 
		 Returns <code>true</code> if there are preceeding items to be enumerated.
		 
		 <p>Returns <code>false</code>, if the internal cursor is placed before the
		 first item or the collection is empty.</p>
		 
		 ]]></description>
<return><![CDATA[<code>true</code> if there are items left to be enumerated.
		 ]]></return>
</method>
<method name='next' fullname='org.as3commons.collections.iterators:ArrayIterator/next' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 
		 Returns the next item and places the internal cursor after that item.
		 
		 <p>Returnes <code>undefined</code> if no next item exists or the collection is empty.</p>
		 
		 ]]></description>
<return><![CDATA[The next item of iteration or <code>undefined</code> if no such item exists.
		 ]]></return>
</method>
<method name='previous' fullname='org.as3commons.collections.iterators:ArrayIterator/previous' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 
		 Returns the previous item and places the internal cursor before that item. 
		 
		 <p>Returnes <code>undefined</code> if no previous item exists or the collection is empty.</p>
		 
		 ]]></description>
<return><![CDATA[The previous item of iteration or <code>undefined</code> if no such item exists.
		 ]]></return>
</method>
<method name='removeCurrent' fullname='org.as3commons.collections.iterators:ArrayIterator/protected:removeCurrent' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 Template method to enable subclasses of this iterator to
		 remove the current item from its particular associated
		 collection.
		 ]]></description>
</method>
<method name='remove' fullname='org.as3commons.collections.iterators:ArrayIterator/remove' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		 
		 Removes the current item from the collection if any.
		 
		 ]]></description>
<return><![CDATA[<code>true</code> if an item has been removed.
		 ]]></return>
</method>
<method name='start' fullname='org.as3commons.collections.iterators:ArrayIterator/start' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 
		 Resets the iterator to the position before the first item.
		 
		 <p>The first item of the collection is then returned with a subsequent
		 call to <code>next()</code>.</p>
		 ]]></description>
</method>
<method name='current' fullname='org.as3commons.collections.iterators:ArrayIterator/current/get' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 
		 The item that most recently has been returned by <code>next()</code>
		 or <code>previous()</code>.
		 
		 <p>Returns <code>undefined</code> if the iterator points to the postion before the first
		 or after the last item or the collection is empty.</p>
		 
		 <p>The current item is nullified after all operations that modify the underlying
		 collection order (<code>add(), remove()</code>) or modify the cursor position
		 (<code>start(), end()</code>).</p>
		 
		 <p>Returns initially <code>undefined</code>.</p>
		 
		 ]]></description>
<return><![CDATA[The last returned item or <code>undefined</code> if no such item.
		 ]]></return>
</method>
<method name='index' fullname='org.as3commons.collections.iterators:ArrayIterator/index/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
		 
		 The index of the last returned item.
		 
		 <p><code>-1</code> if the iterator points to the postion before the first
		 or after the last item or the list is empty.</p>
		 
		 <p>The index is reset to <code>-1</code> after all operations that modify the underlying
		 list order (<code>add(), remove()</code>) or modify the cursor position
		 (<code>start(), end()</code>).</p>
		 
		 <p>Initially <code>-1</code>.</p>
		 ]]></description>
</method>
<method name='nextIndex' fullname='org.as3commons.collections.iterators:ArrayIterator/nextIndex/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
		 
		 The index of the item right to the current cursor position.
		 
		 <p>The item at this index is returned with the next call
		 to <code>next()</code>.</p>
		 
		 <p><code>-1</code> if the iterator is positioned at end or
		 the list is emtpy.</p>
		 ]]></description>
</method>
<method name='previousIndex' fullname='org.as3commons.collections.iterators:ArrayIterator/previousIndex/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
		 
		 The index of the item left to the current cursor position.
		 
		 <p>The item at this index is returned with the next call
		 to <code>previous()</code>.</p>
		 
		 <p><code>-1</code> if the iterator is positioned at start or
		 the list is emtpy.</p>
		 ]]></description>
</method>
<field name='_array' fullname='org.as3commons.collections.iterators:ArrayIterator/protected:_array' type='Array' isStatic='false' isConst='false' >
<description><![CDATA[
		 The array to enumerate.
		 ]]></description>
</field>
<field name='_current' fullname='org.as3commons.collections.iterators:ArrayIterator/protected:_current' type='int' isStatic='false' isConst='false' defaultValue='-1' >
<description><![CDATA[
		 The index of the last returned item.
		 
		 <p>Initially this property is set to <code>-1</code> (no item returned yet).</p>
		 
		 <p><code>start(), end()</code> set this property to <code>-1</code>.</p>
		 ]]></description>
</field>
<field name='_next' fullname='org.as3commons.collections.iterators:ArrayIterator/protected:_next' type='int' isStatic='false' isConst='false' >
<description><![CDATA[
		 The cursor position.
		 
		 <p>The cursor is positioned before the item stored in the <code>_next</code>
		 property. If the array is empty or the cursor is placed after the
		 last item, <code>_next</code> has the value <code>-1</code>.</p>
		 ]]></description>
</field>
<packageRec name='org.as3commons.collections.null' fullname='org.as3commons.collections.null'>
<description><![CDATA[
 Copyright 2010-2001 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<classRec name='StringSet' fullname='org.as3commons.collections:StringSet' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\StringSet.as' namespace='org.as3commons.collections' access='public' baseclass='Object' interfaces='org.as3commons.collections.framework:ISet' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 String set implementation.
	 
	 <p>The <code>StringSet</code> stores literal values.</p>
	 
	 <p>You are still allowed to add complex or numeric items. No error is thrown.</p>
	 
	 <p>Complex items are stored with their String representation such as
	 <code>[object Object]</code>.</p>
	 
	 <p>When you use items containing numeric values (0, "0", 1, "1", -1, "-1", 1.5, "1.5"),
	 you should have in mind that the items implicitely get converted as follows:</p>
	 
	 <ul>
	 <li>Int <code>0</code> is stored and returned as int <code>0</code>.</li>
	 <li>String <code>"0"</code> is stored and returned as int <code>"0"</code>.</li>
	 <li>Int <code>1</code> is stored and returned as int <code>1</code>.</li>
	 <li>String <code>"1"</code> is stored and returned as int <code>"1"</code>.</li>
	 <li>Int <code>-1</code> is stored and returned as String <code>"-1"</code>.</li>
	 <li>String <code>"-1"</code> is stored and returned as String <code>"-1"</code>.</li>
	 <li>Int <code>1.5</code> is stored and returned as String <code>"1.5"</code>.</li>
	 <li>String <code>"1.5"</code> is stored and returned as String <code>"1.5"</code>.</li>
	 </ul>
	 
	 <p>In any case, you are safe using the <code>StringSet</code> with non-numeric
	 literals or non negative integer values.</p>
	 
	 <p>Note to the universal type <code>/code>. The <code>StringSet</code> still implements
	 the <code>ISet</code> interface. This interface allows to pass and returns objects of the universal
	 type <code>/code>. This is not actually what we like, but since ActionScript does not
	 support generics, there is no other way to define a base interface for all set
	 implementations. If you are not comfortable with this, please make your own custom
	 typed copy of this class.</p>
	 
	 <p>In difference to the basic <code>Set</code> implementation, the <code>StringSet</code>
	 maintains an object as its source and hence requires less memory.</p>
	 
	 <p>See the <code>Set</code> documentation for more details.</p>
	 
	 <p>The <code>Set</code> maintains a dictionary as its source.</p>
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 19.09.2011
	 ]]></author>
<see><![CDATA[org.as3commons.collections.Set Basic set implementation - Basic set implementation description.
	 ]]></see>
</classRec>
<method name='StringSet' fullname='org.as3commons.collections:StringSet/StringSet' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Set constructor.
		 ]]></description>
</method>
<method name='add' fullname='org.as3commons.collections:StringSet/add' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 
		 Adds an item to the set.
		 
		 <p>If the set already contains the given item, the method abords with <code>false</code>.</p>
		 
		 <p>The <code>LinkedSet</code> appends the item.</p>
		 
		 <p>The position of items that are added to a <code>SortedSet</code>
		 depends on its sort order.</p>
		 
		 ]]></description>
<param><![CDATA[item The item to add.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item has been added.
		 ]]></return>
</method>
<method name='clear' fullname='org.as3commons.collections:StringSet/clear' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		 
		 Removes all items from the collection.
		 
		 <p>If the collection is already empty, the method aborts with <code>false</code>.</p>
		 
		 ]]></description>
<return><![CDATA[<code>true</code> if items have been removed.
		 ]]></return>
</method>
<method name='has' fullname='org.as3commons.collections:StringSet/has' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 
		 Tests if an item is contained by the collection.
		 
		 ]]></description>
<param><![CDATA[item The item to test.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item is contained.
		 ]]></return>
</method>
<method name='iterator' fullname='org.as3commons.collections:StringSet/iterator' isStatic='false' isFinal='false' isOverride='false'  param_names='cursor' param_types='*' param_defaults='unknown' result_type='org.as3commons.collections.framework:IIterator'>
<description><![CDATA[
		 
		 Returns an iterator over the iterable data structure.
		 
		 <p>The <code>cursor</code> parameter is optional and not considered by all iterable
		 data structures. E.g. the iterator of an unordered collection such as <code>Map</code>
		 or <code>Set</code> starts always with the first item found. Still passing a parameter to
		 such a data structure does not throw an error and will simply show no effect.</p>
		 
		 <p>The type of the cursor is unspecified and depends on the particular data structure.
		 E.g. lists allow to specify an index, sets to specify an item and maps to specify a key.</p>
		 
		 <p>If <code>cursor</code> is specified, the iterator returns the item that is related
		 to that cursor with the first call to <code>next()</code> (and its predecessor with
		 the first call to <code>previous()</code> if the iterator allows bidirectional
		 navigation.</p>
		 
		 ]]></description>
<param><![CDATA[cursor The initial cursor position.
		 ]]></param>
<return><![CDATA[An iterator.
		 ]]></return>
</method>
<method name='remove' fullname='org.as3commons.collections:StringSet/remove' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 
		 Removes an item from the collection.
		 
		 <p>Trying to remove an item which is not contained by the collection
		 leaves the collection untouched and returns <code>false</code>.</p>
		 
		 <p>If the collection contains multiple entries of the given item
		 the first occurrence of the item will be removed.</p>
		 
		 ]]></description>
<param><![CDATA[item The item to remove.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item has been removed.
		 ]]></return>
</method>
<method name='toArray' fullname='org.as3commons.collections:StringSet/toArray' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[
		 
		 Returns an array of all items.
		 
		 <p>The order of items in the array is the same as in the particular collection.</p>
		 
		 <p>Certain collections do not have an explicit order (<code>Map</code>, <code>Set</code>).
		 The order of the items in the array is then not predictable.</p>  
		 
		 <p>If the collection maintains an array as its data source, a copy
		 of the internal array is returned rather than the original array.</p>
		 
		 ]]></description>
<return><![CDATA[An array of the items of the collection.
		 ]]></return>
</method>
<method name='size' fullname='org.as3commons.collections:StringSet/size/get' isStatic='false' isFinal='false' isOverride='false'  result_type='uint'>
<description><![CDATA[
		 
		 The number of items contained by the collection.
		 ]]></description>
</method>
<field name='_items' fullname='org.as3commons.collections:StringSet/private:_items' type='Object' isStatic='false' isConst='false' >
<description><![CDATA[
		 The string items.
		 ]]></description>
</field>
<field name='_size' fullname='org.as3commons.collections:StringSet/private:_size' type='uint' isStatic='false' isConst='false' defaultValue='0' >
<description><![CDATA[
		 The set size.
		 ]]></description>
</field>
<packageRec name='org.as3commons.collections.null' fullname='org.as3commons.collections.null'>
<description><![CDATA[
 Copyright 2010-2011 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<classRec name='StringMap' fullname='org.as3commons.collections:StringMap' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\StringMap.as' namespace='org.as3commons.collections' access='public' baseclass='Object' interfaces='org.as3commons.collections.framework:IMap' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 String map implementation.
	 
	 <p>The <code>StringMap</code> maps literal keys to values.</p>
	 
	 <p>You are still allowed to add complex or numeric keys. No error is thrown.</p>
	 
	 <p>Complex keys are stored with their String representation such as
	 <code>[object Object]</code>.</p>
	 
	 <p>When you use keys containing numeric values (0, "0", 1, "1", -1, "-1", 1.5, "1.5"),
	 you should have in mind that the keys implicitely get converted as follows:</p>
	 
	 <ul>
	 <li>Int <code>0</code> is stored and returned as int <code>0</code>.</li>
	 <li>String <code>"0"</code> is stored and returned as int <code>"0"</code>.</li>
	 <li>Int <code>1</code> is stored and returned as int <code>1</code>.</li>
	 <li>String <code>"1"</code> is stored and returned as int <code>"1"</code>.</li>
	 <li>Int <code>-1</code> is stored and returned as String <code>"-1"</code>.</li>
	 <li>String <code>"-1"</code> is stored and returned as String <code>"-1"</code>.</li>
	 <li>Int <code>1.5</code> is stored and returned as String <code>"1.5"</code>.</li>
	 <li>String <code>"1.5"</code> is stored and returned as String <code>"1.5"</code>.</li>
	 </ul>
	 
	 <p>In any case, you are safe using the <code>StringMap</code> with non-numeric
	 literals or non negative integer values.</p>
	 
	 <p>Note to the universal type <code>/code>. The <code>StringMap</code> still implements
	 the <code>IMap</code> interface. This interface allows to pass and returns objects of the universal
	 type <code>/code>. This is not actually what we like, but since ActionScript does not
	 support generics, there is no other way to define a base interface for all map
	 implementations. If you are not comfortable with this, please make your own custom
	 typed copy of this class.</p>
	 
	 <p>In difference to the basic <code>Map</code> implementation, the <code>StringMap</code>
	 maintains an object as its source and hence requires less memory.</p>
	 
	 <p>See the <code>Map</code> documentation for more details.</p>
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 19.09.2011
	 ]]></author>
<see><![CDATA[org.as3commons.collections.Map Basic map implementation - Basic map implementation description.
	 ]]></see>
</classRec>
<method name='StringMap' fullname='org.as3commons.collections:StringMap/StringMap' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Map constructor.
		 ]]></description>
</method>
<method name='add' fullname='org.as3commons.collections:StringMap/add' isStatic='false' isFinal='false' isOverride='false'  param_names='key;item' param_types='*;*' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[
		 
		 Adds an item to the map.
		 
		 <p>If the map already contains the given key, the method abords with <code>false</code>.</p>
		 
		 <p>The <code>LinkedMap</code> appends the item.</p>
		 
		 <p>The position of items that are added to a <code>SortedMap</code>
		 depends on its sort order.</p>
		 
		 ]]></description>
<param><![CDATA[key The key of the item to add.
		 ]]></param>
<param><![CDATA[item The item to add.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item has been added.
		 ]]></return>
</method>
<method name='clear' fullname='org.as3commons.collections:StringMap/clear' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		 
		 Removes all items from the collection.
		 
		 <p>If the collection is already empty, the method aborts with <code>false</code>.</p>
		 
		 ]]></description>
<return><![CDATA[<code>true</code> if items have been removed.
		 ]]></return>
</method>
<method name='count' fullname='org.as3commons.collections:StringMap/count' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='uint'>
<description><![CDATA[
		 
		 Returns the number of occurrences of an item.
		 
		 ]]></description>
<return><![CDATA[Number of occurrences of the given item.
		 ]]></return>
</method>
<method name='hasKey' fullname='org.as3commons.collections:StringMap/hasKey' isStatic='false' isFinal='false' isOverride='false'  param_names='key' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 
		 Returns <code>true</code> if the map contains the given key.
		 
		 ]]></description>
<param><![CDATA[key The key to test.
		 ]]></param>
<return><![CDATA[<code>true</code> if the key is contained.
		 ]]></return>
</method>
<method name='has' fullname='org.as3commons.collections:StringMap/has' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 
		 Tests if an item is contained by the collection.
		 
		 ]]></description>
<param><![CDATA[item The item to test.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item is contained.
		 ]]></return>
</method>
<method name='itemFor' fullname='org.as3commons.collections:StringMap/itemFor' isStatic='false' isFinal='false' isOverride='false'  param_names='key' param_types='*' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 
		 Returns the item associated with the given key.
		 
		 ]]></description>
<param><![CDATA[key The key.
		 ]]></param>
<return><![CDATA[The item if the key is contained, else <code>undefined</code>.
		 ]]></return>
</method>
<method name='itemRemoved' fullname='org.as3commons.collections:StringMap/protected:itemRemoved' isStatic='false' isFinal='false' isOverride='false'  param_names='key;item' param_types='*;*' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		 Template method to notify subclasses after an item has been removed.
		 
		 ]]></description>
<param><![CDATA[item The removed item.
		 ]]></param>
<param><![CDATA[node The former index of the removed item.
		 ]]></param>
</method>
<method name='iterator' fullname='org.as3commons.collections:StringMap/iterator' isStatic='false' isFinal='false' isOverride='false'  param_names='cursor' param_types='*' param_defaults='unknown' result_type='org.as3commons.collections.framework:IIterator'>
<description><![CDATA[
		 
		 Returns an iterator over the iterable data structure.
		 
		 <p>The <code>cursor</code> parameter is optional and not considered by all iterable
		 data structures. E.g. the iterator of an unordered collection such as <code>Map</code>
		 or <code>Set</code> starts always with the first item found. Still passing a parameter to
		 such a data structure does not throw an error and will simply show no effect.</p>
		 
		 <p>The type of the cursor is unspecified and depends on the particular data structure.
		 E.g. lists allow to specify an index, sets to specify an item and maps to specify a key.</p>
		 
		 <p>If <code>cursor</code> is specified, the iterator returns the item that is related
		 to that cursor with the first call to <code>next()</code> (and its predecessor with
		 the first call to <code>previous()</code> if the iterator allows bidirectional
		 navigation.</p>
		 
		 ]]></description>
<param><![CDATA[cursor The initial cursor position.
		 ]]></param>
<return><![CDATA[An iterator.
		 ]]></return>
</method>
<method name='keyIterator' fullname='org.as3commons.collections:StringMap/keyIterator' isStatic='false' isFinal='false' isOverride='false'  result_type='org.as3commons.collections.framework:IIterator'>
<description><![CDATA[
		 
		 Returns an iterator over the keys of the map.
		 
		 <p>The order of keys returned by the iterator is the same as in the particular collection.</p>
		 
		 ]]></description>
<return><![CDATA[An iterator over the map keys.
		 ]]></return>
</method>
<method name='keysToArray' fullname='org.as3commons.collections:StringMap/keysToArray' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[
		 
		 Returns an array of all keys in the order of the particular map.
		 
		 <p>The order of keys in the array is the same as in the particular collection.</p>
		 
		 ]]></description>
<return><![CDATA[An array of the keys of the map.
		 ]]></return>
</method>
<method name='removeAll' fullname='org.as3commons.collections:StringMap/removeAll' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='uint'>
<description><![CDATA[
		 
		 Removes all occurrences of a particular item from the collection.
		 
		 <p>The items are removed in the order they are stored.</p>
		 
		 ]]></description>
<param><![CDATA[item The item to remove completely from the collection.
		 ]]></param>
<return><![CDATA[Number of items removed.
		 ]]></return>
</method>
<method name='removeKey' fullname='org.as3commons.collections:StringMap/removeKey' isStatic='false' isFinal='false' isOverride='false'  param_names='key' param_types='*' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 
		 Removes the given key and its associated item from the map.
		 
		 <p>If the key is not contained the method abords with <code>undefined</code>.</p>
		 ]]></description>
<param><![CDATA[key The key.
		 ]]></param>
<return><![CDATA[The item associated with the removed key or <code>undefined</code> if the key is not contained.
		 ]]></return>
</method>
<method name='remove' fullname='org.as3commons.collections:StringMap/remove' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 
		 Removes an item from the collection.
		 
		 <p>Trying to remove an item which is not contained by the collection
		 leaves the collection untouched and returns <code>false</code>.</p>
		 
		 <p>If the collection contains multiple entries of the given item
		 the first occurrence of the item will be removed.</p>
		 
		 ]]></description>
<param><![CDATA[item The item to remove.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item has been removed.
		 ]]></return>
</method>
<method name='replaceFor' fullname='org.as3commons.collections:StringMap/replaceFor' isStatic='false' isFinal='false' isOverride='false'  param_names='key;item' param_types='*;*' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[
		 
		 Replaces the item associated with the given key.
		 
		 <p>If the key is not contained or the given item equals the item
		 stored with the given key, the method abords with <code>false</code>.</p>
		 
		 ]]></description>
<param><![CDATA[key The key.
		 ]]></param>
<param><![CDATA[item The replacing item.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item has been replaced.
		 ]]></return>
</method>
<method name='toArray' fullname='org.as3commons.collections:StringMap/toArray' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[
		 
		 Returns an array of all items.
		 
		 <p>The order of items in the array is the same as in the particular collection.</p>
		 
		 <p>Certain collections do not have an explicit order (<code>Map</code>, <code>Set</code>).
		 The order of the items in the array is then not predictable.</p>  
		 
		 <p>If the collection maintains an array as its data source, a copy
		 of the internal array is returned rather than the original array.</p>
		 
		 ]]></description>
<return><![CDATA[An array of the items of the collection.
		 ]]></return>
</method>
<method name='size' fullname='org.as3commons.collections:StringMap/size/get' isStatic='false' isFinal='false' isOverride='false'  result_type='uint'>
<description><![CDATA[
		 
		 The number of items contained by the collection.
		 ]]></description>
</method>
<field name='_map' fullname='org.as3commons.collections:StringMap/protected:_map' type='Object' isStatic='false' isConst='false' >
<description><![CDATA[
		 The stringed key item map.
		 ]]></description>
</field>
<field name='_size' fullname='org.as3commons.collections:StringMap/protected:_size' type='uint' isStatic='false' isConst='false' defaultValue='0' >
<description><![CDATA[
		 The map size.
		 ]]></description>
</field>
<packageRec name='org.as3commons.collections.null' fullname='org.as3commons.collections.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<classRec name='SortedList' fullname='org.as3commons.collections:SortedList' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\SortedList.as' namespace='org.as3commons.collections' access='public' baseclass='org.as3commons.collections.framework.core:AbstractList' interfaces='org.as3commons.collections.framework:ISortedList' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Sort order implementation of a list.
	 
	 <p><strong>Description</strong></p>
	 
	 <p>The <code>SortedList</code> maintains an array as its source. Insertion or
	 lookup operations are performed using a binary array search.</p>
	 
	 <p><strong>Runtime of operations</strong></p>
	 
	 <ul>
	 <li>Getting of items - constant runtime O(1).<br />
	 <code>first, last, itemAt()</code></li>
	 <li>Removing of items at end - constant runtime O(1).<br />
	 <code>removeLast()</code></li>
	 <li>Item lookup inspection operations - logarithmic runtime O(log n).<br />
	 has(), count(), firstIndexOf(), lastIndexOf(), lesserIndex(), higherIndex(), equalIndices()</code></li>
	 <li>Adding or removing of items - linear runtime O(n).<br />
	 <code>add(), removeFirst(), remove(), removeAll()</code></li>
	 </ul>
	 
	 <p><strong>Notes</strong></p>
	 
	 <p>The <code>iterator()</code> method accepts an index position as the cursor parameter.
	 If the specified index position exceeds the list length, the returned iterator is positioned
	 at the end of the list.</p>
	 
	 <p>The <code>iterator()</code> method retuns an <code>IListIterator</code>.</p>
	 
	 <p><code>null</code> is allowed if the comparator allows <code>null</code>.</p>
	 
	 <p id="link_SortedListExample"><strong>SortedList example</strong></p>
	 
	 <p>This example shows the specific behaviour of a <code>SortedList</code>.
	 The general work with collections and iterators is more detailed illustrated
	 in the <code>ArrayList</code> examples below.</p>
	 
	 <a class="exampleCollapsed" href="#link_SortedListExample" onClick="toggleExample(this, 'SortedListExample');">Show example</a><br /><div id="SortedListExample" style='display:none'><listing version="3.0">package {
    import org.as3commons.collections.SortedList;
    import org.as3commons.collections.framework.ICollectionIterator;
    import org.as3commons.collections.framework.IIterator;
    import org.as3commons.collections.framework.IListIterator;
    import org.as3commons.collections.utils.StringComparator;
    import flash.display.Sprite;

    public class SortedListExample extends Sprite {

        public function SortedListExample() {
            var list : SortedList = new SortedList(new StringComparator());
            
            // Add

            list.add("d");
            list.add("a");
            list.add("a");
            list.add("f");
            list.add("c");
            list.add("b");
            list.add("a");
            list.add("c");
            trace (list.toArray()); // a,a,a,b,c,c,d,f

            list.array = ["d", "a", "a", "f", "c", "b", "a", "c"];
            trace (list.toArray()); // a,a,a,b,c,c,d,f

            // Inspection

            trace (list.first); // a
            trace (list.last); // f

            trace (list.hasEqual("a")); // true
            trace (list.hasEqual("e")); // false
            trace (list.equalIndices("a")); // 0,1,2

            trace (list.lesserIndex("a")); // -1
            trace (list.lesserIndex("c")); // 3
            
            trace (list.higherIndex("c")); // 6
            trace (list.higherIndex("f")); // -1
            trace (list.higherIndex("x")); // -1

            // Iterator
            
            var iterator : IIterator = list.iterator();
            trace (iterator is IIterator); // true
            trace (iterator is ICollectionIterator); // true
            trace (iterator is IListIterator); // true
            
            while (iterator.hasNext()) {
                trace (iterator.next()); // a,a,a,b,c,c,d,f
            }
        }
    }
}
</listing></div>
	 
	 <p id="link_ArrayListExample"><strong>ArrayList example</strong></p>
	 
	 <a class="exampleCollapsed" href="#link_ArrayListExample" onClick="toggleExample(this, 'ArrayListExample');">Show example</a><br /><div id="ArrayListExample" style='display:none'><listing version="3.0">package {
    import org.as3commons.collections.ArrayList;
    import org.as3commons.collections.framework.ICollectionIterator;
    import org.as3commons.collections.framework.IIterator;
    import org.as3commons.collections.framework.IListIterator;
    import org.as3commons.collections.framework.IOrderedListIterator;
    import org.as3commons.collections.utils.StringComparator;
    import flash.display.Sprite;

    public class ArrayListExample extends Sprite {

        public function ArrayListExample() {
            var list : ArrayList = new ArrayList();
            
            // Add

            list.add("a");
            list.add("b");
            list.addAllAt(1, ["c", "d"]);
            trace (list.toArray()); // a,c,d,b

            list.addFirst("e");
            list.addLast("a");
            list.addAt(3, "a");
            trace (list.toArray()); // e,a,c,a,d,b,a
            
            // Replace

            list.replaceAt(2, "a");
            list.replaceAt(3, "f");
            trace (list.toArray()); // e,a,a,f,d,b,a

            // Inspection

            trace (list.size); // 7
            trace (list.has("b")); // true
            trace (list.itemAt(3)); // f
            trace (list.firstIndexOf("a")); // 1
            trace (list.lastIndexOf("a")); // 6
            trace (list.count("a")); // 3
            
            // Reorder

            list.reverse();
            trace (list.toArray()); // a,b,d,f,a,a,e

            list.sort(new StringComparator());
            trace (list.toArray()); // a,a,a,b,d,e,f
            
            // Iterator

            var iterator : IIterator = list.iterator();
            trace (iterator is IIterator); // true
            trace (iterator is ICollectionIterator); // true
            trace (iterator is IListIterator); // true
            trace (iterator is IOrderedListIterator); // true

            while (iterator.hasNext()) {
                trace (iterator.next()); // a,a,a,b,d,e,f
            }

            // List iterator

            var listIterator : IListIterator = list.iterator() as IListIterator;
            while (listIterator.hasNext()) {
                listIterator.next();
                trace (listIterator.index + "=" + listIterator.current);
            }

            // 0=a
            // 1=a
            // 2=a
            // 3=b
            // 4=d
            // 5=e
            // 6=f

            // Remove

            list.remove("a");
            trace (list.toArray()); // a,a,b,d,e,f

            list.removeAll("a");
            trace (list.toArray()); // b,d,e,f

            list.removeAt(1);
            list.removeFirst();
            list.removeLast();
            trace (list.toArray()); // e

            list.clear();
            trace (list.toArray()); // []
        }
    }
}
</listing></div>
	 
	 <p id="link_ArrayListIteratorExample"><strong>ArrayListIterator example</strong></p>
	 
	 <a class="exampleCollapsed" href="#link_ArrayListIteratorExample" onClick="toggleExample(this, 'ArrayListIteratorExample');">Show example</a><br /><div id="ArrayListIteratorExample" style='display:none'><listing version="3.0">package {
    import org.as3commons.collections.ArrayList;
    import org.as3commons.collections.framework.IOrderedListIterator;
    import flash.display.Sprite;

    public class ArrayListIteratorExample extends Sprite {

        public function ArrayListIteratorExample() {
            var list : ArrayList = new ArrayList();
            var iterator : IOrderedListIterator;
            var item : 
            
            // ^ = cursor, [n] = current
            
            // Navigation
            
            list.array = [1, 2, 3];
            iterator = list.iterator() as IOrderedListIterator;
            
                                      //  ^  1  2  3
            iterator.next();          // [1] ^  2  3
            iterator.next();          //  1 [2] ^  3
            iterator.next();          //  1  2 [3] ^
            iterator.next();          //  1  2  3  ^
            iterator.previous();      //  1  2  ^ [3]
            iterator.previous();      //  1  ^ [2] 3
            iterator.previous();      //  ^ [1] 2  3
            iterator.previous();      //  ^  1  2  3

            iterator.next();          // [1] ^  2  3
            iterator.next();          //  1 [2] ^  3
            iterator.start();         //  ^  1  2  3

            iterator.next();          // [1] ^  2  3
            iterator.next();          //  1 [2] ^  3
            iterator.end();           //  1  2  3  ^
            
            // Current and index

            iterator = list.iterator() as IOrderedListIterator;
            
            with (iterator) {
                trace (index, current, previousIndex, nextIndex);
                // -1 undefined -1 0

                next();
                trace (index, current, previousIndex, nextIndex);
                // 0 1 0 1

                next();
                trace (index, current, previousIndex, nextIndex);
                // 1 2 1 2

                next();
                trace (index, current, previousIndex, nextIndex);
                // 2 3 2 -1

                next();
                trace (index, current, previousIndex, nextIndex);
                // -1 undefined 2 -1
            }
            
            // Start position
            
            iterator = list.iterator() as IOrderedListIterator;   //  ^  1  2  3
            iterator = list.iterator(1) as IOrderedListIterator;  //  1  ^  2  3
            iterator = list.iterator(2) as IOrderedListIterator;  //  1  2  ^  3
            iterator = list.iterator(10) as IOrderedListIterator; //  1  2  3  ^

            // Replace

            iterator = list.iterator() as IOrderedListIterator;

                                      //  ^  1  2  3
            iterator.next();          // [1] ^  2  3
            iterator.next();          //  1 [2] ^  3
            iterator.replace(4);      //  1 [4] ^  3
            iterator.next();          //  1  4 [3] ^
            iterator.replace(5);      //  1  4 [5] ^
            iterator.next();          //  1  4  5  ^
            iterator.replace(6);      //  1  4  5  ^

            // Remove

            list.array = [1, 2, 3];
            iterator = list.iterator() as IOrderedListIterator;
            
                                      //  ^  1  2  3
            iterator.next();          // [1] ^  2  3
            iterator.next();          //  1 [2] ^  3
            iterator.remove();        //  1  ^  3
            iterator.next();          //  1 [3] ^
            iterator.remove();        //  1  ^
            iterator.remove();        //  1  ^

            // Add

            list.array = [1, 2, 3];
            iterator = list.iterator() as IOrderedListIterator;
            
                                      //  ^  1  2  3
            iterator.addAfter(4);     //  ^  4  1  2  3
            iterator.addBefore(5);    //  5  ^  4  1  2  3

            iterator.next();          //  5 [4] ^  1  2  3
            iterator.next();          //  5  4 [1] ^  2  3
            iterator.addBefore(6);    //  5  4  1  6  ^  2  3
            iterator.addAfter(7);     //  5  4  1  6  ^  7  2  3

            iterator.next();          //  5  4  1  6 [7] ^  2  3
            iterator.next();          //  5  4  1  6  7 [2] ^  3
            iterator.next();          //  5  4  1  6  7  2 [3] ^
            iterator.addBefore(8);    //  5  4  1  6  7  2  3  8  ^
            iterator.addAfter(9);     //  5  4  1  6  7  2  3  8  ^  9
            
            // Add during iteration

            list.array = [1, 2, 3];
            iterator = list.iterator() as IOrderedListIterator;
            while (iterator.hasNext()) {
                item = iterator.next();
                trace (item); // 1,2,5,3,7

                if (item == 1) iterator.addBefore(4);   //  1  4  ^  2  3
                if (item == 2) iterator.addAfter(5);    //  1  4  2  ^  5  3
                if (item == 5) iterator.addBefore(6);   //  1  4  2  5  6  ^  3
                if (item == 3) iterator.addAfter(7);    //  1  4  2  5  6  3  ^  7
            }
            trace (list.toArray()); // 1,4,2,5,6,3,7

            // Replace during iteration

            list.array = [1, 2, 3];
            iterator = list.iterator() as IOrderedListIterator;
            while (iterator.hasNext()) {
                item = iterator.next();
                trace (item); // 1,2,3

                if (item == 1) iterator.replace(4);   // [4] ^  2  3
                if (item == 2) iterator.replace(5);   //  4 [5] ^  3
                if (item == 3) iterator.replace(6);   //  4  5 [6] ^
            }
            trace (list.toArray()); // 4,5,6

            // Remove during iteration

            list.array = [1, 2, 3, 4, 5];
            iterator = list.iterator() as IOrderedListIterator;
            while (iterator.hasNext()) {
                item = iterator.next();
                trace (item); // 1,2,3,4,5

                if (item == 1) iterator.remove();   //  ^  2  3  4  5
                if (item == 3) iterator.remove();   //  2  ^  4  5
                if (item == 5) iterator.remove();   //  2  4  ^
            }
            trace (list.toArray()); // 2,4

            // Reverse iteration

            list.array = [1, 2, 3, 4, 5];
            iterator = list.iterator() as IOrderedListIterator;
            iterator.end();
            while (iterator.hasPrevious()) {
                trace (iterator.previous()); // 5,4,3,2,1
            }
        }
    }
}
</listing></div>
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 19.03.2010
	 ]]></author>
<see><![CDATA[org.as3commons.collections.framework.ISortedList ISortedList interface - Detailed description of the sorted list features.
	 ]]></see>
<see><![CDATA[org.as3commons.collections.framework.IListIterator IListIterator interface - Detailed description of the base list iterator features.
	 ]]></see>
<see><![CDATA[org.as3commons.collections.framework.IList IList interface - Detailed description of the base list features.
	 ]]></see>
</classRec>
<method name='SortedList' fullname='org.as3commons.collections:SortedList/SortedList' isStatic='false' isFinal='false' isOverride='false'  param_names='comparator' param_types='org.as3commons.collections.framework:IComparator' param_defaults='null' result_type='*'>
<description><![CDATA[
		 SortedArrayList constructor.
		 
		 ]]></description>
<param><![CDATA[comparator The sort criterion.
		 ]]></param>
</method>
<method name='add' fullname='org.as3commons.collections:SortedList/add' isStatic='false' isFinal='false' isOverride='true'  param_names='item' param_types='*' param_defaults='undefined' result_type='uint'>
<description><![CDATA[
		 
		 Adds an item to the list.
		 
		 <p>The <code>ArrayList</code> appends the item.</p>
		 
		 <p>The position of items that are added to a <code>SortedList</code>
		 depends on its sort order.</p>
		 
		 ]]></description>
<param><![CDATA[item The item to add.
		 ]]></param>
<return><![CDATA[The position where the item has been added.
		 ]]></return>
</method>
<method name='count' fullname='org.as3commons.collections:SortedList/count' isStatic='false' isFinal='false' isOverride='true'  param_names='item' param_types='*' param_defaults='undefined' result_type='uint'>
<description><![CDATA[
		 
		 Returns the number of occurrences of an item.
		 
		 ]]></description>
<return><![CDATA[Number of occurrences of the given item.
		 ]]></return>
</method>
<method name='equalIndices' fullname='org.as3commons.collections:SortedList/equalIndices' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='Array'>
<description><![CDATA[
		 
		 Returns an array of the indices of all items that are equal to the given item.
		 
		 <p>If there is no equal item, the method returns an empty array.</p>
		 
		 ]]></description>
<param><![CDATA[item The item to test.
		 ]]></param>
<return><![CDATA[An array of the indices of all equal items.
		 ]]></return>
</method>
<method name='firstIndexOfEqual' fullname='org.as3commons.collections:SortedList/protected:firstIndexOfEqual' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='int'>
<description><![CDATA[
		 Returns the index of the first equal item.
		 
		 <p>Returns <code>-1</code> if no equal item is contained.</p>
		 
		 ]]></description>
<param><![CDATA[item The item to test.
		 ]]></param>
<return><![CDATA[The first index of an equal item.
		 ]]></return>
</method>
<method name='firstIndexOf' fullname='org.as3commons.collections:SortedList/firstIndexOf' isStatic='false' isFinal='false' isOverride='true'  param_names='item' param_types='*' param_defaults='undefined' result_type='int'>
<description><![CDATA[
		 
		 Returns the index of the first occurrence of an item.
		 
		 ]]></description>
<param><![CDATA[item The item to test.
		 ]]></param>
<return><![CDATA[The first position of the item or <code>-1</code> if the item is not contained.
		 ]]></return>
</method>
<method name='hasEqual' fullname='org.as3commons.collections:SortedList/hasEqual' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 
		 Tests if the collection contains an item that is equal to the given item.
		 
		 <p>Returns of course <code>true</code> if the given item is contained.</p>
		 
		 ]]></description>
<param><![CDATA[item The item to test.
		 ]]></param>
<return><![CDATA[<code>true</code> if there is an equal item contained.
		 ]]></return>
</method>
<method name='has' fullname='org.as3commons.collections:SortedList/has' isStatic='false' isFinal='false' isOverride='true'  param_names='item' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 
		 Tests if an item is contained by the collection.
		 
		 ]]></description>
<param><![CDATA[item The item to test.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item is contained.
		 ]]></return>
</method>
<method name='higherIndex' fullname='org.as3commons.collections:SortedList/higherIndex' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='int'>
<description><![CDATA[
		 
		 Returns the index of the first item that is higher than the given item.
		 
		 ]]></description>
<param><![CDATA[item The item to test.
		 ]]></param>
<return><![CDATA[The index of the next higher item or <code>-1</code> if there is no higher item.
		 ]]></return>
</method>
<method name='lastIndexOfEqual' fullname='org.as3commons.collections:SortedList/protected:lastIndexOfEqual' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='int'>
<description><![CDATA[
		 Returns the index of the last equal item.
		 
		 <p>Returns <code>-1</code> if no equal item is contained.</p>
		 
		 ]]></description>
<param><![CDATA[item The item to test.
		 ]]></param>
<return><![CDATA[The last index of an equal item.
		 ]]></return>
</method>
<method name='lastIndexOf' fullname='org.as3commons.collections:SortedList/lastIndexOf' isStatic='false' isFinal='false' isOverride='true'  param_names='item' param_types='*' param_defaults='undefined' result_type='int'>
<description><![CDATA[
		 
		 Returns the index of the last occurrence of an item.
		 
		 ]]></description>
<param><![CDATA[item The item to test.
		 ]]></param>
<return><![CDATA[The last position of the item or <code>-1</code> if the item is not contained.
		 ]]></return>
</method>
<method name='lesserIndex' fullname='org.as3commons.collections:SortedList/lesserIndex' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='int'>
<description><![CDATA[
		 
		 Returns the index of the last item that is lesser than the given item.
		 
		 ]]></description>
<param><![CDATA[item The item to test.
		 ]]></param>
<return><![CDATA[The index of the last lesser item or <code>-1</code> if there is no lesser item.
		 ]]></return>
</method>
<method name='removeAll' fullname='org.as3commons.collections:SortedList/removeAll' isStatic='false' isFinal='false' isOverride='true'  param_names='item' param_types='*' param_defaults='undefined' result_type='uint'>
<description><![CDATA[
		 
		 Removes all occurrences of a particular item from the collection.
		 
		 <p>The items are removed in the order they are stored.</p>
		 
		 ]]></description>
<param><![CDATA[item The item to remove completely from the collection.
		 ]]></param>
<return><![CDATA[Number of items removed.
		 ]]></return>
</method>
<method name='remove' fullname='org.as3commons.collections:SortedList/remove' isStatic='false' isFinal='false' isOverride='true'  param_names='item' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 
		 Removes an item from the collection.
		 
		 <p>Trying to remove an item which is not contained by the collection
		 leaves the collection untouched and returns <code>false</code>.</p>
		 
		 <p>If the collection contains multiple entries of the given item
		 the first occurrence of the item will be removed.</p>
		 
		 ]]></description>
<param><![CDATA[item The item to remove.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item has been removed.
		 ]]></return>
</method>
<method name='comparator' fullname='org.as3commons.collections:SortedList/comparator/get' isStatic='false' isFinal='false' isOverride='false'  result_type='org.as3commons.collections.framework:IComparator'>
<description><![CDATA[
		 
		 Returns or sets the initial comparator of the collection.
		 
		 <p>You cannot reset a comparator of a collection that contains items.
		 In that case an <code>ArgumentError</code> is thrown.</p>
		 
		 ]]></description>
</method>
<method name='array' fullname='org.as3commons.collections:SortedList/array/set' isStatic='false' isFinal='false' isOverride='true'  param_names='array' param_types='Array' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 
		 Specifies an array to be maintained by the list.
		 
		 <p>Already contained elements will be removed beforehand.</p>
		 
		 <p>The list stores a copy of the given array not the array itself.</p>
		 
		 ]]></description>
<param><![CDATA[array The array.
		 ]]></param>
</method>
<method name='comparator' fullname='org.as3commons.collections:SortedList/comparator/set' isStatic='false' isFinal='false' isOverride='false'  param_names='comparator' param_types='org.as3commons.collections.framework:IComparator' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 
		 Returns or sets the initial comparator of the collection.
		 
		 <p>You cannot reset a comparator of a collection that contains items.
		 In that case an <code>ArgumentError</code> is thrown.</p>
		 
		 ]]></description>
</method>
<field name='_comparator' fullname='org.as3commons.collections:SortedList/protected:_comparator' type='org.as3commons.collections.framework:IComparator' isStatic='false' isConst='false' >
<description><![CDATA[
		 The sort criterion.
		 ]]></description>
</field>
<packageRec name='org.as3commons.collections.null' fullname='org.as3commons.collections.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<classRec name='Treap' fullname='org.as3commons.collections:Treap' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\Treap.as' namespace='org.as3commons.collections' access='public' baseclass='Object' interfaces='org.as3commons.collections.framework:IBinarySearchTree' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Treap data structure implementation.
	 
	 <p><strong>Description</strong></p>
	 
	 <p>A treap is a randomised binary search tree where degeneration can be minimised
	 by assigning a random priority value to each tree node. A treap is comparatively
	 easy to implement and is at the same time highly performant. <i>"To summarize, in
	 the mixed workload environment, the treap data structure outperformed the other 4
	 implementations by a rather significant margin."</i> [1] The implementation of
	 this class is taken from a Java template. [2]</p>
	 
	 <p>The differences between <code>SortedSet</code> and <code>Treap</code> are:</p>
	 
	 <ul>
	 <li>The set maintains an internal dictionary of item-node entries to enable constant
	 time item access.</li>
	 <li>The set implements a modified form of the treap which can host duplicates and
	 multiple equal items. The treap does not allow multiple equal items (and therefore
	 duplicates).</li>
	 </ul>
	 
	 <p><strong>Runtime of operations</strong></p>
	 
	 <ul>
	 <li>Getting or removing of items at start or at end - constant runtime O(1).<br />
	 <code>first, last, removeFirst(), removeLast()</code></li>
	 <li>Adding an removing of items - logarithmic runtime O(log n).<br />
	 add(), remove()</code></li>
	 <li>Inspection operations - logarithmic runtime O(log n).<br />
	 has(), lesser(), higher(), equalItems()</code></li>
	 </ul>
	 
	 <p><strong>Notes</strong></p>
	 
	 <p>The <code>iterator()</code> method accepts an item as the cursor parameter. If the given
	 item is not contained by the treap, it will be ignored.</p>
	 
	 <p>The <code>iterator()</code> method retuns an <code>ISortedSetIterator</code>.</p>
	 
	 <p><code>null</code> is allowed if the comparator allows <code>null</code>.</p>
	 
	 <p id="link_TreapExample"><strong>Treap example</strong></p>
	 
	 <p>This example shows the specific behaviour of a <code>Treap</code>.
	 The general work with collections and iterators is more detailed illustrated
	 in the <code>ArrayList</code> examples below.</p>
	 
	 <a class="exampleCollapsed" href="#link_TreapExample" onClick="toggleExample(this, 'TreapExample');">Show example</a><br /><div id="TreapExample" style='display:none'><listing version="3.0">package {
    import org.as3commons.collections.Treap;
    import org.as3commons.collections.framework.IBinarySearchTreeIterator;
    import org.as3commons.collections.framework.ICollectionIterator;
    import org.as3commons.collections.framework.IIterator;
    import org.as3commons.collections.utils.NumericComparator;
    import flash.display.Sprite;

    public class TreapExample extends Sprite {

        public function TreapExample() {
            var treap : Treap = new Treap(new NumericComparator());
            
            // Add
            
            treap.add(3);
            treap.add(4);
            treap.add(1);
            treap.add(5);
            treap.add(2);
            treap.add(3); // no effect (equal item already contained)
            trace (treap.toArray()); // 1,2,3,4,5
            
            // Inspection
            
            trace (treap.first); // 1
            trace (treap.last); // 5

            trace (treap.hasEqual(3)); // true
            trace (treap.hasEqual(6)); // false
            trace (treap.equalItem(3)); // 3
            
            trace (treap.lesser(0)); // undefined
            trace (treap.lesser(1)); // undefined
            trace (treap.lesser(2)); // 1
            trace (treap.lesser(8)); // 5
            
            trace (treap.higher(-5)); // 1
            trace (treap.higher(2)); // 3
            trace (treap.higher(5)); // undefined
            trace (treap.higher(8)); // undefined
            
            // Iterator

            var iterator : IIterator = treap.iterator();
            trace (iterator is IIterator); // true
            trace (iterator is ICollectionIterator); // true
            trace (iterator is IBinarySearchTreeIterator); // true
            
            while (iterator.hasNext()) {
                trace (iterator.next()); // 1,2,3,4,5
            }

            // Binary search tree iterator

            var bsti : IBinarySearchTreeIterator = treap.iterator() as IBinarySearchTreeIterator;
            trace (bsti.previousItem + " [" + bsti.current + "] " + bsti.nextItem);
            while (bsti.hasNext()) {
                bsti.next();
                trace (bsti.previousItem + " [" + bsti.current + "] " + bsti.nextItem);
            }

            // undefined [undefined] 1
            // 1 [1] 2
            // 2 [2] 3
            // 3 [3] 4
            // 4 [4] 5
            // 5 [5] undefined

            // Remove

            treap.removeFirst();
            treap.removeLast();
            trace (treap.toArray()); // 2,3,4
        }
    }
}
</listing></div>
	 
	 <p id="link_ArrayListExample"><strong>ArrayList example</strong></p>
	 
	 <a class="exampleCollapsed" href="#link_ArrayListExample" onClick="toggleExample(this, 'ArrayListExample');">Show example</a><br /><div id="ArrayListExample" style='display:none'><listing version="3.0">package {
    import org.as3commons.collections.ArrayList;
    import org.as3commons.collections.framework.ICollectionIterator;
    import org.as3commons.collections.framework.IIterator;
    import org.as3commons.collections.framework.IListIterator;
    import org.as3commons.collections.framework.IOrderedListIterator;
    import org.as3commons.collections.utils.StringComparator;
    import flash.display.Sprite;

    public class ArrayListExample extends Sprite {

        public function ArrayListExample() {
            var list : ArrayList = new ArrayList();
            
            // Add

            list.add("a");
            list.add("b");
            list.addAllAt(1, ["c", "d"]);
            trace (list.toArray()); // a,c,d,b

            list.addFirst("e");
            list.addLast("a");
            list.addAt(3, "a");
            trace (list.toArray()); // e,a,c,a,d,b,a
            
            // Replace

            list.replaceAt(2, "a");
            list.replaceAt(3, "f");
            trace (list.toArray()); // e,a,a,f,d,b,a

            // Inspection

            trace (list.size); // 7
            trace (list.has("b")); // true
            trace (list.itemAt(3)); // f
            trace (list.firstIndexOf("a")); // 1
            trace (list.lastIndexOf("a")); // 6
            trace (list.count("a")); // 3
            
            // Reorder

            list.reverse();
            trace (list.toArray()); // a,b,d,f,a,a,e

            list.sort(new StringComparator());
            trace (list.toArray()); // a,a,a,b,d,e,f
            
            // Iterator

            var iterator : IIterator = list.iterator();
            trace (iterator is IIterator); // true
            trace (iterator is ICollectionIterator); // true
            trace (iterator is IListIterator); // true
            trace (iterator is IOrderedListIterator); // true

            while (iterator.hasNext()) {
                trace (iterator.next()); // a,a,a,b,d,e,f
            }

            // List iterator

            var listIterator : IListIterator = list.iterator() as IListIterator;
            while (listIterator.hasNext()) {
                listIterator.next();
                trace (listIterator.index + "=" + listIterator.current);
            }

            // 0=a
            // 1=a
            // 2=a
            // 3=b
            // 4=d
            // 5=e
            // 6=f

            // Remove

            list.remove("a");
            trace (list.toArray()); // a,a,b,d,e,f

            list.removeAll("a");
            trace (list.toArray()); // b,d,e,f

            list.removeAt(1);
            list.removeFirst();
            list.removeLast();
            trace (list.toArray()); // e

            list.clear();
            trace (list.toArray()); // []
        }
    }
}
</listing></div>
	 
	 <p id="link_ArrayListIteratorExample"><strong>ArrayListIterator example</strong></p>
	 
	 <a class="exampleCollapsed" href="#link_ArrayListIteratorExample" onClick="toggleExample(this, 'ArrayListIteratorExample');">Show example</a><br /><div id="ArrayListIteratorExample" style='display:none'><listing version="3.0">package {
    import org.as3commons.collections.ArrayList;
    import org.as3commons.collections.framework.IOrderedListIterator;
    import flash.display.Sprite;

    public class ArrayListIteratorExample extends Sprite {

        public function ArrayListIteratorExample() {
            var list : ArrayList = new ArrayList();
            var iterator : IOrderedListIterator;
            var item : 
            
            // ^ = cursor, [n] = current
            
            // Navigation
            
            list.array = [1, 2, 3];
            iterator = list.iterator() as IOrderedListIterator;
            
                                      //  ^  1  2  3
            iterator.next();          // [1] ^  2  3
            iterator.next();          //  1 [2] ^  3
            iterator.next();          //  1  2 [3] ^
            iterator.next();          //  1  2  3  ^
            iterator.previous();      //  1  2  ^ [3]
            iterator.previous();      //  1  ^ [2] 3
            iterator.previous();      //  ^ [1] 2  3
            iterator.previous();      //  ^  1  2  3

            iterator.next();          // [1] ^  2  3
            iterator.next();          //  1 [2] ^  3
            iterator.start();         //  ^  1  2  3

            iterator.next();          // [1] ^  2  3
            iterator.next();          //  1 [2] ^  3
            iterator.end();           //  1  2  3  ^
            
            // Current and index

            iterator = list.iterator() as IOrderedListIterator;
            
            with (iterator) {
                trace (index, current, previousIndex, nextIndex);
                // -1 undefined -1 0

                next();
                trace (index, current, previousIndex, nextIndex);
                // 0 1 0 1

                next();
                trace (index, current, previousIndex, nextIndex);
                // 1 2 1 2

                next();
                trace (index, current, previousIndex, nextIndex);
                // 2 3 2 -1

                next();
                trace (index, current, previousIndex, nextIndex);
                // -1 undefined 2 -1
            }
            
            // Start position
            
            iterator = list.iterator() as IOrderedListIterator;   //  ^  1  2  3
            iterator = list.iterator(1) as IOrderedListIterator;  //  1  ^  2  3
            iterator = list.iterator(2) as IOrderedListIterator;  //  1  2  ^  3
            iterator = list.iterator(10) as IOrderedListIterator; //  1  2  3  ^

            // Replace

            iterator = list.iterator() as IOrderedListIterator;

                                      //  ^  1  2  3
            iterator.next();          // [1] ^  2  3
            iterator.next();          //  1 [2] ^  3
            iterator.replace(4);      //  1 [4] ^  3
            iterator.next();          //  1  4 [3] ^
            iterator.replace(5);      //  1  4 [5] ^
            iterator.next();          //  1  4  5  ^
            iterator.replace(6);      //  1  4  5  ^

            // Remove

            list.array = [1, 2, 3];
            iterator = list.iterator() as IOrderedListIterator;
            
                                      //  ^  1  2  3
            iterator.next();          // [1] ^  2  3
            iterator.next();          //  1 [2] ^  3
            iterator.remove();        //  1  ^  3
            iterator.next();          //  1 [3] ^
            iterator.remove();        //  1  ^
            iterator.remove();        //  1  ^

            // Add

            list.array = [1, 2, 3];
            iterator = list.iterator() as IOrderedListIterator;
            
                                      //  ^  1  2  3
            iterator.addAfter(4);     //  ^  4  1  2  3
            iterator.addBefore(5);    //  5  ^  4  1  2  3

            iterator.next();          //  5 [4] ^  1  2  3
            iterator.next();          //  5  4 [1] ^  2  3
            iterator.addBefore(6);    //  5  4  1  6  ^  2  3
            iterator.addAfter(7);     //  5  4  1  6  ^  7  2  3

            iterator.next();          //  5  4  1  6 [7] ^  2  3
            iterator.next();          //  5  4  1  6  7 [2] ^  3
            iterator.next();          //  5  4  1  6  7  2 [3] ^
            iterator.addBefore(8);    //  5  4  1  6  7  2  3  8  ^
            iterator.addAfter(9);     //  5  4  1  6  7  2  3  8  ^  9
            
            // Add during iteration

            list.array = [1, 2, 3];
            iterator = list.iterator() as IOrderedListIterator;
            while (iterator.hasNext()) {
                item = iterator.next();
                trace (item); // 1,2,5,3,7

                if (item == 1) iterator.addBefore(4);   //  1  4  ^  2  3
                if (item == 2) iterator.addAfter(5);    //  1  4  2  ^  5  3
                if (item == 5) iterator.addBefore(6);   //  1  4  2  5  6  ^  3
                if (item == 3) iterator.addAfter(7);    //  1  4  2  5  6  3  ^  7
            }
            trace (list.toArray()); // 1,4,2,5,6,3,7

            // Replace during iteration

            list.array = [1, 2, 3];
            iterator = list.iterator() as IOrderedListIterator;
            while (iterator.hasNext()) {
                item = iterator.next();
                trace (item); // 1,2,3

                if (item == 1) iterator.replace(4);   // [4] ^  2  3
                if (item == 2) iterator.replace(5);   //  4 [5] ^  3
                if (item == 3) iterator.replace(6);   //  4  5 [6] ^
            }
            trace (list.toArray()); // 4,5,6

            // Remove during iteration

            list.array = [1, 2, 3, 4, 5];
            iterator = list.iterator() as IOrderedListIterator;
            while (iterator.hasNext()) {
                item = iterator.next();
                trace (item); // 1,2,3,4,5

                if (item == 1) iterator.remove();   //  ^  2  3  4  5
                if (item == 3) iterator.remove();   //  2  ^  4  5
                if (item == 5) iterator.remove();   //  2  4  ^
            }
            trace (list.toArray()); // 2,4

            // Reverse iteration

            list.array = [1, 2, 3, 4, 5];
            iterator = list.iterator() as IOrderedListIterator;
            iterator.end();
            while (iterator.hasPrevious()) {
                trace (iterator.previous()); // 5,4,3,2,1
            }
        }
    }
}
</listing></div>
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 18.03.2009
	 ]]></author>
<see><![CDATA[org.as3commons.collections.framework.IBinarySearchTree IBinarySearchTree interface - Detailed description of the binary search tree features.
	 ]]></see>
<see><![CDATA[org.as3commons.collections.framework.IBinarySearchTreeIterator IBinarySearchTreeIterator interface - Detailed description of the binary search tree iterator features.
	 ]]></see>
<see><![CDATA[http://www.upgrade-cepis.org/issues/2004/5/up5-5Mosaic.pdf [1] Binary search tree performance comparision.
	 ]]></see>
<see><![CDATA[http://users.cs.fiu.edu/~weiss/dsaajava/code/DataStructures/ [2] The borrowed Java implementation of a treap.
	 ]]></see>
</classRec>
<method name='Treap' fullname='org.as3commons.collections:Treap/Treap' isStatic='false' isFinal='false' isOverride='false'  param_names='comparator' param_types='org.as3commons.collections.framework:IComparator' param_defaults='null' result_type='*'>
<description><![CDATA[
		 Treap constructor.
		 
		 ]]></description>
<param><![CDATA[comparator The sort criterion.
		 ]]></param>
</method>
<method name='add_protected' fullname='org.as3commons.collections:Treap/protected:add_protected' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='org.as3commons.collections.framework.core:TreapNode'>
<description><![CDATA[
		 Adds an item to the treap.
		 
		 <p>The method creates a new treap node, inserts the node as the leaf of
		 its successor/predecessor and rotates then the node upwards until
		 the tree becomes consistent again regarding the priority constraint.</p>
		 
		 <p>If the treap is empty, the method simply creates a new root node.</p>
		 
		 ]]></description>
<param><![CDATA[item The data to insert into the tree.
		 ]]></param>
<return><![CDATA[true, if the item has been inserted, false if an equal item already exists.
		 ]]></return>
<throws><![CDATA[as3.collections.core.UnsupportedTypeException If the item cannot be compared.
		 ]]></throws>
</method>
<method name='add' fullname='org.as3commons.collections:Treap/add' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 
		 Adds an item to the tree.
		 
		 <p>If the tree already contains an item that is equal to the given one,
		 the method abords with <code>false</code>.</p>
		 
		 <p>Hence, if the tree already contains the given item, the method abords with <code>false</code>.</p>
		 
		 ]]></description>
<param><![CDATA[item The item to add.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item has been added.
		 ]]></return>
</method>
<method name='clear' fullname='org.as3commons.collections:Treap/clear' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		 
		 Removes all items from the collection.
		 
		 <p>If the collection is already empty, the method aborts with <code>false</code>.</p>
		 
		 ]]></description>
<return><![CDATA[<code>true</code> if items have been removed.
		 ]]></return>
</method>
<method name='equalItem' fullname='org.as3commons.collections:Treap/equalItem' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 
		 Returns the item that is equal to the given one.
		 
		 <p>Returns of course the given item, if the item is contained.</p>
		 
		 ]]></description>
<param><![CDATA[item The item to test.
		 ]]></param>
<return><![CDATA[The equal item or <code>undefined</code> if there is no equal item.
		 ]]></return>
</method>
<method name='getNode' fullname='org.as3commons.collections:Treap/protected:getNode' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='org.as3commons.collections.framework.core:TreapNode'>
<description><![CDATA[
		 Returns the node of the given item.
		 
		 ]]></description>
<param><![CDATA[item The item to get the node for.
		 ]]></param>
<return><![CDATA[The node or <code>null</code>, if the item is not contained.
		 ]]></return>
</method>
<method name='hasEqual' fullname='org.as3commons.collections:Treap/hasEqual' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 
		 Tests if the collection contains an item that is equal to the given item.
		 
		 <p>Returns of course <code>true</code> if the given item is contained.</p>
		 
		 ]]></description>
<param><![CDATA[item The item to test.
		 ]]></param>
<return><![CDATA[<code>true</code> if there is an equal item contained.
		 ]]></return>
</method>
<method name='has' fullname='org.as3commons.collections:Treap/has' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 
		 Tests if an item is contained by the collection.
		 
		 ]]></description>
<param><![CDATA[item The item to test.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item is contained.
		 ]]></return>
</method>
<method name='higherNode' fullname='org.as3commons.collections:Treap/protected:higherNode' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='org.as3commons.collections.framework.core:TreapNode'>
<description><![CDATA[
		 Returns the first node whose item is higher than the given item.
		 
		 ]]></description>
<param><![CDATA[item The item to test.
		 ]]></param>
<return><![CDATA[The next higher node or <code>null</code> if there is no higher item.
		 ]]></return>
</method>
<method name='higher' fullname='org.as3commons.collections:Treap/higher' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 
		 Returns the first item that is higher than the given item.
		 
		 ]]></description>
<param><![CDATA[item The item to test.
		 ]]></param>
<return><![CDATA[The next higher item or <code>undefined</code> if there is no higher item.
		 ]]></return>
</method>
<method name='iterator' fullname='org.as3commons.collections:Treap/iterator' isStatic='false' isFinal='false' isOverride='false'  param_names='cursor' param_types='*' param_defaults='unknown' result_type='org.as3commons.collections.framework:IIterator'>
<description><![CDATA[
		 
		 Returns an iterator over the iterable data structure.
		 
		 <p>The <code>cursor</code> parameter is optional and not considered by all iterable
		 data structures. E.g. the iterator of an unordered collection such as <code>Map</code>
		 or <code>Set</code> starts always with the first item found. Still passing a parameter to
		 such a data structure does not throw an error and will simply show no effect.</p>
		 
		 <p>The type of the cursor is unspecified and depends on the particular data structure.
		 E.g. lists allow to specify an index, sets to specify an item and maps to specify a key.</p>
		 
		 <p>If <code>cursor</code> is specified, the iterator returns the item that is related
		 to that cursor with the first call to <code>next()</code> (and its predecessor with
		 the first call to <code>previous()</code> if the iterator allows bidirectional
		 navigation.</p>
		 
		 ]]></description>
<param><![CDATA[cursor The initial cursor position.
		 ]]></param>
<return><![CDATA[An iterator.
		 ]]></return>
</method>
<method name='lesserNode' fullname='org.as3commons.collections:Treap/protected:lesserNode' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='org.as3commons.collections.framework.core:TreapNode'>
<description><![CDATA[
		 Returns the last node whose item is lesser than the given item.
		 
		 ]]></description>
<param><![CDATA[item The item to test.
		 ]]></param>
<return><![CDATA[The last lesser node or <code>null</code> if there is no lesser item.
		 ]]></return>
</method>
<method name='lesser' fullname='org.as3commons.collections:Treap/lesser' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 
		 Returns the last item that is lesser than the given item.
		 
		 ]]></description>
<param><![CDATA[item The item to test.
		 ]]></param>
<return><![CDATA[The last lesser item or <code>undefined</code> if there is no lesser item.
		 ]]></return>
</method>
<method name='mostLeftNode_internal' fullname='org.as3commons.collections:Treap/as3commons_collections:mostLeftNode_internal' isStatic='false' isFinal='false' isOverride='false'  param_names='node' param_types='org.as3commons.collections.framework.core:TreapNode' param_defaults='null' result_type='org.as3commons.collections.framework.core:TreapNode'>
<description><![CDATA[
		 Framework internal method to retrieve the lowest node of the given subtree (node).
		 
		 ]]></description>
<param><![CDATA[node The root node of the subtree.
		 ]]></param>
<return><![CDATA[The lowest node or <code>null</code>, if the treap is empty.
		 ]]></return>
</method>
<method name='mostRightNode_internal' fullname='org.as3commons.collections:Treap/as3commons_collections:mostRightNode_internal' isStatic='false' isFinal='false' isOverride='false'  param_names='node' param_types='org.as3commons.collections.framework.core:TreapNode' param_defaults='null' result_type='org.as3commons.collections.framework.core:TreapNode'>
<description><![CDATA[
		 Framework internal method to retrieve the highest node of the given subtree (node).
		 
		 ]]></description>
<param><![CDATA[node The root node of the subtree.
		 ]]></param>
<return><![CDATA[The highest node or <code>null</code>, if the treap is empty.
		 ]]></return>
</method>
<method name='nextNode_internal' fullname='org.as3commons.collections:Treap/as3commons_collections:nextNode_internal' isStatic='false' isFinal='false' isOverride='false'  param_names='node' param_types='org.as3commons.collections.framework.core:TreapNode' param_defaults='undefined' result_type='org.as3commons.collections.framework.core:TreapNode'>
<description><![CDATA[
		 Framework internal method to retrieve the successor of a given node.
		 
		 ]]></description>
<param><![CDATA[node The node to get the successor.
		 ]]></param>
<return><![CDATA[The next node or <code>null</code> if the node is the first item or the treap is empty.
		 ]]></return>
</method>
<method name='previousNode_internal' fullname='org.as3commons.collections:Treap/as3commons_collections:previousNode_internal' isStatic='false' isFinal='false' isOverride='false'  param_names='node' param_types='org.as3commons.collections.framework.core:TreapNode' param_defaults='undefined' result_type='org.as3commons.collections.framework.core:TreapNode'>
<description><![CDATA[
		 Framework internal method to retrieve the predecessor of a given node.
		 
		 ]]></description>
<param><![CDATA[node The node to get the predecessor.
		 ]]></param>
<return><![CDATA[The previous node or <code>null</code> if the node is the last node or the treap is empty.
		 ]]></return>
</method>
<method name='removeFirst' fullname='org.as3commons.collections:Treap/removeFirst' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 
		 Removes the first item of the ordered collection.
		 
		 ]]></description>
<return><![CDATA[The formerly first item or <code>undefined</code> if the collection is empty.
		 ]]></return>
</method>
<method name='removeLast' fullname='org.as3commons.collections:Treap/removeLast' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 
		 Removes the last item of the ordered collection.
		 
		 ]]></description>
<return><![CDATA[The formerly last item or <code>undefined</code> if the collection is empty.
		 ]]></return>
</method>
<method name='removeNode_internal' fullname='org.as3commons.collections:Treap/as3commons_collections:removeNode_internal' isStatic='false' isFinal='false' isOverride='false'  param_names='node' param_types='org.as3commons.collections.framework.core:TreapNode' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Framework internal method to remove a node from the treap.
		 
		 ]]></description>
<param><![CDATA[node The node to remove.
		 ]]></param>
</method>
<method name='removeNode' fullname='org.as3commons.collections:Treap/protected:removeNode' isStatic='false' isFinal='false' isOverride='false'  param_names='node' param_types='org.as3commons.collections.framework.core:TreapNode' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Removes a node from the tree.
		 
		 <p>The method rotates the given node downwards until it becomes a leaf node
		 and gets removed from the tree.</p>
		 
		 ]]></description>
<param><![CDATA[node The node to remove.
		 ]]></param>
</method>
<method name='remove' fullname='org.as3commons.collections:Treap/remove' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 
		 Removes an item from the collection.
		 
		 <p>Trying to remove an item which is not contained by the collection
		 leaves the collection untouched and returns <code>false</code>.</p>
		 
		 <p>If the collection contains multiple entries of the given item
		 the first occurrence of the item will be removed.</p>
		 
		 ]]></description>
<param><![CDATA[item The item to remove.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item has been removed.
		 ]]></return>
</method>
<method name='rotate' fullname='org.as3commons.collections:Treap/protected:rotate' isStatic='false' isFinal='false' isOverride='false'  param_names='parent;child' param_types='org.as3commons.collections.framework.core:TreapNode;org.as3commons.collections.framework.core:TreapNode' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		 Rotates a parent with its child node.
		 
		 ]]></description>
<param><![CDATA[parent The parent node.
		 ]]></param>
<param><![CDATA[child The child node.
		 ]]></param>
</method>
<method name='toArray' fullname='org.as3commons.collections:Treap/toArray' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[
		 
		 Returns an array of all items.
		 
		 <p>The order of items in the array is the same as in the particular collection.</p>
		 
		 <p>Certain collections do not have an explicit order (<code>Map</code>, <code>Set</code>).
		 The order of the items in the array is then not predictable.</p>  
		 
		 <p>If the collection maintains an array as its data source, a copy
		 of the internal array is returned rather than the original array.</p>
		 
		 ]]></description>
<return><![CDATA[An array of the items of the collection.
		 ]]></return>
</method>
<method name='comparator' fullname='org.as3commons.collections:Treap/comparator/get' isStatic='false' isFinal='false' isOverride='false'  result_type='org.as3commons.collections.framework:IComparator'>
<description><![CDATA[
		 
		 Returns or sets the initial comparator of the collection.
		 
		 <p>You cannot reset a comparator of a collection that contains items.
		 In that case an <code>ArgumentError</code> is thrown.</p>
		 
		 ]]></description>
</method>
<method name='first' fullname='org.as3commons.collections:Treap/first/get' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 
		 The first item or <code>undefined</code> if the collection is empty.
		 ]]></description>
</method>
<method name='last' fullname='org.as3commons.collections:Treap/last/get' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 
		 The last item or <code>undefined</code> if the collection is empty.
		 ]]></description>
</method>
<method name='size' fullname='org.as3commons.collections:Treap/size/get' isStatic='false' isFinal='false' isOverride='false'  result_type='uint'>
<description><![CDATA[
		 
		 The number of items contained by the collection.
		 ]]></description>
</method>
<method name='comparator' fullname='org.as3commons.collections:Treap/comparator/set' isStatic='false' isFinal='false' isOverride='false'  param_names='comparator' param_types='org.as3commons.collections.framework:IComparator' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 
		 Returns or sets the initial comparator of the collection.
		 
		 <p>You cannot reset a comparator of a collection that contains items.
		 In that case an <code>ArgumentError</code> is thrown.</p>
		 
		 ]]></description>
</method>
<field name='_comparator' fullname='org.as3commons.collections:Treap/protected:_comparator' type='org.as3commons.collections.framework:IComparator' isStatic='false' isConst='false' >
<description><![CDATA[
		 The sort criterion.
		 ]]></description>
</field>
<field name='_root' fullname='org.as3commons.collections:Treap/protected:_root' type='org.as3commons.collections.framework.core:TreapNode' isStatic='false' isConst='false' >
<description><![CDATA[
		 The root node.
		 ]]></description>
</field>
<field name='_size' fullname='org.as3commons.collections:Treap/protected:_size' type='uint' isStatic='false' isConst='false' defaultValue='0' >
<description><![CDATA[
		 The size of the treap.
		 ]]></description>
</field>
<packageRec name='org.as3commons.collections.null' fullname='org.as3commons.collections.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<classRec name='SortedSet' fullname='org.as3commons.collections:SortedSet' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\SortedSet.as' namespace='org.as3commons.collections' access='public' baseclass='org.as3commons.collections.framework.core:AbstractSortedCollection' interfaces='org.as3commons.collections.framework:ISortedSet' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Sort order implementation of a set.
	 
	 <p><strong>Description</strong></p>
	 
	 <p>The <code>SortedSet</code> is a combination of a dictionary and a linked list.</p>
	 
	 <p><strong>Runtime of operations</strong></p>
	 
	 <ul>
	 <li>Getting or removing of items - constant runtime O(1).<br />
	 <code>add(), first, last, remove(), removeFirst(), removeLast()</code></li>
	 <li>Item lookup inspection operations - constant runtime O(1).<br />
	 has(), lesser(), higher(), equalItems()</code></li>
	 <li>Adding of items - logarithmic runtime O(log n).<br />
	 add()</code></li>
	 </ul>
	 
	 <p><strong>Notes</strong></p>
	 
	 <p>The <code>iterator()</code> method accepts an item as the cursor parameter. If the given
	 item is not contained by the set, it will be ignored.</p>
	 
	 <p>The <code>iterator()</code> method retuns an <code>ISetIterator</code>.</p>
	 
	 <p><code>null</code> is allowed if the comparator allows <code>null</code>.</p>
	 
	 <p id="link_SortedSetExample"><strong>SortedSet example</strong></p>
	 
	 <p>This example shows the specific behaviour of a <code>SortedSet</code>.
	 The general work with collections and iterators is more detailed illustrated
	 in the <code>Set</code> and <code>ArrayList</code> examples below.</p>
	 
	 <a class="exampleCollapsed" href="#link_SortedSetExample" onClick="toggleExample(this, 'SortedSetExample');">Show example</a><br /><div id="SortedSetExample" style='display:none'><listing version="3.0">package {
    import org.as3commons.collections.SortedSet;
    import org.as3commons.collections.framework.ICollectionIterator;
    import org.as3commons.collections.framework.IIterator;
    import org.as3commons.collections.framework.ISetIterator;
    import flash.display.Sprite;

    public class SortedSetExample extends Sprite {

        public function SortedSetExample() {
            var theSet : SortedSet = new SortedSet(new PersonComparator());
            var erikaMeier : Person = new Person("Erika", "Meier");
            
            // Add
            
            theSet.add(new Person("Hans", "Meier"));
            theSet.add(new Person("Erika", "Meier"));
            theSet.add(new Person("Ernst", "Schmitt"));
            theSet.add(new Person("Anton", "Fischer"));
            theSet.add(new Person("Erika", "Becker"));
            theSet.add(erikaMeier);
            theSet.add(erikaMeier); // no effect (item already contained)
            
            trace (theSet.toArray());
            
            // Erika Becker
            // Anton Fischer
            // Erika Meier
            // Erika Meier
            // Hans Meier
            // Ernst Schmitt

            // Inspect
            
            trace (theSet.has(new Person("Erika", "Meier"))); // false (item not contained)
            trace (theSet.has(erikaMeier)); // true

            trace (theSet.first); // Erika Becker
            trace (theSet.last); // Ernst Schmitt

            trace (theSet.hasEqual(new Person("Ernst", "Schmitt"))); // true
            trace (theSet.hasEqual(new Person("Erika", "Schmitt"))); // false
            trace (theSet.equalItems(new Person("Erika", "Meier"))); // Erika Meier, Erika Meier

            trace (theSet.lesser(new Person("Erika", "Becker"))); // undefined
            trace (theSet.lesser(new Person("Karla", "Dieling"))); // Erika Becker
            trace (theSet.lesser(new Person("Erika", "Meier"))); // Anton Fischer
            
            trace (theSet.higher(new Person("Erika", "Meier"))); // Hans Meier
            trace (theSet.higher(new Person("Anna", "Pauli"))); // Ernst Schmitt
            trace (theSet.higher(new Person("Ernst", "Schmitt"))); // undefined
            trace (theSet.higher(new Person("Wolfgang", "Teske"))); // undefined

            // Iterator

            var iterator : IIterator = theSet.iterator();
            trace (iterator is IIterator); // true
            trace (iterator is ICollectionIterator); // true
            trace (iterator is ISetIterator); // true
            
            while (iterator.hasNext()) {
                trace (iterator.next());
            }

            // Erika Becker
            // Anton Fischer
            // Erika Meier
            // Erika Meier
            // Hans Meier
            // Ernst Schmitt

            // Remove
            
            theSet.remove(erikaMeier);
            theSet.remove(erikaMeier); // no effect (item not contained)
            
            var ernstFischer : Person = theSet.lesser(new Person("Erika", "Meier"));
            theSet.remove(ernstFischer);

            trace (theSet.toArray());
            
            // Erika Becker
            // Erika Meier
            // Hans Meier
            // Ernst Schmitt

            theSet.removeFirst();
            theSet.removeLast();

            trace (theSet.toArray());
            
            // Erika Meier
            // Hans Meier
        }
    }
}

import org.as3commons.collections.utils.StringComparator;

internal class Person {
    public var firstName : String;
    public var lastName : String;
    public function Person(first : String, last : String) {
        firstName = first;
        lastName = last;
    }
    public function toString() : String {
        return firstName + " " + lastName;
    }
}

internal class PersonComparator extends StringComparator {
    override public function compare(item1 :  item2 :  : int {
        var compare : int = super.compare(
            Person(item1).lastName, Person(item2).lastName
        );
        if (compare) return compare;
        return super.compare(
            Person(item1).firstName, Person(item2).firstName
        );
    }
}
</listing></div>
	 
	 <p id="link_SetExample"><strong>Set example</strong></p>
	 
	 <a class="exampleCollapsed" href="#link_SetExample" onClick="toggleExample(this, 'SetExample');">Show example</a><br /><div id="SetExample" style='display:none'><listing version="3.0">package {
    import org.as3commons.collections.Set;
    import org.as3commons.collections.framework.ICollectionIterator;
    import org.as3commons.collections.framework.IIterator;
    import org.as3commons.collections.framework.ISetIterator;
    import flash.display.Sprite;

    public class SetExample extends Sprite {

        public function SetExample() {
            var theSet : Set = new Set();
            
            // Add
            
            theSet.add(1);
            theSet.add(2);
            theSet.add(3);
            theSet.add("4a");
            theSet.add("4b");
            theSet.add("4b"); // no effect (item already contained)
            
            trace (theSet.toArray()); // 4a,4b,1,2,3
            
            // Inspection
            
            trace (theSet.has(1)); // true;
            trace (theSet.has(4)); // false;
            
            // Iterator

            var iterator : IIterator = theSet.iterator();
            trace (iterator is IIterator); // true
            trace (iterator is ICollectionIterator); // true
            trace (iterator is ISetIterator); // true

            while (iterator.hasNext()) {
                trace (iterator.next()); // 4a,4b,1,2,3
            }

            // Set iterator

            var si : ISetIterator = theSet.iterator() as ISetIterator;
            trace (si.previousItem + " [" + si.current + "] " + si.nextItem);
            while (si.hasNext()) {
                si.next();
                trace (si.previousItem + " [" + si.current + "] " + si.nextItem);
            }

            // undefined [undefined] 4b
            // 4b [4b] 4a
            // 4a [4a] 1
            // 1 [1] 2
            // 2 [2] 3
            // 3 [3] undefined

            // Remove
            
            theSet.remove(2);
            theSet.remove("4b");
            theSet.remove("4"); // no effect (item not contained)

            trace (theSet.toArray()); // 4a,1,3
        }
    }
}
</listing></div>
	 
	 <p id="link_ArrayListExample"><strong>ArrayList example</strong></p>
	 
	 <a class="exampleCollapsed" href="#link_ArrayListExample" onClick="toggleExample(this, 'ArrayListExample');">Show example</a><br /><div id="ArrayListExample" style='display:none'><listing version="3.0">package {
    import org.as3commons.collections.ArrayList;
    import org.as3commons.collections.framework.ICollectionIterator;
    import org.as3commons.collections.framework.IIterator;
    import org.as3commons.collections.framework.IListIterator;
    import org.as3commons.collections.framework.IOrderedListIterator;
    import org.as3commons.collections.utils.StringComparator;
    import flash.display.Sprite;

    public class ArrayListExample extends Sprite {

        public function ArrayListExample() {
            var list : ArrayList = new ArrayList();
            
            // Add

            list.add("a");
            list.add("b");
            list.addAllAt(1, ["c", "d"]);
            trace (list.toArray()); // a,c,d,b

            list.addFirst("e");
            list.addLast("a");
            list.addAt(3, "a");
            trace (list.toArray()); // e,a,c,a,d,b,a
            
            // Replace

            list.replaceAt(2, "a");
            list.replaceAt(3, "f");
            trace (list.toArray()); // e,a,a,f,d,b,a

            // Inspection

            trace (list.size); // 7
            trace (list.has("b")); // true
            trace (list.itemAt(3)); // f
            trace (list.firstIndexOf("a")); // 1
            trace (list.lastIndexOf("a")); // 6
            trace (list.count("a")); // 3
            
            // Reorder

            list.reverse();
            trace (list.toArray()); // a,b,d,f,a,a,e

            list.sort(new StringComparator());
            trace (list.toArray()); // a,a,a,b,d,e,f
            
            // Iterator

            var iterator : IIterator = list.iterator();
            trace (iterator is IIterator); // true
            trace (iterator is ICollectionIterator); // true
            trace (iterator is IListIterator); // true
            trace (iterator is IOrderedListIterator); // true

            while (iterator.hasNext()) {
                trace (iterator.next()); // a,a,a,b,d,e,f
            }

            // List iterator

            var listIterator : IListIterator = list.iterator() as IListIterator;
            while (listIterator.hasNext()) {
                listIterator.next();
                trace (listIterator.index + "=" + listIterator.current);
            }

            // 0=a
            // 1=a
            // 2=a
            // 3=b
            // 4=d
            // 5=e
            // 6=f

            // Remove

            list.remove("a");
            trace (list.toArray()); // a,a,b,d,e,f

            list.removeAll("a");
            trace (list.toArray()); // b,d,e,f

            list.removeAt(1);
            list.removeFirst();
            list.removeLast();
            trace (list.toArray()); // e

            list.clear();
            trace (list.toArray()); // []
        }
    }
}
</listing></div>
	 
	 <p id="link_ArrayListIteratorExample"><strong>ArrayListIterator example</strong></p>
	 
	 <a class="exampleCollapsed" href="#link_ArrayListIteratorExample" onClick="toggleExample(this, 'ArrayListIteratorExample');">Show example</a><br /><div id="ArrayListIteratorExample" style='display:none'><listing version="3.0">package {
    import org.as3commons.collections.ArrayList;
    import org.as3commons.collections.framework.IOrderedListIterator;
    import flash.display.Sprite;

    public class ArrayListIteratorExample extends Sprite {

        public function ArrayListIteratorExample() {
            var list : ArrayList = new ArrayList();
            var iterator : IOrderedListIterator;
            var item : 
            
            // ^ = cursor, [n] = current
            
            // Navigation
            
            list.array = [1, 2, 3];
            iterator = list.iterator() as IOrderedListIterator;
            
                                      //  ^  1  2  3
            iterator.next();          // [1] ^  2  3
            iterator.next();          //  1 [2] ^  3
            iterator.next();          //  1  2 [3] ^
            iterator.next();          //  1  2  3  ^
            iterator.previous();      //  1  2  ^ [3]
            iterator.previous();      //  1  ^ [2] 3
            iterator.previous();      //  ^ [1] 2  3
            iterator.previous();      //  ^  1  2  3

            iterator.next();          // [1] ^  2  3
            iterator.next();          //  1 [2] ^  3
            iterator.start();         //  ^  1  2  3

            iterator.next();          // [1] ^  2  3
            iterator.next();          //  1 [2] ^  3
            iterator.end();           //  1  2  3  ^
            
            // Current and index

            iterator = list.iterator() as IOrderedListIterator;
            
            with (iterator) {
                trace (index, current, previousIndex, nextIndex);
                // -1 undefined -1 0

                next();
                trace (index, current, previousIndex, nextIndex);
                // 0 1 0 1

                next();
                trace (index, current, previousIndex, nextIndex);
                // 1 2 1 2

                next();
                trace (index, current, previousIndex, nextIndex);
                // 2 3 2 -1

                next();
                trace (index, current, previousIndex, nextIndex);
                // -1 undefined 2 -1
            }
            
            // Start position
            
            iterator = list.iterator() as IOrderedListIterator;   //  ^  1  2  3
            iterator = list.iterator(1) as IOrderedListIterator;  //  1  ^  2  3
            iterator = list.iterator(2) as IOrderedListIterator;  //  1  2  ^  3
            iterator = list.iterator(10) as IOrderedListIterator; //  1  2  3  ^

            // Replace

            iterator = list.iterator() as IOrderedListIterator;

                                      //  ^  1  2  3
            iterator.next();          // [1] ^  2  3
            iterator.next();          //  1 [2] ^  3
            iterator.replace(4);      //  1 [4] ^  3
            iterator.next();          //  1  4 [3] ^
            iterator.replace(5);      //  1  4 [5] ^
            iterator.next();          //  1  4  5  ^
            iterator.replace(6);      //  1  4  5  ^

            // Remove

            list.array = [1, 2, 3];
            iterator = list.iterator() as IOrderedListIterator;
            
                                      //  ^  1  2  3
            iterator.next();          // [1] ^  2  3
            iterator.next();          //  1 [2] ^  3
            iterator.remove();        //  1  ^  3
            iterator.next();          //  1 [3] ^
            iterator.remove();        //  1  ^
            iterator.remove();        //  1  ^

            // Add

            list.array = [1, 2, 3];
            iterator = list.iterator() as IOrderedListIterator;
            
                                      //  ^  1  2  3
            iterator.addAfter(4);     //  ^  4  1  2  3
            iterator.addBefore(5);    //  5  ^  4  1  2  3

            iterator.next();          //  5 [4] ^  1  2  3
            iterator.next();          //  5  4 [1] ^  2  3
            iterator.addBefore(6);    //  5  4  1  6  ^  2  3
            iterator.addAfter(7);     //  5  4  1  6  ^  7  2  3

            iterator.next();          //  5  4  1  6 [7] ^  2  3
            iterator.next();          //  5  4  1  6  7 [2] ^  3
            iterator.next();          //  5  4  1  6  7  2 [3] ^
            iterator.addBefore(8);    //  5  4  1  6  7  2  3  8  ^
            iterator.addAfter(9);     //  5  4  1  6  7  2  3  8  ^  9
            
            // Add during iteration

            list.array = [1, 2, 3];
            iterator = list.iterator() as IOrderedListIterator;
            while (iterator.hasNext()) {
                item = iterator.next();
                trace (item); // 1,2,5,3,7

                if (item == 1) iterator.addBefore(4);   //  1  4  ^  2  3
                if (item == 2) iterator.addAfter(5);    //  1  4  2  ^  5  3
                if (item == 5) iterator.addBefore(6);   //  1  4  2  5  6  ^  3
                if (item == 3) iterator.addAfter(7);    //  1  4  2  5  6  3  ^  7
            }
            trace (list.toArray()); // 1,4,2,5,6,3,7

            // Replace during iteration

            list.array = [1, 2, 3];
            iterator = list.iterator() as IOrderedListIterator;
            while (iterator.hasNext()) {
                item = iterator.next();
                trace (item); // 1,2,3

                if (item == 1) iterator.replace(4);   // [4] ^  2  3
                if (item == 2) iterator.replace(5);   //  4 [5] ^  3
                if (item == 3) iterator.replace(6);   //  4  5 [6] ^
            }
            trace (list.toArray()); // 4,5,6

            // Remove during iteration

            list.array = [1, 2, 3, 4, 5];
            iterator = list.iterator() as IOrderedListIterator;
            while (iterator.hasNext()) {
                item = iterator.next();
                trace (item); // 1,2,3,4,5

                if (item == 1) iterator.remove();   //  ^  2  3  4  5
                if (item == 3) iterator.remove();   //  2  ^  4  5
                if (item == 5) iterator.remove();   //  2  4  ^
            }
            trace (list.toArray()); // 2,4

            // Reverse iteration

            list.array = [1, 2, 3, 4, 5];
            iterator = list.iterator() as IOrderedListIterator;
            iterator.end();
            while (iterator.hasPrevious()) {
                trace (iterator.previous()); // 5,4,3,2,1
            }
        }
    }
}
</listing></div>
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 24.03.2010
	 ]]></author>
<see><![CDATA[org.as3commons.collections.framework.ISortedSet ISortedSet interface - Detailed description of the sorted set features.
	 ]]></see>
<see><![CDATA[org.as3commons.collections.framework.ISetIterator ISetIterator interface - Detailed description of the set iterator features.
	 ]]></see>
<see><![CDATA[org.as3commons.collections.framework.ISet ISet interface - Detailed description of the base set features.
	 ]]></see>
</classRec>
<method name='SortedSet' fullname='org.as3commons.collections:SortedSet/SortedSet' isStatic='false' isFinal='false' isOverride='false'  param_names='comparator' param_types='org.as3commons.collections.framework:IComparator' param_defaults='null' result_type='*'>
<description><![CDATA[
		 SortedSet constructor.
		 
		 ]]></description>
<param><![CDATA[comparator The sort criterion.
		 ]]></param>
</method>
<method name='add' fullname='org.as3commons.collections:SortedSet/add' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 
		 Adds an item to the set.
		 
		 <p>If the set already contains the given item, the method abords with <code>false</code>.</p>
		 
		 <p>The <code>LinkedSet</code> appends the item.</p>
		 
		 <p>The position of items that are added to a <code>SortedSet</code>
		 depends on its sort order.</p>
		 
		 ]]></description>
<param><![CDATA[item The item to add.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item has been added.
		 ]]></return>
</method>
<method name='clear' fullname='org.as3commons.collections:SortedSet/clear' isStatic='false' isFinal='false' isOverride='true'  result_type='Boolean'>
<description><![CDATA[
		 
		 Removes all items from the collection.
		 
		 <p>If the collection is already empty, the method aborts with <code>false</code>.</p>
		 
		 ]]></description>
<return><![CDATA[<code>true</code> if items have been removed.
		 ]]></return>
</method>
<method name='equalItems' fullname='org.as3commons.collections:SortedSet/equalItems' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='Array'>
<description><![CDATA[
		 
		 Returns an array of all items that are equal to the given item.
		 
		 <p>If there is no equal item, the method returns an empty array.</p>
		 
		 ]]></description>
<param><![CDATA[item The item to test.
		 ]]></param>
<return><![CDATA[An array of all equal items.
		 ]]></return>
</method>
<method name='getNode' fullname='org.as3commons.collections:SortedSet/protected:getNode' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='org.as3commons.collections.framework.core:SortedNode'>
<description><![CDATA[
		 Returns the node of the given item.
		 
		 ]]></description>
<param><![CDATA[item The item to get the node for.
		 ]]></param>
<return><![CDATA[The node or <code>null</code> if the item is not contained.
		 ]]></return>
</method>
<method name='has' fullname='org.as3commons.collections:SortedSet/has' isStatic='false' isFinal='false' isOverride='true'  param_names='item' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 
		 Tests if an item is contained by the collection.
		 
		 ]]></description>
<param><![CDATA[item The item to test.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item is contained.
		 ]]></return>
</method>
<method name='higher' fullname='org.as3commons.collections:SortedSet/higher' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 
		 Returns the first item that is higher than the given item.
		 
		 ]]></description>
<param><![CDATA[item The item to test.
		 ]]></param>
<return><![CDATA[The next higher item or <code>undefined</code> if there is no higher item.
		 ]]></return>
</method>
<method name='iterator' fullname='org.as3commons.collections:SortedSet/iterator' isStatic='false' isFinal='false' isOverride='true'  param_names='cursor' param_types='*' param_defaults='unknown' result_type='org.as3commons.collections.framework:IIterator'>
<description><![CDATA[
		 
		 Returns an iterator over the iterable data structure.
		 
		 <p>The <code>cursor</code> parameter is optional and not considered by all iterable
		 data structures. E.g. the iterator of an unordered collection such as <code>Map</code>
		 or <code>Set</code> starts always with the first item found. Still passing a parameter to
		 such a data structure does not throw an error and will simply show no effect.</p>
		 
		 <p>The type of the cursor is unspecified and depends on the particular data structure.
		 E.g. lists allow to specify an index, sets to specify an item and maps to specify a key.</p>
		 
		 <p>If <code>cursor</code> is specified, the iterator returns the item that is related
		 to that cursor with the first call to <code>next()</code> (and its predecessor with
		 the first call to <code>previous()</code> if the iterator allows bidirectional
		 navigation.</p>
		 
		 ]]></description>
<param><![CDATA[cursor The initial cursor position.
		 ]]></param>
<return><![CDATA[An iterator.
		 ]]></return>
</method>
<method name='lesser' fullname='org.as3commons.collections:SortedSet/lesser' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 
		 Returns the last item that is lesser than the given item.
		 
		 ]]></description>
<param><![CDATA[item The item to test.
		 ]]></param>
<return><![CDATA[The last lesser item or <code>undefined</code> if there is no lesser item.
		 ]]></return>
</method>
<method name='next' fullname='org.as3commons.collections:SortedSet/next' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 
		 Returns the successor of the given item.
		 
		 <p>If the item is not contained, the method returns <code>undefined</code>.</p>
		 
		 ]]></description>
<param><![CDATA[item The item to get its successor.
		 ]]></param>
<return><![CDATA[The predecessor or <code>undefined</code>.
		 ]]></return>
</method>
<method name='previous' fullname='org.as3commons.collections:SortedSet/previous' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 
		 Returns the predecessor of the given item.
		 
		 <p>If the item is not contained, the method returns <code>undefined</code>.</p>
		 
		 ]]></description>
<param><![CDATA[item The item to get its predecessor.
		 ]]></param>
<return><![CDATA[The predecessor or <code>undefined</code>.
		 ]]></return>
</method>
<method name='removeNode' fullname='org.as3commons.collections:SortedSet/protected:removeNode' isStatic='false' isFinal='false' isOverride='true'  param_names='node' param_types='org.as3commons.collections.framework.core:SortedNode' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 
		 Removes a node from the tree.
		 
		 <p>The method rotates the given node downwards until it becomes a leaf node
		 and gets removed from the tree.</p>
		 
		 ]]></description>
<param><![CDATA[node The node to remove.
		 ]]></param>
</method>
<method name='remove' fullname='org.as3commons.collections:SortedSet/remove' isStatic='false' isFinal='false' isOverride='true'  param_names='item' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 
		 Removes an item from the collection.
		 
		 <p>Trying to remove an item which is not contained by the collection
		 leaves the collection untouched and returns <code>false</code>.</p>
		 
		 <p>If the collection contains multiple entries of the given item
		 the first occurrence of the item will be removed.</p>
		 
		 ]]></description>
<param><![CDATA[item The item to remove.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item has been removed.
		 ]]></return>
</method>
<field name='_items' fullname='org.as3commons.collections:SortedSet/private:_items' type='flash.utils:Dictionary' isStatic='false' isConst='false' >
<description><![CDATA[
		 The non string items.
		 ]]></description>
</field>
<field name='_stringItems' fullname='org.as3commons.collections:SortedSet/private:_stringItems' type='Object' isStatic='false' isConst='false' >
<description><![CDATA[
		 The string items.
		 ]]></description>
</field>
<packageRec name='org.as3commons.collections.null' fullname='org.as3commons.collections.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<classRec name='Set' fullname='org.as3commons.collections:Set' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\Set.as' namespace='org.as3commons.collections' access='public' baseclass='Object' interfaces='org.as3commons.collections.framework:ISet' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Basic set implementation.
	 
	 <p><strong>Description</strong></p>
	 
	 <p>The <code>Set</code> maintains a dictionary as its source.</p>
	 
	 <p><strong>Runtime of operations</strong></p>
	 
	 <ul>
	 <li>Adding of items - constant runtime O(1).<br />
	 <code>add()</code></li>
	 <li>Item lookup operations - constant runtime O(1).<br />
	 has(), remove()</code></li>
	 </ul>
	 
	 <p><strong>Notes</strong></p>
	 
	 <p>The <code>iterator()</code> method does not support (ignores) the cursor parameter.</p>
	 
	 <p>The <code>iterator()</code> method retuns an <code>ISetIterator</code>.</p>
	 
	 <p><code>null</code> is allowed.</p>
	 
	 <p id="link_SetExample"><strong>Set example</strong></p>
	 
	 <p>This example shows the specific behaviour of a <code>Set</code>.
	 The general work with collections and iterators is more detailed illustrated
	 in the <code>ArrayList</code> examples below.</p>
	 
	 <a class="exampleCollapsed" href="#link_SetExample" onClick="toggleExample(this, 'SetExample');">Show example</a><br /><div id="SetExample" style='display:none'><listing version="3.0">package {
    import org.as3commons.collections.Set;
    import org.as3commons.collections.framework.ICollectionIterator;
    import org.as3commons.collections.framework.IIterator;
    import org.as3commons.collections.framework.ISetIterator;
    import flash.display.Sprite;

    public class SetExample extends Sprite {

        public function SetExample() {
            var theSet : Set = new Set();
            
            // Add
            
            theSet.add(1);
            theSet.add(2);
            theSet.add(3);
            theSet.add("4a");
            theSet.add("4b");
            theSet.add("4b"); // no effect (item already contained)
            
            trace (theSet.toArray()); // 4a,4b,1,2,3
            
            // Inspection
            
            trace (theSet.has(1)); // true;
            trace (theSet.has(4)); // false;
            
            // Iterator

            var iterator : IIterator = theSet.iterator();
            trace (iterator is IIterator); // true
            trace (iterator is ICollectionIterator); // true
            trace (iterator is ISetIterator); // true

            while (iterator.hasNext()) {
                trace (iterator.next()); // 4a,4b,1,2,3
            }

            // Set iterator

            var si : ISetIterator = theSet.iterator() as ISetIterator;
            trace (si.previousItem + " [" + si.current + "] " + si.nextItem);
            while (si.hasNext()) {
                si.next();
                trace (si.previousItem + " [" + si.current + "] " + si.nextItem);
            }

            // undefined [undefined] 4b
            // 4b [4b] 4a
            // 4a [4a] 1
            // 1 [1] 2
            // 2 [2] 3
            // 3 [3] undefined

            // Remove
            
            theSet.remove(2);
            theSet.remove("4b");
            theSet.remove("4"); // no effect (item not contained)

            trace (theSet.toArray()); // 4a,1,3
        }
    }
}
</listing></div>
	 
	 <p id="link_ArrayListExample"><strong>ArrayList example</strong></p>
	 
	 <a class="exampleCollapsed" href="#link_ArrayListExample" onClick="toggleExample(this, 'ArrayListExample');">Show example</a><br /><div id="ArrayListExample" style='display:none'><listing version="3.0">package {
    import org.as3commons.collections.ArrayList;
    import org.as3commons.collections.framework.ICollectionIterator;
    import org.as3commons.collections.framework.IIterator;
    import org.as3commons.collections.framework.IListIterator;
    import org.as3commons.collections.framework.IOrderedListIterator;
    import org.as3commons.collections.utils.StringComparator;
    import flash.display.Sprite;

    public class ArrayListExample extends Sprite {

        public function ArrayListExample() {
            var list : ArrayList = new ArrayList();
            
            // Add

            list.add("a");
            list.add("b");
            list.addAllAt(1, ["c", "d"]);
            trace (list.toArray()); // a,c,d,b

            list.addFirst("e");
            list.addLast("a");
            list.addAt(3, "a");
            trace (list.toArray()); // e,a,c,a,d,b,a
            
            // Replace

            list.replaceAt(2, "a");
            list.replaceAt(3, "f");
            trace (list.toArray()); // e,a,a,f,d,b,a

            // Inspection

            trace (list.size); // 7
            trace (list.has("b")); // true
            trace (list.itemAt(3)); // f
            trace (list.firstIndexOf("a")); // 1
            trace (list.lastIndexOf("a")); // 6
            trace (list.count("a")); // 3
            
            // Reorder

            list.reverse();
            trace (list.toArray()); // a,b,d,f,a,a,e

            list.sort(new StringComparator());
            trace (list.toArray()); // a,a,a,b,d,e,f
            
            // Iterator

            var iterator : IIterator = list.iterator();
            trace (iterator is IIterator); // true
            trace (iterator is ICollectionIterator); // true
            trace (iterator is IListIterator); // true
            trace (iterator is IOrderedListIterator); // true

            while (iterator.hasNext()) {
                trace (iterator.next()); // a,a,a,b,d,e,f
            }

            // List iterator

            var listIterator : IListIterator = list.iterator() as IListIterator;
            while (listIterator.hasNext()) {
                listIterator.next();
                trace (listIterator.index + "=" + listIterator.current);
            }

            // 0=a
            // 1=a
            // 2=a
            // 3=b
            // 4=d
            // 5=e
            // 6=f

            // Remove

            list.remove("a");
            trace (list.toArray()); // a,a,b,d,e,f

            list.removeAll("a");
            trace (list.toArray()); // b,d,e,f

            list.removeAt(1);
            list.removeFirst();
            list.removeLast();
            trace (list.toArray()); // e

            list.clear();
            trace (list.toArray()); // []
        }
    }
}
</listing></div>
	 
	 <p id="link_ArrayListIteratorExample"><strong>ArrayListIterator example</strong></p>
	 
	 <a class="exampleCollapsed" href="#link_ArrayListIteratorExample" onClick="toggleExample(this, 'ArrayListIteratorExample');">Show example</a><br /><div id="ArrayListIteratorExample" style='display:none'><listing version="3.0">package {
    import org.as3commons.collections.ArrayList;
    import org.as3commons.collections.framework.IOrderedListIterator;
    import flash.display.Sprite;

    public class ArrayListIteratorExample extends Sprite {

        public function ArrayListIteratorExample() {
            var list : ArrayList = new ArrayList();
            var iterator : IOrderedListIterator;
            var item : 
            
            // ^ = cursor, [n] = current
            
            // Navigation
            
            list.array = [1, 2, 3];
            iterator = list.iterator() as IOrderedListIterator;
            
                                      //  ^  1  2  3
            iterator.next();          // [1] ^  2  3
            iterator.next();          //  1 [2] ^  3
            iterator.next();          //  1  2 [3] ^
            iterator.next();          //  1  2  3  ^
            iterator.previous();      //  1  2  ^ [3]
            iterator.previous();      //  1  ^ [2] 3
            iterator.previous();      //  ^ [1] 2  3
            iterator.previous();      //  ^  1  2  3

            iterator.next();          // [1] ^  2  3
            iterator.next();          //  1 [2] ^  3
            iterator.start();         //  ^  1  2  3

            iterator.next();          // [1] ^  2  3
            iterator.next();          //  1 [2] ^  3
            iterator.end();           //  1  2  3  ^
            
            // Current and index

            iterator = list.iterator() as IOrderedListIterator;
            
            with (iterator) {
                trace (index, current, previousIndex, nextIndex);
                // -1 undefined -1 0

                next();
                trace (index, current, previousIndex, nextIndex);
                // 0 1 0 1

                next();
                trace (index, current, previousIndex, nextIndex);
                // 1 2 1 2

                next();
                trace (index, current, previousIndex, nextIndex);
                // 2 3 2 -1

                next();
                trace (index, current, previousIndex, nextIndex);
                // -1 undefined 2 -1
            }
            
            // Start position
            
            iterator = list.iterator() as IOrderedListIterator;   //  ^  1  2  3
            iterator = list.iterator(1) as IOrderedListIterator;  //  1  ^  2  3
            iterator = list.iterator(2) as IOrderedListIterator;  //  1  2  ^  3
            iterator = list.iterator(10) as IOrderedListIterator; //  1  2  3  ^

            // Replace

            iterator = list.iterator() as IOrderedListIterator;

                                      //  ^  1  2  3
            iterator.next();          // [1] ^  2  3
            iterator.next();          //  1 [2] ^  3
            iterator.replace(4);      //  1 [4] ^  3
            iterator.next();          //  1  4 [3] ^
            iterator.replace(5);      //  1  4 [5] ^
            iterator.next();          //  1  4  5  ^
            iterator.replace(6);      //  1  4  5  ^

            // Remove

            list.array = [1, 2, 3];
            iterator = list.iterator() as IOrderedListIterator;
            
                                      //  ^  1  2  3
            iterator.next();          // [1] ^  2  3
            iterator.next();          //  1 [2] ^  3
            iterator.remove();        //  1  ^  3
            iterator.next();          //  1 [3] ^
            iterator.remove();        //  1  ^
            iterator.remove();        //  1  ^

            // Add

            list.array = [1, 2, 3];
            iterator = list.iterator() as IOrderedListIterator;
            
                                      //  ^  1  2  3
            iterator.addAfter(4);     //  ^  4  1  2  3
            iterator.addBefore(5);    //  5  ^  4  1  2  3

            iterator.next();          //  5 [4] ^  1  2  3
            iterator.next();          //  5  4 [1] ^  2  3
            iterator.addBefore(6);    //  5  4  1  6  ^  2  3
            iterator.addAfter(7);     //  5  4  1  6  ^  7  2  3

            iterator.next();          //  5  4  1  6 [7] ^  2  3
            iterator.next();          //  5  4  1  6  7 [2] ^  3
            iterator.next();          //  5  4  1  6  7  2 [3] ^
            iterator.addBefore(8);    //  5  4  1  6  7  2  3  8  ^
            iterator.addAfter(9);     //  5  4  1  6  7  2  3  8  ^  9
            
            // Add during iteration

            list.array = [1, 2, 3];
            iterator = list.iterator() as IOrderedListIterator;
            while (iterator.hasNext()) {
                item = iterator.next();
                trace (item); // 1,2,5,3,7

                if (item == 1) iterator.addBefore(4);   //  1  4  ^  2  3
                if (item == 2) iterator.addAfter(5);    //  1  4  2  ^  5  3
                if (item == 5) iterator.addBefore(6);   //  1  4  2  5  6  ^  3
                if (item == 3) iterator.addAfter(7);    //  1  4  2  5  6  3  ^  7
            }
            trace (list.toArray()); // 1,4,2,5,6,3,7

            // Replace during iteration

            list.array = [1, 2, 3];
            iterator = list.iterator() as IOrderedListIterator;
            while (iterator.hasNext()) {
                item = iterator.next();
                trace (item); // 1,2,3

                if (item == 1) iterator.replace(4);   // [4] ^  2  3
                if (item == 2) iterator.replace(5);   //  4 [5] ^  3
                if (item == 3) iterator.replace(6);   //  4  5 [6] ^
            }
            trace (list.toArray()); // 4,5,6

            // Remove during iteration

            list.array = [1, 2, 3, 4, 5];
            iterator = list.iterator() as IOrderedListIterator;
            while (iterator.hasNext()) {
                item = iterator.next();
                trace (item); // 1,2,3,4,5

                if (item == 1) iterator.remove();   //  ^  2  3  4  5
                if (item == 3) iterator.remove();   //  2  ^  4  5
                if (item == 5) iterator.remove();   //  2  4  ^
            }
            trace (list.toArray()); // 2,4

            // Reverse iteration

            list.array = [1, 2, 3, 4, 5];
            iterator = list.iterator() as IOrderedListIterator;
            iterator.end();
            while (iterator.hasPrevious()) {
                trace (iterator.previous()); // 5,4,3,2,1
            }
        }
    }
}
</listing></div>
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 24.03.2010
	 ]]></author>
<see><![CDATA[org.as3commons.collections.framework.ISet ISet interface - Detailed description of the base set features.
	 ]]></see>
<see><![CDATA[org.as3commons.collections.framework.ISetIterator ISetIterator interface - Detailed description of the base set iterator features.
	 ]]></see>
</classRec>
<method name='Set' fullname='org.as3commons.collections:Set/Set' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Set constructor.
		 ]]></description>
</method>
<method name='add' fullname='org.as3commons.collections:Set/add' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 
		 Adds an item to the set.
		 
		 <p>If the set already contains the given item, the method abords with <code>false</code>.</p>
		 
		 <p>The <code>LinkedSet</code> appends the item.</p>
		 
		 <p>The position of items that are added to a <code>SortedSet</code>
		 depends on its sort order.</p>
		 
		 ]]></description>
<param><![CDATA[item The item to add.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item has been added.
		 ]]></return>
</method>
<method name='clear' fullname='org.as3commons.collections:Set/clear' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		 
		 Removes all items from the collection.
		 
		 <p>If the collection is already empty, the method aborts with <code>false</code>.</p>
		 
		 ]]></description>
<return><![CDATA[<code>true</code> if items have been removed.
		 ]]></return>
</method>
<method name='has' fullname='org.as3commons.collections:Set/has' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 
		 Tests if an item is contained by the collection.
		 
		 ]]></description>
<param><![CDATA[item The item to test.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item is contained.
		 ]]></return>
</method>
<method name='iterator' fullname='org.as3commons.collections:Set/iterator' isStatic='false' isFinal='false' isOverride='false'  param_names='cursor' param_types='*' param_defaults='unknown' result_type='org.as3commons.collections.framework:IIterator'>
<description><![CDATA[
		 
		 Returns an iterator over the iterable data structure.
		 
		 <p>The <code>cursor</code> parameter is optional and not considered by all iterable
		 data structures. E.g. the iterator of an unordered collection such as <code>Map</code>
		 or <code>Set</code> starts always with the first item found. Still passing a parameter to
		 such a data structure does not throw an error and will simply show no effect.</p>
		 
		 <p>The type of the cursor is unspecified and depends on the particular data structure.
		 E.g. lists allow to specify an index, sets to specify an item and maps to specify a key.</p>
		 
		 <p>If <code>cursor</code> is specified, the iterator returns the item that is related
		 to that cursor with the first call to <code>next()</code> (and its predecessor with
		 the first call to <code>previous()</code> if the iterator allows bidirectional
		 navigation.</p>
		 
		 ]]></description>
<param><![CDATA[cursor The initial cursor position.
		 ]]></param>
<return><![CDATA[An iterator.
		 ]]></return>
</method>
<method name='remove' fullname='org.as3commons.collections:Set/remove' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 
		 Removes an item from the collection.
		 
		 <p>Trying to remove an item which is not contained by the collection
		 leaves the collection untouched and returns <code>false</code>.</p>
		 
		 <p>If the collection contains multiple entries of the given item
		 the first occurrence of the item will be removed.</p>
		 
		 ]]></description>
<param><![CDATA[item The item to remove.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item has been removed.
		 ]]></return>
</method>
<method name='toArray' fullname='org.as3commons.collections:Set/toArray' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[
		 
		 Returns an array of all items.
		 
		 <p>The order of items in the array is the same as in the particular collection.</p>
		 
		 <p>Certain collections do not have an explicit order (<code>Map</code>, <code>Set</code>).
		 The order of the items in the array is then not predictable.</p>  
		 
		 <p>If the collection maintains an array as its data source, a copy
		 of the internal array is returned rather than the original array.</p>
		 
		 ]]></description>
<return><![CDATA[An array of the items of the collection.
		 ]]></return>
</method>
<method name='size' fullname='org.as3commons.collections:Set/size/get' isStatic='false' isFinal='false' isOverride='false'  result_type='uint'>
<description><![CDATA[
		 
		 The number of items contained by the collection.
		 ]]></description>
</method>
<field name='_items' fullname='org.as3commons.collections:Set/private:_items' type='flash.utils:Dictionary' isStatic='false' isConst='false' >
<description><![CDATA[
		 The non string items.
		 ]]></description>
</field>
<field name='_size' fullname='org.as3commons.collections:Set/private:_size' type='uint' isStatic='false' isConst='false' defaultValue='0' >
<description><![CDATA[
		 The set size.
		 ]]></description>
</field>
<field name='_stringItems' fullname='org.as3commons.collections:Set/private:_stringItems' type='Object' isStatic='false' isConst='false' >
<description><![CDATA[
		 The string items.
		 ]]></description>
</field>
<packageRec name='org.as3commons.collections.null' fullname='org.as3commons.collections.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<classRec name='Map' fullname='org.as3commons.collections:Map' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\Map.as' namespace='org.as3commons.collections' access='public' baseclass='Object' interfaces='org.as3commons.collections.framework:IMap' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Basic map implementation.
	 
	 <p><strong>Description</strong></p>
	 
	 <p>The <code>Map</code> maintains a dictionary as its source.</p>
	 
	 <p><strong>Runtime of operations</strong></p>
	 
	 <ul>
	 <li>Adding of items - constant runtime O(1).<br />
	 <code>add()</code></li>
	 <li>Key lookup operations - constant runtime O(1).<br />
	 hasKey(), itemFor(), replaceFor(), removeKey()</code></li>
	 <li>Item lookup operations - linear runtime O(n).<br />
	 has(), count(), remove(), removeAll()</code></li>
	 </ul>
	 
	 <p><strong>Notes</strong></p>
	 
	 <p>The <code>iterator()</code> method does not support (ignores) the cursor parameter.</p>
	 
	 <p>The <code>iterator()</code> method retuns an <code>IMapIterator</code>.</p>
	 
	 <p><code>null</code> is allowed for keys as well as for values.</p>
	 
	 <p id="link_MapExample"><strong>Map example</strong></p>
	 
	 <p> This example shows the specific behaviour of a <code>Map</code>.
	 The general work with collections and iterators is more detailed illustrated
	 in the <code>ArrayList</code> examples below.</p>
	 
	 <a class="exampleCollapsed" href="#link_MapExample" onClick="toggleExample(this, 'MapExample');">Show example</a><br /><div id="MapExample" style='display:none'><listing version="3.0">package {
    import org.as3commons.collections.Map;
    import org.as3commons.collections.framework.ICollectionIterator;
    import org.as3commons.collections.framework.IIterator;
    import org.as3commons.collections.framework.IMapIterator;
    import flash.display.Sprite;

    public class MapExample extends Sprite {

        public function MapExample() {
            var map : Map = new Map();
            
            // Add
            
            map.add(1, "one");
            map.add(2, "two");
            map.add(3, "three");
            map.add("4a", "four");
            map.add("4b", "four");
            map.add("4c", "four");
            
            map.add("4c", "fourC"); // no effect (key already contained)
            
            trace (map.toArray()); // four,four,four,one,two,three
            
            // Replace

            map.replaceFor(3, "three3");
            map.replaceFor("4a", "fourA");
            
            map.replaceFor(1, "one"); // no effect ("one" === "one")
            map.replaceFor(4, "four"); // no effect (key not contained)
            
            trace (map.toArray()); // fourA,four,four,one,two,three3

            // Inspection
            
            trace (map.size); // 6
            trace (map.hasKey(3)); // true
            trace (map.hasKey(4)); // false
            trace (map.itemFor(3)); // three3
            trace (map.itemFor(4)); // undefined
            trace (map.keysToArray()); // 4a,4b,4c,1,2,3

            // Iterator

            var iterator : IIterator = map.iterator();
            trace (iterator is IIterator); // true
            trace (iterator is ICollectionIterator); // true
            trace (iterator is IMapIterator); // true

            while (iterator.hasNext()) {
                trace (iterator.next()); // fourA,four,four,one,two,three3
            }

            // Map iterator

            var mi : IMapIterator = map.iterator() as IMapIterator;
            trace (mi.previousKey + " [" + mi.key + "=" + mi.current + "] " + mi.nextKey);
            while (mi.hasNext()) {
                mi.next();
                trace (mi.previousKey + " [" + mi.key + "=" + mi.current + "] " + mi.nextKey);
            }

            // undefined [undefined=undefined] 4a
            // 4a [4a=fourA] 4b
            // 4b [4b=four] 4c
            // 4c [4c=four] 1
            // 1 [1=one] 2
            // 2 [2=two] 3
            // 3 [3=three3] undefined
            
            // Remove

            map.removeKey(2);
            map.removeKey("4a");            
            map.removeKey(4); // no effect (key not contained)
            
            trace (map.toArray()); // four,four,one,three3

            map.remove("one");            
            map.remove("fourC"); // no effect (item not contained)
            
            trace (map.toArray()); // four,four,three3

            map.removeAll("four");            
            trace (map.toArray()); // three3
        }
    }
}
</listing></div>
	 
	 <p id="link_ArrayListExample"><strong>ArrayList example</strong></p>
	 
	 <a class="exampleCollapsed" href="#link_ArrayListExample" onClick="toggleExample(this, 'ArrayListExample');">Show example</a><br /><div id="ArrayListExample" style='display:none'><listing version="3.0">package {
    import org.as3commons.collections.ArrayList;
    import org.as3commons.collections.framework.ICollectionIterator;
    import org.as3commons.collections.framework.IIterator;
    import org.as3commons.collections.framework.IListIterator;
    import org.as3commons.collections.framework.IOrderedListIterator;
    import org.as3commons.collections.utils.StringComparator;
    import flash.display.Sprite;

    public class ArrayListExample extends Sprite {

        public function ArrayListExample() {
            var list : ArrayList = new ArrayList();
            
            // Add

            list.add("a");
            list.add("b");
            list.addAllAt(1, ["c", "d"]);
            trace (list.toArray()); // a,c,d,b

            list.addFirst("e");
            list.addLast("a");
            list.addAt(3, "a");
            trace (list.toArray()); // e,a,c,a,d,b,a
            
            // Replace

            list.replaceAt(2, "a");
            list.replaceAt(3, "f");
            trace (list.toArray()); // e,a,a,f,d,b,a

            // Inspection

            trace (list.size); // 7
            trace (list.has("b")); // true
            trace (list.itemAt(3)); // f
            trace (list.firstIndexOf("a")); // 1
            trace (list.lastIndexOf("a")); // 6
            trace (list.count("a")); // 3
            
            // Reorder

            list.reverse();
            trace (list.toArray()); // a,b,d,f,a,a,e

            list.sort(new StringComparator());
            trace (list.toArray()); // a,a,a,b,d,e,f
            
            // Iterator

            var iterator : IIterator = list.iterator();
            trace (iterator is IIterator); // true
            trace (iterator is ICollectionIterator); // true
            trace (iterator is IListIterator); // true
            trace (iterator is IOrderedListIterator); // true

            while (iterator.hasNext()) {
                trace (iterator.next()); // a,a,a,b,d,e,f
            }

            // List iterator

            var listIterator : IListIterator = list.iterator() as IListIterator;
            while (listIterator.hasNext()) {
                listIterator.next();
                trace (listIterator.index + "=" + listIterator.current);
            }

            // 0=a
            // 1=a
            // 2=a
            // 3=b
            // 4=d
            // 5=e
            // 6=f

            // Remove

            list.remove("a");
            trace (list.toArray()); // a,a,b,d,e,f

            list.removeAll("a");
            trace (list.toArray()); // b,d,e,f

            list.removeAt(1);
            list.removeFirst();
            list.removeLast();
            trace (list.toArray()); // e

            list.clear();
            trace (list.toArray()); // []
        }
    }
}
</listing></div>
	 
	 <p id="link_ArrayListIteratorExample"><strong>ArrayListIterator example</strong></p>
	 
	 <a class="exampleCollapsed" href="#link_ArrayListIteratorExample" onClick="toggleExample(this, 'ArrayListIteratorExample');">Show example</a><br /><div id="ArrayListIteratorExample" style='display:none'><listing version="3.0">package {
    import org.as3commons.collections.ArrayList;
    import org.as3commons.collections.framework.IOrderedListIterator;
    import flash.display.Sprite;

    public class ArrayListIteratorExample extends Sprite {

        public function ArrayListIteratorExample() {
            var list : ArrayList = new ArrayList();
            var iterator : IOrderedListIterator;
            var item : 
            
            // ^ = cursor, [n] = current
            
            // Navigation
            
            list.array = [1, 2, 3];
            iterator = list.iterator() as IOrderedListIterator;
            
                                      //  ^  1  2  3
            iterator.next();          // [1] ^  2  3
            iterator.next();          //  1 [2] ^  3
            iterator.next();          //  1  2 [3] ^
            iterator.next();          //  1  2  3  ^
            iterator.previous();      //  1  2  ^ [3]
            iterator.previous();      //  1  ^ [2] 3
            iterator.previous();      //  ^ [1] 2  3
            iterator.previous();      //  ^  1  2  3

            iterator.next();          // [1] ^  2  3
            iterator.next();          //  1 [2] ^  3
            iterator.start();         //  ^  1  2  3

            iterator.next();          // [1] ^  2  3
            iterator.next();          //  1 [2] ^  3
            iterator.end();           //  1  2  3  ^
            
            // Current and index

            iterator = list.iterator() as IOrderedListIterator;
            
            with (iterator) {
                trace (index, current, previousIndex, nextIndex);
                // -1 undefined -1 0

                next();
                trace (index, current, previousIndex, nextIndex);
                // 0 1 0 1

                next();
                trace (index, current, previousIndex, nextIndex);
                // 1 2 1 2

                next();
                trace (index, current, previousIndex, nextIndex);
                // 2 3 2 -1

                next();
                trace (index, current, previousIndex, nextIndex);
                // -1 undefined 2 -1
            }
            
            // Start position
            
            iterator = list.iterator() as IOrderedListIterator;   //  ^  1  2  3
            iterator = list.iterator(1) as IOrderedListIterator;  //  1  ^  2  3
            iterator = list.iterator(2) as IOrderedListIterator;  //  1  2  ^  3
            iterator = list.iterator(10) as IOrderedListIterator; //  1  2  3  ^

            // Replace

            iterator = list.iterator() as IOrderedListIterator;

                                      //  ^  1  2  3
            iterator.next();          // [1] ^  2  3
            iterator.next();          //  1 [2] ^  3
            iterator.replace(4);      //  1 [4] ^  3
            iterator.next();          //  1  4 [3] ^
            iterator.replace(5);      //  1  4 [5] ^
            iterator.next();          //  1  4  5  ^
            iterator.replace(6);      //  1  4  5  ^

            // Remove

            list.array = [1, 2, 3];
            iterator = list.iterator() as IOrderedListIterator;
            
                                      //  ^  1  2  3
            iterator.next();          // [1] ^  2  3
            iterator.next();          //  1 [2] ^  3
            iterator.remove();        //  1  ^  3
            iterator.next();          //  1 [3] ^
            iterator.remove();        //  1  ^
            iterator.remove();        //  1  ^

            // Add

            list.array = [1, 2, 3];
            iterator = list.iterator() as IOrderedListIterator;
            
                                      //  ^  1  2  3
            iterator.addAfter(4);     //  ^  4  1  2  3
            iterator.addBefore(5);    //  5  ^  4  1  2  3

            iterator.next();          //  5 [4] ^  1  2  3
            iterator.next();          //  5  4 [1] ^  2  3
            iterator.addBefore(6);    //  5  4  1  6  ^  2  3
            iterator.addAfter(7);     //  5  4  1  6  ^  7  2  3

            iterator.next();          //  5  4  1  6 [7] ^  2  3
            iterator.next();          //  5  4  1  6  7 [2] ^  3
            iterator.next();          //  5  4  1  6  7  2 [3] ^
            iterator.addBefore(8);    //  5  4  1  6  7  2  3  8  ^
            iterator.addAfter(9);     //  5  4  1  6  7  2  3  8  ^  9
            
            // Add during iteration

            list.array = [1, 2, 3];
            iterator = list.iterator() as IOrderedListIterator;
            while (iterator.hasNext()) {
                item = iterator.next();
                trace (item); // 1,2,5,3,7

                if (item == 1) iterator.addBefore(4);   //  1  4  ^  2  3
                if (item == 2) iterator.addAfter(5);    //  1  4  2  ^  5  3
                if (item == 5) iterator.addBefore(6);   //  1  4  2  5  6  ^  3
                if (item == 3) iterator.addAfter(7);    //  1  4  2  5  6  3  ^  7
            }
            trace (list.toArray()); // 1,4,2,5,6,3,7

            // Replace during iteration

            list.array = [1, 2, 3];
            iterator = list.iterator() as IOrderedListIterator;
            while (iterator.hasNext()) {
                item = iterator.next();
                trace (item); // 1,2,3

                if (item == 1) iterator.replace(4);   // [4] ^  2  3
                if (item == 2) iterator.replace(5);   //  4 [5] ^  3
                if (item == 3) iterator.replace(6);   //  4  5 [6] ^
            }
            trace (list.toArray()); // 4,5,6

            // Remove during iteration

            list.array = [1, 2, 3, 4, 5];
            iterator = list.iterator() as IOrderedListIterator;
            while (iterator.hasNext()) {
                item = iterator.next();
                trace (item); // 1,2,3,4,5

                if (item == 1) iterator.remove();   //  ^  2  3  4  5
                if (item == 3) iterator.remove();   //  2  ^  4  5
                if (item == 5) iterator.remove();   //  2  4  ^
            }
            trace (list.toArray()); // 2,4

            // Reverse iteration

            list.array = [1, 2, 3, 4, 5];
            iterator = list.iterator() as IOrderedListIterator;
            iterator.end();
            while (iterator.hasPrevious()) {
                trace (iterator.previous()); // 5,4,3,2,1
            }
        }
    }
}
</listing></div>
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 24.03.2010
	 ]]></author>
<see><![CDATA[org.as3commons.collections.framework.IMap IMap interface - Detailed description of the base map features.
	 ]]></see>
<see><![CDATA[org.as3commons.collections.framework.IMapIterator IMapIterator interface - Detailed description of the base map iterator features.
	 ]]></see>
</classRec>
<method name='Map' fullname='org.as3commons.collections:Map/Map' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Map constructor.
		 ]]></description>
</method>
<method name='add' fullname='org.as3commons.collections:Map/add' isStatic='false' isFinal='false' isOverride='false'  param_names='key;item' param_types='*;*' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[
		 
		 Adds an item to the map.
		 
		 <p>If the map already contains the given key, the method abords with <code>false</code>.</p>
		 
		 <p>The <code>LinkedMap</code> appends the item.</p>
		 
		 <p>The position of items that are added to a <code>SortedMap</code>
		 depends on its sort order.</p>
		 
		 ]]></description>
<param><![CDATA[key The key of the item to add.
		 ]]></param>
<param><![CDATA[item The item to add.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item has been added.
		 ]]></return>
</method>
<method name='clear' fullname='org.as3commons.collections:Map/clear' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		 
		 Removes all items from the collection.
		 
		 <p>If the collection is already empty, the method aborts with <code>false</code>.</p>
		 
		 ]]></description>
<return><![CDATA[<code>true</code> if items have been removed.
		 ]]></return>
</method>
<method name='count' fullname='org.as3commons.collections:Map/count' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='uint'>
<description><![CDATA[
		 
		 Returns the number of occurrences of an item.
		 
		 ]]></description>
<return><![CDATA[Number of occurrences of the given item.
		 ]]></return>
</method>
<method name='hasKey' fullname='org.as3commons.collections:Map/hasKey' isStatic='false' isFinal='false' isOverride='false'  param_names='key' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 
		 Returns <code>true</code> if the map contains the given key.
		 
		 ]]></description>
<param><![CDATA[key The key to test.
		 ]]></param>
<return><![CDATA[<code>true</code> if the key is contained.
		 ]]></return>
</method>
<method name='has' fullname='org.as3commons.collections:Map/has' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 
		 Tests if an item is contained by the collection.
		 
		 ]]></description>
<param><![CDATA[item The item to test.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item is contained.
		 ]]></return>
</method>
<method name='itemFor' fullname='org.as3commons.collections:Map/itemFor' isStatic='false' isFinal='false' isOverride='false'  param_names='key' param_types='*' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 
		 Returns the item associated with the given key.
		 
		 ]]></description>
<param><![CDATA[key The key.
		 ]]></param>
<return><![CDATA[The item if the key is contained, else <code>undefined</code>.
		 ]]></return>
</method>
<method name='itemRemoved' fullname='org.as3commons.collections:Map/protected:itemRemoved' isStatic='false' isFinal='false' isOverride='false'  param_names='key;item' param_types='*;*' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		 Template method to notify subclasses after an item has been removed.
		 
		 ]]></description>
<param><![CDATA[item The removed item.
		 ]]></param>
<param><![CDATA[node The former index of the removed item.
		 ]]></param>
</method>
<method name='iterator' fullname='org.as3commons.collections:Map/iterator' isStatic='false' isFinal='false' isOverride='false'  param_names='cursor' param_types='*' param_defaults='unknown' result_type='org.as3commons.collections.framework:IIterator'>
<description><![CDATA[
		 
		 Returns an iterator over the iterable data structure.
		 
		 <p>The <code>cursor</code> parameter is optional and not considered by all iterable
		 data structures. E.g. the iterator of an unordered collection such as <code>Map</code>
		 or <code>Set</code> starts always with the first item found. Still passing a parameter to
		 such a data structure does not throw an error and will simply show no effect.</p>
		 
		 <p>The type of the cursor is unspecified and depends on the particular data structure.
		 E.g. lists allow to specify an index, sets to specify an item and maps to specify a key.</p>
		 
		 <p>If <code>cursor</code> is specified, the iterator returns the item that is related
		 to that cursor with the first call to <code>next()</code> (and its predecessor with
		 the first call to <code>previous()</code> if the iterator allows bidirectional
		 navigation.</p>
		 
		 ]]></description>
<param><![CDATA[cursor The initial cursor position.
		 ]]></param>
<return><![CDATA[An iterator.
		 ]]></return>
</method>
<method name='keyIterator' fullname='org.as3commons.collections:Map/keyIterator' isStatic='false' isFinal='false' isOverride='false'  result_type='org.as3commons.collections.framework:IIterator'>
<description><![CDATA[
		 
		 Returns an iterator over the keys of the map.
		 
		 <p>The order of keys returned by the iterator is the same as in the particular collection.</p>
		 
		 ]]></description>
<return><![CDATA[An iterator over the map keys.
		 ]]></return>
</method>
<method name='keysToArray' fullname='org.as3commons.collections:Map/keysToArray' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[
		 
		 Returns an array of all keys in the order of the particular map.
		 
		 <p>The order of keys in the array is the same as in the particular collection.</p>
		 
		 ]]></description>
<return><![CDATA[An array of the keys of the map.
		 ]]></return>
</method>
<method name='removeAll' fullname='org.as3commons.collections:Map/removeAll' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='uint'>
<description><![CDATA[
		 
		 Removes all occurrences of a particular item from the collection.
		 
		 <p>The items are removed in the order they are stored.</p>
		 
		 ]]></description>
<param><![CDATA[item The item to remove completely from the collection.
		 ]]></param>
<return><![CDATA[Number of items removed.
		 ]]></return>
</method>
<method name='removeKey' fullname='org.as3commons.collections:Map/removeKey' isStatic='false' isFinal='false' isOverride='false'  param_names='key' param_types='*' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 
		 Removes the given key and its associated item from the map.
		 
		 <p>If the key is not contained the method abords with <code>undefined</code>.</p>
		 ]]></description>
<param><![CDATA[key The key.
		 ]]></param>
<return><![CDATA[The item associated with the removed key or <code>undefined</code> if the key is not contained.
		 ]]></return>
</method>
<method name='remove' fullname='org.as3commons.collections:Map/remove' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 
		 Removes an item from the collection.
		 
		 <p>Trying to remove an item which is not contained by the collection
		 leaves the collection untouched and returns <code>false</code>.</p>
		 
		 <p>If the collection contains multiple entries of the given item
		 the first occurrence of the item will be removed.</p>
		 
		 ]]></description>
<param><![CDATA[item The item to remove.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item has been removed.
		 ]]></return>
</method>
<method name='replaceFor' fullname='org.as3commons.collections:Map/replaceFor' isStatic='false' isFinal='false' isOverride='false'  param_names='key;item' param_types='*;*' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[
		 
		 Replaces the item associated with the given key.
		 
		 <p>If the key is not contained or the given item equals the item
		 stored with the given key, the method abords with <code>false</code>.</p>
		 
		 ]]></description>
<param><![CDATA[key The key.
		 ]]></param>
<param><![CDATA[item The replacing item.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item has been replaced.
		 ]]></return>
</method>
<method name='toArray' fullname='org.as3commons.collections:Map/toArray' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[
		 
		 Returns an array of all items.
		 
		 <p>The order of items in the array is the same as in the particular collection.</p>
		 
		 <p>Certain collections do not have an explicit order (<code>Map</code>, <code>Set</code>).
		 The order of the items in the array is then not predictable.</p>  
		 
		 <p>If the collection maintains an array as its data source, a copy
		 of the internal array is returned rather than the original array.</p>
		 
		 ]]></description>
<return><![CDATA[An array of the items of the collection.
		 ]]></return>
</method>
<method name='size' fullname='org.as3commons.collections:Map/size/get' isStatic='false' isFinal='false' isOverride='false'  result_type='uint'>
<description><![CDATA[
		 
		 The number of items contained by the collection.
		 ]]></description>
</method>
<field name='_items' fullname='org.as3commons.collections:Map/protected:_items' type='flash.utils:Dictionary' isStatic='false' isConst='false' >
<description><![CDATA[
		 The items of the non string keys.
		 ]]></description>
</field>
<field name='_keys' fullname='org.as3commons.collections:Map/protected:_keys' type='flash.utils:Dictionary' isStatic='false' isConst='false' >
<description><![CDATA[
		 The non string keys.
		 ]]></description>
</field>
<field name='_size' fullname='org.as3commons.collections:Map/protected:_size' type='uint' isStatic='false' isConst='false' defaultValue='0' >
<description><![CDATA[
		 The map size.
		 ]]></description>
</field>
<field name='_stringMap' fullname='org.as3commons.collections:Map/protected:_stringMap' type='Object' isStatic='false' isConst='false' >
<description><![CDATA[
		 The stringed key item map.
		 ]]></description>
</field>
<packageRec name='org.as3commons.collections.null' fullname='org.as3commons.collections.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<classRec name='ArrayList' fullname='org.as3commons.collections:ArrayList' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\ArrayList.as' namespace='org.as3commons.collections' access='public' baseclass='org.as3commons.collections.framework.core:AbstractList' interfaces='org.as3commons.collections.framework:IOrderedList' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Insertion order implementation of a list.
	 
	 <p><strong>Description</strong></p>
	 
	 <p>The <code>ArrayList</code> maintains an array as its source.</p>
	 
	 <p><strong>Runtime of operations</strong></p>
	 
	 <ul>
	 <li>Adding or removing of items at end - constant runtime O(1).<br />
	 <code>add(), addLast(), removeLast()</code></li>
	 <li>Getting or replacing of items - constant runtime O(1).<br />
	 <code>first, last, itemAt(), replaceAt()</code></li>
	 <li>Adding or removing of items in front (or in between) - linear runtime O(n).<br />
	 <code>addFirst(), addAt(), addAllAt(), removeFirst(), removeAt(), removeAllAt()</code></li>
	 <li>Item lookup operations - linear runtime O(n).<br />
	 has(), count(), firstIndexOf(), lastIndexOf(), remove(), removeAll()</code></li>
	 </ul>
	 
	 <p><strong>Notes</strong></p>
	 
	 <p>The <code>iterator()</code> method accepts an index position as the cursor parameter.
	 If the specified index position exceeds the list length, the returned iterator is positioned
	 at the end of the list.</p>
	 
	 <p>The <code>iterator()</code> method retuns an <code>IArrayListIterator</code>.</p>
	 
	 <p><code>null</code> is allowed.</p>
	 
	 <p id="link_ArrayListExample"><strong>ArrayList example</strong></p>
	 
	 <a class="exampleCollapsed" href="#link_ArrayListExample" onClick="toggleExample(this, 'ArrayListExample');">Show example</a><br /><div id="ArrayListExample" style='display:none'><listing version="3.0">package {
    import org.as3commons.collections.ArrayList;
    import org.as3commons.collections.framework.ICollectionIterator;
    import org.as3commons.collections.framework.IIterator;
    import org.as3commons.collections.framework.IListIterator;
    import org.as3commons.collections.framework.IOrderedListIterator;
    import org.as3commons.collections.utils.StringComparator;
    import flash.display.Sprite;

    public class ArrayListExample extends Sprite {

        public function ArrayListExample() {
            var list : ArrayList = new ArrayList();
            
            // Add

            list.add("a");
            list.add("b");
            list.addAllAt(1, ["c", "d"]);
            trace (list.toArray()); // a,c,d,b

            list.addFirst("e");
            list.addLast("a");
            list.addAt(3, "a");
            trace (list.toArray()); // e,a,c,a,d,b,a
            
            // Replace

            list.replaceAt(2, "a");
            list.replaceAt(3, "f");
            trace (list.toArray()); // e,a,a,f,d,b,a

            // Inspection

            trace (list.size); // 7
            trace (list.has("b")); // true
            trace (list.itemAt(3)); // f
            trace (list.firstIndexOf("a")); // 1
            trace (list.lastIndexOf("a")); // 6
            trace (list.count("a")); // 3
            
            // Reorder

            list.reverse();
            trace (list.toArray()); // a,b,d,f,a,a,e

            list.sort(new StringComparator());
            trace (list.toArray()); // a,a,a,b,d,e,f
            
            // Iterator

            var iterator : IIterator = list.iterator();
            trace (iterator is IIterator); // true
            trace (iterator is ICollectionIterator); // true
            trace (iterator is IListIterator); // true
            trace (iterator is IOrderedListIterator); // true

            while (iterator.hasNext()) {
                trace (iterator.next()); // a,a,a,b,d,e,f
            }

            // List iterator

            var listIterator : IListIterator = list.iterator() as IListIterator;
            while (listIterator.hasNext()) {
                listIterator.next();
                trace (listIterator.index + "=" + listIterator.current);
            }

            // 0=a
            // 1=a
            // 2=a
            // 3=b
            // 4=d
            // 5=e
            // 6=f

            // Remove

            list.remove("a");
            trace (list.toArray()); // a,a,b,d,e,f

            list.removeAll("a");
            trace (list.toArray()); // b,d,e,f

            list.removeAt(1);
            list.removeFirst();
            list.removeLast();
            trace (list.toArray()); // e

            list.clear();
            trace (list.toArray()); // []
        }
    }
}
</listing></div>
	 
	 <p id="link_ArrayListIteratorExample"><strong>ArrayListIterator example</strong></p>
	 
	 <a class="exampleCollapsed" href="#link_ArrayListIteratorExample" onClick="toggleExample(this, 'ArrayListIteratorExample');">Show example</a><br /><div id="ArrayListIteratorExample" style='display:none'><listing version="3.0">package {
    import org.as3commons.collections.ArrayList;
    import org.as3commons.collections.framework.IOrderedListIterator;
    import flash.display.Sprite;

    public class ArrayListIteratorExample extends Sprite {

        public function ArrayListIteratorExample() {
            var list : ArrayList = new ArrayList();
            var iterator : IOrderedListIterator;
            var item : 
            
            // ^ = cursor, [n] = current
            
            // Navigation
            
            list.array = [1, 2, 3];
            iterator = list.iterator() as IOrderedListIterator;
            
                                      //  ^  1  2  3
            iterator.next();          // [1] ^  2  3
            iterator.next();          //  1 [2] ^  3
            iterator.next();          //  1  2 [3] ^
            iterator.next();          //  1  2  3  ^
            iterator.previous();      //  1  2  ^ [3]
            iterator.previous();      //  1  ^ [2] 3
            iterator.previous();      //  ^ [1] 2  3
            iterator.previous();      //  ^  1  2  3

            iterator.next();          // [1] ^  2  3
            iterator.next();          //  1 [2] ^  3
            iterator.start();         //  ^  1  2  3

            iterator.next();          // [1] ^  2  3
            iterator.next();          //  1 [2] ^  3
            iterator.end();           //  1  2  3  ^
            
            // Current and index

            iterator = list.iterator() as IOrderedListIterator;
            
            with (iterator) {
                trace (index, current, previousIndex, nextIndex);
                // -1 undefined -1 0

                next();
                trace (index, current, previousIndex, nextIndex);
                // 0 1 0 1

                next();
                trace (index, current, previousIndex, nextIndex);
                // 1 2 1 2

                next();
                trace (index, current, previousIndex, nextIndex);
                // 2 3 2 -1

                next();
                trace (index, current, previousIndex, nextIndex);
                // -1 undefined 2 -1
            }
            
            // Start position
            
            iterator = list.iterator() as IOrderedListIterator;   //  ^  1  2  3
            iterator = list.iterator(1) as IOrderedListIterator;  //  1  ^  2  3
            iterator = list.iterator(2) as IOrderedListIterator;  //  1  2  ^  3
            iterator = list.iterator(10) as IOrderedListIterator; //  1  2  3  ^

            // Replace

            iterator = list.iterator() as IOrderedListIterator;

                                      //  ^  1  2  3
            iterator.next();          // [1] ^  2  3
            iterator.next();          //  1 [2] ^  3
            iterator.replace(4);      //  1 [4] ^  3
            iterator.next();          //  1  4 [3] ^
            iterator.replace(5);      //  1  4 [5] ^
            iterator.next();          //  1  4  5  ^
            iterator.replace(6);      //  1  4  5  ^

            // Remove

            list.array = [1, 2, 3];
            iterator = list.iterator() as IOrderedListIterator;
            
                                      //  ^  1  2  3
            iterator.next();          // [1] ^  2  3
            iterator.next();          //  1 [2] ^  3
            iterator.remove();        //  1  ^  3
            iterator.next();          //  1 [3] ^
            iterator.remove();        //  1  ^
            iterator.remove();        //  1  ^

            // Add

            list.array = [1, 2, 3];
            iterator = list.iterator() as IOrderedListIterator;
            
                                      //  ^  1  2  3
            iterator.addAfter(4);     //  ^  4  1  2  3
            iterator.addBefore(5);    //  5  ^  4  1  2  3

            iterator.next();          //  5 [4] ^  1  2  3
            iterator.next();          //  5  4 [1] ^  2  3
            iterator.addBefore(6);    //  5  4  1  6  ^  2  3
            iterator.addAfter(7);     //  5  4  1  6  ^  7  2  3

            iterator.next();          //  5  4  1  6 [7] ^  2  3
            iterator.next();          //  5  4  1  6  7 [2] ^  3
            iterator.next();          //  5  4  1  6  7  2 [3] ^
            iterator.addBefore(8);    //  5  4  1  6  7  2  3  8  ^
            iterator.addAfter(9);     //  5  4  1  6  7  2  3  8  ^  9
            
            // Add during iteration

            list.array = [1, 2, 3];
            iterator = list.iterator() as IOrderedListIterator;
            while (iterator.hasNext()) {
                item = iterator.next();
                trace (item); // 1,2,5,3,7

                if (item == 1) iterator.addBefore(4);   //  1  4  ^  2  3
                if (item == 2) iterator.addAfter(5);    //  1  4  2  ^  5  3
                if (item == 5) iterator.addBefore(6);   //  1  4  2  5  6  ^  3
                if (item == 3) iterator.addAfter(7);    //  1  4  2  5  6  3  ^  7
            }
            trace (list.toArray()); // 1,4,2,5,6,3,7

            // Replace during iteration

            list.array = [1, 2, 3];
            iterator = list.iterator() as IOrderedListIterator;
            while (iterator.hasNext()) {
                item = iterator.next();
                trace (item); // 1,2,3

                if (item == 1) iterator.replace(4);   // [4] ^  2  3
                if (item == 2) iterator.replace(5);   //  4 [5] ^  3
                if (item == 3) iterator.replace(6);   //  4  5 [6] ^
            }
            trace (list.toArray()); // 4,5,6

            // Remove during iteration

            list.array = [1, 2, 3, 4, 5];
            iterator = list.iterator() as IOrderedListIterator;
            while (iterator.hasNext()) {
                item = iterator.next();
                trace (item); // 1,2,3,4,5

                if (item == 1) iterator.remove();   //  ^  2  3  4  5
                if (item == 3) iterator.remove();   //  2  ^  4  5
                if (item == 5) iterator.remove();   //  2  4  ^
            }
            trace (list.toArray()); // 2,4

            // Reverse iteration

            list.array = [1, 2, 3, 4, 5];
            iterator = list.iterator() as IOrderedListIterator;
            iterator.end();
            while (iterator.hasPrevious()) {
                trace (iterator.previous()); // 5,4,3,2,1
            }
        }
    }
}
</listing></div>
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 17.02.2010
	 ]]></author>
<see><![CDATA[org.as3commons.collections.framework.IOrderedList IOrderedList interface - Detailed description of the ordered list features.
	 ]]></see>
<see><![CDATA[org.as3commons.collections.framework.IOrderedListIterator IOrderedListIterator interface - Detailed description of the ordered list iterator features.
	 ]]></see>
<see><![CDATA[org.as3commons.collections.framework.IList IList interface - Detailed description of the base list features.
	 ]]></see>
</classRec>
<method name='ArrayList' fullname='org.as3commons.collections:ArrayList/ArrayList' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 ArrayList constructor.
		 ]]></description>
</method>
<method name='addAllAt' fullname='org.as3commons.collections:ArrayList/addAllAt' isStatic='false' isFinal='false' isOverride='false'  param_names='index;items' param_types='uint;Array' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[
		 
		 Adds an array of items at a specific position.
		 
		 <p>If the given position exceeds the list size, the method aborts
		 with <code>false</code>.</p>
		 
		 ]]></description>
<param><![CDATA[index The position of the items to add.
		 ]]></param>
<param><![CDATA[items An array of items to add.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item has been added.
		 ]]></return>
</method>
<method name='addAt' fullname='org.as3commons.collections:ArrayList/addAt' isStatic='false' isFinal='false' isOverride='false'  param_names='index;item' param_types='uint;*' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[
		 
		 Adds an item at a specific position.
		 
		 <p>If the given position exceeds the list size, the method
		 aborts with <code>false</code>.</p>
		 
		 ]]></description>
<param><![CDATA[index The position of the new item.
		 ]]></param>
<param><![CDATA[item The item to add.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item has been added.
		 ]]></return>
</method>
<method name='addFirst' fullname='org.as3commons.collections:ArrayList/addFirst' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 
		 Adds an item in front of the list.
		 
		 ]]></description>
<param><![CDATA[item The item to add.
		 ]]></param>
</method>
<method name='addLast' fullname='org.as3commons.collections:ArrayList/addLast' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 
		 Adds an item at the end of the list.
		 
		 ]]></description>
<param><![CDATA[item The item to add.
		 ]]></param>
</method>
<method name='iterator' fullname='org.as3commons.collections:ArrayList/iterator' isStatic='false' isFinal='false' isOverride='true'  param_names='cursor' param_types='*' param_defaults='unknown' result_type='org.as3commons.collections.framework:IIterator'>
<description><![CDATA[
		 
		 Returns an iterator over the iterable data structure.
		 
		 <p>The <code>cursor</code> parameter is optional and not considered by all iterable
		 data structures. E.g. the iterator of an unordered collection such as <code>Map</code>
		 or <code>Set</code> starts always with the first item found. Still passing a parameter to
		 such a data structure does not throw an error and will simply show no effect.</p>
		 
		 <p>The type of the cursor is unspecified and depends on the particular data structure.
		 E.g. lists allow to specify an index, sets to specify an item and maps to specify a key.</p>
		 
		 <p>If <code>cursor</code> is specified, the iterator returns the item that is related
		 to that cursor with the first call to <code>next()</code> (and its predecessor with
		 the first call to <code>previous()</code> if the iterator allows bidirectional
		 navigation.</p>
		 
		 ]]></description>
<param><![CDATA[cursor The initial cursor position.
		 ]]></param>
<return><![CDATA[An iterator.
		 ]]></return>
</method>
<method name='replaceAt' fullname='org.as3commons.collections:ArrayList/replaceAt' isStatic='false' isFinal='false' isOverride='false'  param_names='index;item' param_types='uint;*' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[
		 
		 Replaces the item at the specified position.
		 
		 <p>If the item at the position strictly equals the given item or the index
		 exceeds the list length, this method aborts with <code>false</code>.</p>
		 
		 ]]></description>
<param><![CDATA[index The position of the item to replace.
		 ]]></param>
<param><![CDATA[item The replacing item.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item has been replaced.
		 ]]></return>
</method>
<method name='reverse' fullname='org.as3commons.collections:ArrayList/reverse' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		 
		 Reverses the collection order.
		 
		 <p>If the collection size is less than 2, the method aborts with <code>false</code>.</p>
		 
		 ]]></description>
<return><![CDATA[<code>true</code> if the collection has been reversed.
		 ]]></return>
</method>
<method name='sort' fullname='org.as3commons.collections:ArrayList/sort' isStatic='false' isFinal='false' isOverride='false'  param_names='comparator' param_types='org.as3commons.collections.framework:IComparator' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 
		 Sorts the linked collection using the given comparator.
		 
		 <p>The sort algorithm used by implementors of this interface is stable which
		 means that equal items are sorted in the same order they had before the sorting.</p>
		 
		 <p>If the collection size is less than 2, the method aborts with <code>false</code>.</p>
		 
		 ]]></description>
<param><![CDATA[comparator The sort criterion.
		 ]]></param>
<return><![CDATA[<code>true</code> if the linked collection has been sorted.
		 ]]></return>
</method>
<packageRec name='org.as3commons.collections.null' fullname='org.as3commons.collections.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<classRec name='LinkedSet' fullname='org.as3commons.collections:LinkedSet' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\LinkedSet.as' namespace='org.as3commons.collections' access='public' baseclass='org.as3commons.collections.framework.core:AbstractLinkedCollection' interfaces='org.as3commons.collections.framework:IOrderedSet' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Insertion order implementation of a set.
	 
	 <p><strong>Description</strong></p>
	 
	 <p>The <code>LinkedSet</code> is a combination of a dictionary and a linked list.</p>
	 
	 <p><strong>Runtime of operations</strong></p>
	 
	 <ul>
	 <li>Adding, getting or removing of items - constant runtime O(1).<br />
	 <code>add(), addFirst(), addLast(), first, last, removeFirst(), removeLast()</code></li>
	 <li>Item lookup operations - constant runtime O(1).<br />
	 addBefore(), addAfter(), has(), count(), replace(), remove()</code></li>
	 </ul>
	 
	 <p><strong>Notes</strong></p>
	 
	 <p>The <code>iterator()</code> method accepts an item as the cursor parameter. If the given
	 item is not contained by the set, it will be ignored.</p>
	 
	 <p>The <code>iterator()</code> method retuns an <code>IOrderedSetIterator</code>.</p>
	 
	 <p><code>null</code> is allowed.</p>
	 
	 <p id="link_LinkedSetExample"><strong>LinkedSet example</strong></p>
	 
	 <p>This example shows the specific behaviour of a <code>LinkedSet</code>.
	 The general work with collections and iterators is more detailed illustrated
	 in the <code>Set</code> and <code>ArrayList</code> examples below.</p>
	 
	 <a class="exampleCollapsed" href="#link_LinkedSetExample" onClick="toggleExample(this, 'LinkedSetExample');">Show example</a><br /><div id="LinkedSetExample" style='display:none'><listing version="3.0">package {
    import org.as3commons.collections.LinkedSet;
    import org.as3commons.collections.framework.ICollectionIterator;
    import org.as3commons.collections.framework.IIterator;
    import org.as3commons.collections.framework.IMapIterator;
    import org.as3commons.collections.framework.IOrderedMapIterator;
    import flash.display.Sprite;

    public class LinkedSetExample extends Sprite {

        public function LinkedSetExample() {
            var theSet : LinkedSet = new LinkedSet();
            
            // Add
            
            theSet.add(4);
            theSet.add(1);
            theSet.add(3);
            theSet.add(5);
            theSet.add(2);
            trace (theSet.toArray()); // 4,1,3,5,2
            
            theSet.addBefore(3, 6);
            theSet.addAfter(5, 7);
            trace (theSet.toArray()); // 4,1,6,3,5,7,2

            theSet.addFirst(8);
            theSet.addLast(9);
            trace (theSet.toArray()); // 8,4,1,6,3,5,7,2,9

            // Inspection
            
            trace (theSet.first); // 8
            trace (theSet.last); // 9
            
            // Iterator

            var iterator : IIterator = theSet.iterator();
            trace (iterator is IIterator); // true
            trace (iterator is ICollectionIterator); // true
            trace (iterator is IMapIterator); // true
            trace (iterator is IOrderedMapIterator); // true
            
            while (iterator.hasNext()) {
                trace (iterator.next()); // 8,4,1,6,3,5,7,2,9
            }

            // Remove

            theSet.removeFirst();
            theSet.removeFirst();
            theSet.removeLast();
            theSet.removeLast();
            trace (theSet.toArray()); // 1,6,3,5,7
        }
    }
}
</listing></div>
	 
	 <p id="link_SetExample"><strong>Set example</strong></p>
	 
	 <a class="exampleCollapsed" href="#link_SetExample" onClick="toggleExample(this, 'SetExample');">Show example</a><br /><div id="SetExample" style='display:none'><listing version="3.0">package {
    import org.as3commons.collections.Set;
    import org.as3commons.collections.framework.ICollectionIterator;
    import org.as3commons.collections.framework.IIterator;
    import org.as3commons.collections.framework.ISetIterator;
    import flash.display.Sprite;

    public class SetExample extends Sprite {

        public function SetExample() {
            var theSet : Set = new Set();
            
            // Add
            
            theSet.add(1);
            theSet.add(2);
            theSet.add(3);
            theSet.add("4a");
            theSet.add("4b");
            theSet.add("4b"); // no effect (item already contained)
            
            trace (theSet.toArray()); // 4a,4b,1,2,3
            
            // Inspection
            
            trace (theSet.has(1)); // true;
            trace (theSet.has(4)); // false;
            
            // Iterator

            var iterator : IIterator = theSet.iterator();
            trace (iterator is IIterator); // true
            trace (iterator is ICollectionIterator); // true
            trace (iterator is ISetIterator); // true

            while (iterator.hasNext()) {
                trace (iterator.next()); // 4a,4b,1,2,3
            }

            // Set iterator

            var si : ISetIterator = theSet.iterator() as ISetIterator;
            trace (si.previousItem + " [" + si.current + "] " + si.nextItem);
            while (si.hasNext()) {
                si.next();
                trace (si.previousItem + " [" + si.current + "] " + si.nextItem);
            }

            // undefined [undefined] 4b
            // 4b [4b] 4a
            // 4a [4a] 1
            // 1 [1] 2
            // 2 [2] 3
            // 3 [3] undefined

            // Remove
            
            theSet.remove(2);
            theSet.remove("4b");
            theSet.remove("4"); // no effect (item not contained)

            trace (theSet.toArray()); // 4a,1,3
        }
    }
}
</listing></div>
	 
	 <p id="link_ArrayListExample"><strong>ArrayList example</strong></p>
	 
	 <a class="exampleCollapsed" href="#link_ArrayListExample" onClick="toggleExample(this, 'ArrayListExample');">Show example</a><br /><div id="ArrayListExample" style='display:none'><listing version="3.0">package {
    import org.as3commons.collections.ArrayList;
    import org.as3commons.collections.framework.ICollectionIterator;
    import org.as3commons.collections.framework.IIterator;
    import org.as3commons.collections.framework.IListIterator;
    import org.as3commons.collections.framework.IOrderedListIterator;
    import org.as3commons.collections.utils.StringComparator;
    import flash.display.Sprite;

    public class ArrayListExample extends Sprite {

        public function ArrayListExample() {
            var list : ArrayList = new ArrayList();
            
            // Add

            list.add("a");
            list.add("b");
            list.addAllAt(1, ["c", "d"]);
            trace (list.toArray()); // a,c,d,b

            list.addFirst("e");
            list.addLast("a");
            list.addAt(3, "a");
            trace (list.toArray()); // e,a,c,a,d,b,a
            
            // Replace

            list.replaceAt(2, "a");
            list.replaceAt(3, "f");
            trace (list.toArray()); // e,a,a,f,d,b,a

            // Inspection

            trace (list.size); // 7
            trace (list.has("b")); // true
            trace (list.itemAt(3)); // f
            trace (list.firstIndexOf("a")); // 1
            trace (list.lastIndexOf("a")); // 6
            trace (list.count("a")); // 3
            
            // Reorder

            list.reverse();
            trace (list.toArray()); // a,b,d,f,a,a,e

            list.sort(new StringComparator());
            trace (list.toArray()); // a,a,a,b,d,e,f
            
            // Iterator

            var iterator : IIterator = list.iterator();
            trace (iterator is IIterator); // true
            trace (iterator is ICollectionIterator); // true
            trace (iterator is IListIterator); // true
            trace (iterator is IOrderedListIterator); // true

            while (iterator.hasNext()) {
                trace (iterator.next()); // a,a,a,b,d,e,f
            }

            // List iterator

            var listIterator : IListIterator = list.iterator() as IListIterator;
            while (listIterator.hasNext()) {
                listIterator.next();
                trace (listIterator.index + "=" + listIterator.current);
            }

            // 0=a
            // 1=a
            // 2=a
            // 3=b
            // 4=d
            // 5=e
            // 6=f

            // Remove

            list.remove("a");
            trace (list.toArray()); // a,a,b,d,e,f

            list.removeAll("a");
            trace (list.toArray()); // b,d,e,f

            list.removeAt(1);
            list.removeFirst();
            list.removeLast();
            trace (list.toArray()); // e

            list.clear();
            trace (list.toArray()); // []
        }
    }
}
</listing></div>
	 
	 <p id="link_ArrayListIteratorExample"><strong>ArrayListIterator example</strong></p>
	 
	 <a class="exampleCollapsed" href="#link_ArrayListIteratorExample" onClick="toggleExample(this, 'ArrayListIteratorExample');">Show example</a><br /><div id="ArrayListIteratorExample" style='display:none'><listing version="3.0">package {
    import org.as3commons.collections.ArrayList;
    import org.as3commons.collections.framework.IOrderedListIterator;
    import flash.display.Sprite;

    public class ArrayListIteratorExample extends Sprite {

        public function ArrayListIteratorExample() {
            var list : ArrayList = new ArrayList();
            var iterator : IOrderedListIterator;
            var item : 
            
            // ^ = cursor, [n] = current
            
            // Navigation
            
            list.array = [1, 2, 3];
            iterator = list.iterator() as IOrderedListIterator;
            
                                      //  ^  1  2  3
            iterator.next();          // [1] ^  2  3
            iterator.next();          //  1 [2] ^  3
            iterator.next();          //  1  2 [3] ^
            iterator.next();          //  1  2  3  ^
            iterator.previous();      //  1  2  ^ [3]
            iterator.previous();      //  1  ^ [2] 3
            iterator.previous();      //  ^ [1] 2  3
            iterator.previous();      //  ^  1  2  3

            iterator.next();          // [1] ^  2  3
            iterator.next();          //  1 [2] ^  3
            iterator.start();         //  ^  1  2  3

            iterator.next();          // [1] ^  2  3
            iterator.next();          //  1 [2] ^  3
            iterator.end();           //  1  2  3  ^
            
            // Current and index

            iterator = list.iterator() as IOrderedListIterator;
            
            with (iterator) {
                trace (index, current, previousIndex, nextIndex);
                // -1 undefined -1 0

                next();
                trace (index, current, previousIndex, nextIndex);
                // 0 1 0 1

                next();
                trace (index, current, previousIndex, nextIndex);
                // 1 2 1 2

                next();
                trace (index, current, previousIndex, nextIndex);
                // 2 3 2 -1

                next();
                trace (index, current, previousIndex, nextIndex);
                // -1 undefined 2 -1
            }
            
            // Start position
            
            iterator = list.iterator() as IOrderedListIterator;   //  ^  1  2  3
            iterator = list.iterator(1) as IOrderedListIterator;  //  1  ^  2  3
            iterator = list.iterator(2) as IOrderedListIterator;  //  1  2  ^  3
            iterator = list.iterator(10) as IOrderedListIterator; //  1  2  3  ^

            // Replace

            iterator = list.iterator() as IOrderedListIterator;

                                      //  ^  1  2  3
            iterator.next();          // [1] ^  2  3
            iterator.next();          //  1 [2] ^  3
            iterator.replace(4);      //  1 [4] ^  3
            iterator.next();          //  1  4 [3] ^
            iterator.replace(5);      //  1  4 [5] ^
            iterator.next();          //  1  4  5  ^
            iterator.replace(6);      //  1  4  5  ^

            // Remove

            list.array = [1, 2, 3];
            iterator = list.iterator() as IOrderedListIterator;
            
                                      //  ^  1  2  3
            iterator.next();          // [1] ^  2  3
            iterator.next();          //  1 [2] ^  3
            iterator.remove();        //  1  ^  3
            iterator.next();          //  1 [3] ^
            iterator.remove();        //  1  ^
            iterator.remove();        //  1  ^

            // Add

            list.array = [1, 2, 3];
            iterator = list.iterator() as IOrderedListIterator;
            
                                      //  ^  1  2  3
            iterator.addAfter(4);     //  ^  4  1  2  3
            iterator.addBefore(5);    //  5  ^  4  1  2  3

            iterator.next();          //  5 [4] ^  1  2  3
            iterator.next();          //  5  4 [1] ^  2  3
            iterator.addBefore(6);    //  5  4  1  6  ^  2  3
            iterator.addAfter(7);     //  5  4  1  6  ^  7  2  3

            iterator.next();          //  5  4  1  6 [7] ^  2  3
            iterator.next();          //  5  4  1  6  7 [2] ^  3
            iterator.next();          //  5  4  1  6  7  2 [3] ^
            iterator.addBefore(8);    //  5  4  1  6  7  2  3  8  ^
            iterator.addAfter(9);     //  5  4  1  6  7  2  3  8  ^  9
            
            // Add during iteration

            list.array = [1, 2, 3];
            iterator = list.iterator() as IOrderedListIterator;
            while (iterator.hasNext()) {
                item = iterator.next();
                trace (item); // 1,2,5,3,7

                if (item == 1) iterator.addBefore(4);   //  1  4  ^  2  3
                if (item == 2) iterator.addAfter(5);    //  1  4  2  ^  5  3
                if (item == 5) iterator.addBefore(6);   //  1  4  2  5  6  ^  3
                if (item == 3) iterator.addAfter(7);    //  1  4  2  5  6  3  ^  7
            }
            trace (list.toArray()); // 1,4,2,5,6,3,7

            // Replace during iteration

            list.array = [1, 2, 3];
            iterator = list.iterator() as IOrderedListIterator;
            while (iterator.hasNext()) {
                item = iterator.next();
                trace (item); // 1,2,3

                if (item == 1) iterator.replace(4);   // [4] ^  2  3
                if (item == 2) iterator.replace(5);   //  4 [5] ^  3
                if (item == 3) iterator.replace(6);   //  4  5 [6] ^
            }
            trace (list.toArray()); // 4,5,6

            // Remove during iteration

            list.array = [1, 2, 3, 4, 5];
            iterator = list.iterator() as IOrderedListIterator;
            while (iterator.hasNext()) {
                item = iterator.next();
                trace (item); // 1,2,3,4,5

                if (item == 1) iterator.remove();   //  ^  2  3  4  5
                if (item == 3) iterator.remove();   //  2  ^  4  5
                if (item == 5) iterator.remove();   //  2  4  ^
            }
            trace (list.toArray()); // 2,4

            // Reverse iteration

            list.array = [1, 2, 3, 4, 5];
            iterator = list.iterator() as IOrderedListIterator;
            iterator.end();
            while (iterator.hasPrevious()) {
                trace (iterator.previous()); // 5,4,3,2,1
            }
        }
    }
}
</listing></div>
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 25.03.2010
	 ]]></author>
<see><![CDATA[org.as3commons.collections.framework.IOrderedSet IOrderedSet interface - Detailed description of the ordered set features.
	 ]]></see>
<see><![CDATA[org.as3commons.collections.framework.IOrderedSetIterator IOrderedSetIterator interface - Detailed description of the ordered set iterator features.
	 ]]></see>
<see><![CDATA[org.as3commons.collections.framework.ISet ISet interface - Detailed description of the base set features.
	 ]]></see>
</classRec>
<method name='LinkedSet' fullname='org.as3commons.collections:LinkedSet/LinkedSet' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 LinkedSet constructor.
		 ]]></description>
</method>
<method name='addAfter' fullname='org.as3commons.collections:LinkedSet/addAfter' isStatic='false' isFinal='false' isOverride='false'  param_names='previousItem;item' param_types='*;*' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[
		 
		 Adds an item after an existing one.
		 
		 <p>If the item is already contained, the method aborts with <code>false</code>.</p>
		 
		 ]]></description>
<param><![CDATA[previousItem The item to add after.
		 ]]></param>
<param><![CDATA[item The item to add.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item has been added.
		 ]]></return>
</method>
<method name='addBefore' fullname='org.as3commons.collections:LinkedSet/addBefore' isStatic='false' isFinal='false' isOverride='false'  param_names='nextItem;item' param_types='*;*' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[
		 
		 Adds an item before an existing one.
		 
		 <p>If the item is already contained, the method aborts with <code>false</code>.</p>
		 
		 ]]></description>
<param><![CDATA[nextItem The item to add before.
		 ]]></param>
<param><![CDATA[item The item to add.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item has been added.
		 ]]></return>
</method>
<method name='addFirst' fullname='org.as3commons.collections:LinkedSet/addFirst' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 
		 Adds an item in front of the set.
		 
		 <p>If the item is already contained, the method aborts with <code>false</code>.</p>
		 
		 ]]></description>
<param><![CDATA[item The item to add.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item has been added.
		 ]]></return>
</method>
<method name='addLast' fullname='org.as3commons.collections:LinkedSet/addLast' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 
		 Adds an item at the end of the set.
		 
		 <p>If the item is already contained, the method aborts with <code>false</code>.</p>
		 
		 ]]></description>
<param><![CDATA[item The item to add.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item has been added.
		 ]]></return>
</method>
<method name='add_private' fullname='org.as3commons.collections:LinkedSet/private:add_private' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='org.as3commons.collections.framework.core:LinkedNode'>
<description><![CDATA[
		 Adds the given item to the internal map.
		 ]]></description>
</method>
<method name='add' fullname='org.as3commons.collections:LinkedSet/add' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 
		 Adds an item to the set.
		 
		 <p>If the set already contains the given item, the method abords with <code>false</code>.</p>
		 
		 <p>The <code>LinkedSet</code> appends the item.</p>
		 
		 <p>The position of items that are added to a <code>SortedSet</code>
		 depends on its sort order.</p>
		 
		 ]]></description>
<param><![CDATA[item The item to add.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item has been added.
		 ]]></return>
</method>
<method name='clear' fullname='org.as3commons.collections:LinkedSet/clear' isStatic='false' isFinal='false' isOverride='true'  result_type='Boolean'>
<description><![CDATA[
		 
		 Removes all items from the collection.
		 
		 <p>If the collection is already empty, the method aborts with <code>false</code>.</p>
		 
		 ]]></description>
<return><![CDATA[<code>true</code> if items have been removed.
		 ]]></return>
</method>
<method name='getNode' fullname='org.as3commons.collections:LinkedSet/protected:getNode' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='org.as3commons.collections.framework.core:LinkedNode'>
<description><![CDATA[
		 Returns the node of the given item.
		 
		 ]]></description>
<param><![CDATA[item The item to get the node for.
		 ]]></param>
<return><![CDATA[The node or <code>null</code> if the item is not contained.
		 ]]></return>
</method>
<method name='has' fullname='org.as3commons.collections:LinkedSet/has' isStatic='false' isFinal='false' isOverride='true'  param_names='item' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 
		 Tests if an item is contained by the collection.
		 
		 ]]></description>
<param><![CDATA[item The item to test.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item is contained.
		 ]]></return>
</method>
<method name='iterator' fullname='org.as3commons.collections:LinkedSet/iterator' isStatic='false' isFinal='false' isOverride='true'  param_names='cursor' param_types='*' param_defaults='unknown' result_type='org.as3commons.collections.framework:IIterator'>
<description><![CDATA[
		 
		 Returns an iterator over the iterable data structure.
		 
		 <p>The <code>cursor</code> parameter is optional and not considered by all iterable
		 data structures. E.g. the iterator of an unordered collection such as <code>Map</code>
		 or <code>Set</code> starts always with the first item found. Still passing a parameter to
		 such a data structure does not throw an error and will simply show no effect.</p>
		 
		 <p>The type of the cursor is unspecified and depends on the particular data structure.
		 E.g. lists allow to specify an index, sets to specify an item and maps to specify a key.</p>
		 
		 <p>If <code>cursor</code> is specified, the iterator returns the item that is related
		 to that cursor with the first call to <code>next()</code> (and its predecessor with
		 the first call to <code>previous()</code> if the iterator allows bidirectional
		 navigation.</p>
		 
		 ]]></description>
<param><![CDATA[cursor The initial cursor position.
		 ]]></param>
<return><![CDATA[An iterator.
		 ]]></return>
</method>
<method name='next' fullname='org.as3commons.collections:LinkedSet/next' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 
		 Returns the successor of the given item.
		 
		 <p>If the item is not contained, the method returns <code>undefined</code>.</p>
		 
		 ]]></description>
<param><![CDATA[item The item to get its successor.
		 ]]></param>
<return><![CDATA[The predecessor or <code>undefined</code>.
		 ]]></return>
</method>
<method name='previous' fullname='org.as3commons.collections:LinkedSet/previous' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 
		 Returns the predecessor of the given item.
		 
		 <p>If the item is not contained, the method returns <code>undefined</code>.</p>
		 
		 ]]></description>
<param><![CDATA[item The item to get its predecessor.
		 ]]></param>
<return><![CDATA[The predecessor or <code>undefined</code>.
		 ]]></return>
</method>
<method name='removeFirst' fullname='org.as3commons.collections:LinkedSet/removeFirst' isStatic='false' isFinal='false' isOverride='true'  result_type='*'>
<description><![CDATA[
		 
		 Removes the first item of the ordered collection.
		 
		 ]]></description>
<return><![CDATA[The formerly first item or <code>undefined</code> if the collection is empty.
		 ]]></return>
</method>
<method name='removeLast' fullname='org.as3commons.collections:LinkedSet/removeLast' isStatic='false' isFinal='false' isOverride='true'  result_type='*'>
<description><![CDATA[
		 
		 Removes the last item of the ordered collection.
		 
		 ]]></description>
<return><![CDATA[The formerly last item or <code>undefined</code> if the collection is empty.
		 ]]></return>
</method>
<method name='removeNode' fullname='org.as3commons.collections:LinkedSet/protected:removeNode' isStatic='false' isFinal='false' isOverride='true'  param_names='node' param_types='org.as3commons.collections.framework.core:LinkedNode' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 
		 Unlinks a node and connects predecessor with successor.
		 
		 ]]></description>
<param><![CDATA[node The node to remove
		 ]]></param>
</method>
<method name='remove_private' fullname='org.as3commons.collections:LinkedSet/private:remove_private' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Removes the given item from the internal map.
		 ]]></description>
</method>
<method name='remove' fullname='org.as3commons.collections:LinkedSet/remove' isStatic='false' isFinal='false' isOverride='true'  param_names='item' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 
		 Removes an item from the collection.
		 
		 <p>Trying to remove an item which is not contained by the collection
		 leaves the collection untouched and returns <code>false</code>.</p>
		 
		 <p>If the collection contains multiple entries of the given item
		 the first occurrence of the item will be removed.</p>
		 
		 ]]></description>
<param><![CDATA[item The item to remove.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item has been removed.
		 ]]></return>
</method>
<method name='replace' fullname='org.as3commons.collections:LinkedSet/replace' isStatic='false' isFinal='false' isOverride='false'  param_names='oldItem;item' param_types='*;*' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[
		 
		 Replaces an item. 
		 
		 <p>The new item is added at the same position as the old item.</p>
		 
		 <p>If the item is already contained, the method aborts with <code>false</code>.</p>
		 
		 ]]></description>
<param><![CDATA[oldItem The item replace.
		 ]]></param>
<param><![CDATA[item The replacing item.
		 ]]></param>
<param><![CDATA[item The item to add.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item has been added.
		 ]]></return>
</method>
<field name='_items' fullname='org.as3commons.collections:LinkedSet/private:_items' type='flash.utils:Dictionary' isStatic='false' isConst='false' >
<description><![CDATA[
		 The non string items.
		 ]]></description>
</field>
<field name='_stringItems' fullname='org.as3commons.collections:LinkedSet/private:_stringItems' type='Object' isStatic='false' isConst='false' >
<description><![CDATA[
		 The string items.
		 ]]></description>
</field>
<packageRec name='org.as3commons.collections.null' fullname='org.as3commons.collections.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<classRec name='SortedMap' fullname='org.as3commons.collections:SortedMap' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\SortedMap.as' namespace='org.as3commons.collections' access='public' baseclass='org.as3commons.collections.framework.core:AbstractSortedDuplicatesCollection' interfaces='org.as3commons.collections.framework:ISortedMap' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Sort order implementation of a map.
	 
	 <p><strong>Description</strong></p>
	 
	 <p>The <code>SortedMap</code> is a combination of a dictionary and a binary search tree.</p>
	 
	 <p><strong>Runtime of operations</strong></p>
	 
	 <ul>
	 <li>Getting or removing of items - constant runtime O(1).<br />
	 <code>first, last, removeFirst(), removeLast()</code></li>
	 <li>Key lookup operations - constant runtime O(1).<br />
	 hasKey(), addBefore(), addAfter(), itemFor(), replaceFor(), removeKey()</code></li>
	 <li>Adding and removing of items - logarithmic runtime O(log n).<br />
	 add(), remove(), removeAll()</code></li>
	 <li>Item lookup inspection operations - logarithmic runtime O(log n).<br />
	 has(), count(), lesserKey(), higherKey(), equalKeys()</code></li>
	 </ul>
	 
	 <p><strong>Notes</strong></p>
	 
	 <p>The <code>iterator()</code> method accepts a key as the cursor parameter. If the given
	 key is not contained by the map, it will be ignored.</p>
	 
	 <p>The <code>iterator()</code> method retuns an <code>IMapIterator</code>.</p>
	 
	 <p><code>null</code> is allowed for keys and for values if the comparator allows <code>null</code>.</p>
	 
	 <p id="link_SortedMapExample"><strong>SortedMap example</strong></p>
	 
	 <p>This example shows the specific behaviour of a <code>SortedMap</code>.
	 The general work with collections and iterators is more detailed illustrated
	 in the <code>Map</code> and <code>ArrayList</code> examples below.</p>
	 
	 <a class="exampleCollapsed" href="#link_SortedMapExample" onClick="toggleExample(this, 'SortedMapExample');">Show example</a><br /><div id="SortedMapExample" style='display:none'><listing version="3.0">package {
    import org.as3commons.collections.SortedMap;
    import org.as3commons.collections.framework.ICollectionIterator;
    import org.as3commons.collections.framework.IIterator;
    import org.as3commons.collections.framework.IMapIterator;
    import org.as3commons.collections.utils.NumericComparator;
    import flash.display.Sprite;

    public class SortedMapExample extends Sprite {

        public function SortedMapExample() {
            
            var map : SortedMap = new SortedMap(new NumericComparator());
            
            // Add
            
            map.add("threeA", 3);
            map.add("four", 4);
            map.add("one", 1);
            map.add("threeB", 3);
            map.add("five", 5);
            map.add("two", 2);
            map.add("threeC", 3);
            trace (map.keysToArray()); // one,two,threeA,threeB,threeC,four,five
            trace (map.toArray()); // 1,2,3,3,3,4,5
            
            // Replace

            map.replaceFor("one", 4);
            map.replaceFor("threeB", -3);
            trace (map.keysToArray()); // threeB,two,threeA,threeC,four,one,five
            trace (map.toArray()); // -3,2,3,3,4,4,5

            // Inspection
            
            trace (map.first); // -3
            trace (map.last); // 5

            trace (map.hasEqual(3)); // true
            trace (map.hasEqual(6)); // false
            trace (map.equalKeys(3)); // threeA,threeC
            
            trace (map.lesserKey(-4)); // undefined
            trace (map.lesserKey(-3)); // undefined
            trace (map.lesserKey(-2)); // threeB
            trace (map.lesserKey(4)); // threeC
            
            trace (map.higherKey(2)); // threeA
            trace (map.higherKey(3)); // four
            trace (map.higherKey(5)); // undefined
            trace (map.higherKey(6)); // undefined
            
            // Iterator

            var iterator : IIterator = map.iterator();
            trace (iterator is IIterator); // true
            trace (iterator is ICollectionIterator); // true
            trace (iterator is IMapIterator); // true
            
            while (iterator.hasNext()) {
                trace (iterator.next()); // -3,2,3,3,4,4,5
            }

            // Remove

            map.removeFirst();
            map.removeFirst();
            map.removeLast();
            map.removeLast();
            trace (map.keysToArray()); // threeA,threeC,four
            trace (map.toArray()); // 3,3,4
        }
    }
}
</listing></div>
	 
	 <p id="link_MapExample"><strong>Map example</strong></p>
	 
	 <a class="exampleCollapsed" href="#link_MapExample" onClick="toggleExample(this, 'MapExample');">Show example</a><br /><div id="MapExample" style='display:none'><listing version="3.0">package {
    import org.as3commons.collections.Map;
    import org.as3commons.collections.framework.ICollectionIterator;
    import org.as3commons.collections.framework.IIterator;
    import org.as3commons.collections.framework.IMapIterator;
    import flash.display.Sprite;

    public class MapExample extends Sprite {

        public function MapExample() {
            var map : Map = new Map();
            
            // Add
            
            map.add(1, "one");
            map.add(2, "two");
            map.add(3, "three");
            map.add("4a", "four");
            map.add("4b", "four");
            map.add("4c", "four");
            
            map.add("4c", "fourC"); // no effect (key already contained)
            
            trace (map.toArray()); // four,four,four,one,two,three
            
            // Replace

            map.replaceFor(3, "three3");
            map.replaceFor("4a", "fourA");
            
            map.replaceFor(1, "one"); // no effect ("one" === "one")
            map.replaceFor(4, "four"); // no effect (key not contained)
            
            trace (map.toArray()); // fourA,four,four,one,two,three3

            // Inspection
            
            trace (map.size); // 6
            trace (map.hasKey(3)); // true
            trace (map.hasKey(4)); // false
            trace (map.itemFor(3)); // three3
            trace (map.itemFor(4)); // undefined
            trace (map.keysToArray()); // 4a,4b,4c,1,2,3

            // Iterator

            var iterator : IIterator = map.iterator();
            trace (iterator is IIterator); // true
            trace (iterator is ICollectionIterator); // true
            trace (iterator is IMapIterator); // true

            while (iterator.hasNext()) {
                trace (iterator.next()); // fourA,four,four,one,two,three3
            }

            // Map iterator

            var mi : IMapIterator = map.iterator() as IMapIterator;
            trace (mi.previousKey + " [" + mi.key + "=" + mi.current + "] " + mi.nextKey);
            while (mi.hasNext()) {
                mi.next();
                trace (mi.previousKey + " [" + mi.key + "=" + mi.current + "] " + mi.nextKey);
            }

            // undefined [undefined=undefined] 4a
            // 4a [4a=fourA] 4b
            // 4b [4b=four] 4c
            // 4c [4c=four] 1
            // 1 [1=one] 2
            // 2 [2=two] 3
            // 3 [3=three3] undefined
            
            // Remove

            map.removeKey(2);
            map.removeKey("4a");            
            map.removeKey(4); // no effect (key not contained)
            
            trace (map.toArray()); // four,four,one,three3

            map.remove("one");            
            map.remove("fourC"); // no effect (item not contained)
            
            trace (map.toArray()); // four,four,three3

            map.removeAll("four");            
            trace (map.toArray()); // three3
        }
    }
}
</listing></div>
	 
	 <p id="link_ArrayListExample"><strong>ArrayList example</strong></p>
	 
	 <a class="exampleCollapsed" href="#link_ArrayListExample" onClick="toggleExample(this, 'ArrayListExample');">Show example</a><br /><div id="ArrayListExample" style='display:none'><listing version="3.0">package {
    import org.as3commons.collections.ArrayList;
    import org.as3commons.collections.framework.ICollectionIterator;
    import org.as3commons.collections.framework.IIterator;
    import org.as3commons.collections.framework.IListIterator;
    import org.as3commons.collections.framework.IOrderedListIterator;
    import org.as3commons.collections.utils.StringComparator;
    import flash.display.Sprite;

    public class ArrayListExample extends Sprite {

        public function ArrayListExample() {
            var list : ArrayList = new ArrayList();
            
            // Add

            list.add("a");
            list.add("b");
            list.addAllAt(1, ["c", "d"]);
            trace (list.toArray()); // a,c,d,b

            list.addFirst("e");
            list.addLast("a");
            list.addAt(3, "a");
            trace (list.toArray()); // e,a,c,a,d,b,a
            
            // Replace

            list.replaceAt(2, "a");
            list.replaceAt(3, "f");
            trace (list.toArray()); // e,a,a,f,d,b,a

            // Inspection

            trace (list.size); // 7
            trace (list.has("b")); // true
            trace (list.itemAt(3)); // f
            trace (list.firstIndexOf("a")); // 1
            trace (list.lastIndexOf("a")); // 6
            trace (list.count("a")); // 3
            
            // Reorder

            list.reverse();
            trace (list.toArray()); // a,b,d,f,a,a,e

            list.sort(new StringComparator());
            trace (list.toArray()); // a,a,a,b,d,e,f
            
            // Iterator

            var iterator : IIterator = list.iterator();
            trace (iterator is IIterator); // true
            trace (iterator is ICollectionIterator); // true
            trace (iterator is IListIterator); // true
            trace (iterator is IOrderedListIterator); // true

            while (iterator.hasNext()) {
                trace (iterator.next()); // a,a,a,b,d,e,f
            }

            // List iterator

            var listIterator : IListIterator = list.iterator() as IListIterator;
            while (listIterator.hasNext()) {
                listIterator.next();
                trace (listIterator.index + "=" + listIterator.current);
            }

            // 0=a
            // 1=a
            // 2=a
            // 3=b
            // 4=d
            // 5=e
            // 6=f

            // Remove

            list.remove("a");
            trace (list.toArray()); // a,a,b,d,e,f

            list.removeAll("a");
            trace (list.toArray()); // b,d,e,f

            list.removeAt(1);
            list.removeFirst();
            list.removeLast();
            trace (list.toArray()); // e

            list.clear();
            trace (list.toArray()); // []
        }
    }
}
</listing></div>
	 
	 <p id="link_ArrayListIteratorExample"><strong>ArrayListIterator example</strong></p>
	 
	 <a class="exampleCollapsed" href="#link_ArrayListIteratorExample" onClick="toggleExample(this, 'ArrayListIteratorExample');">Show example</a><br /><div id="ArrayListIteratorExample" style='display:none'><listing version="3.0">package {
    import org.as3commons.collections.ArrayList;
    import org.as3commons.collections.framework.IOrderedListIterator;
    import flash.display.Sprite;

    public class ArrayListIteratorExample extends Sprite {

        public function ArrayListIteratorExample() {
            var list : ArrayList = new ArrayList();
            var iterator : IOrderedListIterator;
            var item : 
            
            // ^ = cursor, [n] = current
            
            // Navigation
            
            list.array = [1, 2, 3];
            iterator = list.iterator() as IOrderedListIterator;
            
                                      //  ^  1  2  3
            iterator.next();          // [1] ^  2  3
            iterator.next();          //  1 [2] ^  3
            iterator.next();          //  1  2 [3] ^
            iterator.next();          //  1  2  3  ^
            iterator.previous();      //  1  2  ^ [3]
            iterator.previous();      //  1  ^ [2] 3
            iterator.previous();      //  ^ [1] 2  3
            iterator.previous();      //  ^  1  2  3

            iterator.next();          // [1] ^  2  3
            iterator.next();          //  1 [2] ^  3
            iterator.start();         //  ^  1  2  3

            iterator.next();          // [1] ^  2  3
            iterator.next();          //  1 [2] ^  3
            iterator.end();           //  1  2  3  ^
            
            // Current and index

            iterator = list.iterator() as IOrderedListIterator;
            
            with (iterator) {
                trace (index, current, previousIndex, nextIndex);
                // -1 undefined -1 0

                next();
                trace (index, current, previousIndex, nextIndex);
                // 0 1 0 1

                next();
                trace (index, current, previousIndex, nextIndex);
                // 1 2 1 2

                next();
                trace (index, current, previousIndex, nextIndex);
                // 2 3 2 -1

                next();
                trace (index, current, previousIndex, nextIndex);
                // -1 undefined 2 -1
            }
            
            // Start position
            
            iterator = list.iterator() as IOrderedListIterator;   //  ^  1  2  3
            iterator = list.iterator(1) as IOrderedListIterator;  //  1  ^  2  3
            iterator = list.iterator(2) as IOrderedListIterator;  //  1  2  ^  3
            iterator = list.iterator(10) as IOrderedListIterator; //  1  2  3  ^

            // Replace

            iterator = list.iterator() as IOrderedListIterator;

                                      //  ^  1  2  3
            iterator.next();          // [1] ^  2  3
            iterator.next();          //  1 [2] ^  3
            iterator.replace(4);      //  1 [4] ^  3
            iterator.next();          //  1  4 [3] ^
            iterator.replace(5);      //  1  4 [5] ^
            iterator.next();          //  1  4  5  ^
            iterator.replace(6);      //  1  4  5  ^

            // Remove

            list.array = [1, 2, 3];
            iterator = list.iterator() as IOrderedListIterator;
            
                                      //  ^  1  2  3
            iterator.next();          // [1] ^  2  3
            iterator.next();          //  1 [2] ^  3
            iterator.remove();        //  1  ^  3
            iterator.next();          //  1 [3] ^
            iterator.remove();        //  1  ^
            iterator.remove();        //  1  ^

            // Add

            list.array = [1, 2, 3];
            iterator = list.iterator() as IOrderedListIterator;
            
                                      //  ^  1  2  3
            iterator.addAfter(4);     //  ^  4  1  2  3
            iterator.addBefore(5);    //  5  ^  4  1  2  3

            iterator.next();          //  5 [4] ^  1  2  3
            iterator.next();          //  5  4 [1] ^  2  3
            iterator.addBefore(6);    //  5  4  1  6  ^  2  3
            iterator.addAfter(7);     //  5  4  1  6  ^  7  2  3

            iterator.next();          //  5  4  1  6 [7] ^  2  3
            iterator.next();          //  5  4  1  6  7 [2] ^  3
            iterator.next();          //  5  4  1  6  7  2 [3] ^
            iterator.addBefore(8);    //  5  4  1  6  7  2  3  8  ^
            iterator.addAfter(9);     //  5  4  1  6  7  2  3  8  ^  9
            
            // Add during iteration

            list.array = [1, 2, 3];
            iterator = list.iterator() as IOrderedListIterator;
            while (iterator.hasNext()) {
                item = iterator.next();
                trace (item); // 1,2,5,3,7

                if (item == 1) iterator.addBefore(4);   //  1  4  ^  2  3
                if (item == 2) iterator.addAfter(5);    //  1  4  2  ^  5  3
                if (item == 5) iterator.addBefore(6);   //  1  4  2  5  6  ^  3
                if (item == 3) iterator.addAfter(7);    //  1  4  2  5  6  3  ^  7
            }
            trace (list.toArray()); // 1,4,2,5,6,3,7

            // Replace during iteration

            list.array = [1, 2, 3];
            iterator = list.iterator() as IOrderedListIterator;
            while (iterator.hasNext()) {
                item = iterator.next();
                trace (item); // 1,2,3

                if (item == 1) iterator.replace(4);   // [4] ^  2  3
                if (item == 2) iterator.replace(5);   //  4 [5] ^  3
                if (item == 3) iterator.replace(6);   //  4  5 [6] ^
            }
            trace (list.toArray()); // 4,5,6

            // Remove during iteration

            list.array = [1, 2, 3, 4, 5];
            iterator = list.iterator() as IOrderedListIterator;
            while (iterator.hasNext()) {
                item = iterator.next();
                trace (item); // 1,2,3,4,5

                if (item == 1) iterator.remove();   //  ^  2  3  4  5
                if (item == 3) iterator.remove();   //  2  ^  4  5
                if (item == 5) iterator.remove();   //  2  4  ^
            }
            trace (list.toArray()); // 2,4

            // Reverse iteration

            list.array = [1, 2, 3, 4, 5];
            iterator = list.iterator() as IOrderedListIterator;
            iterator.end();
            while (iterator.hasPrevious()) {
                trace (iterator.previous()); // 5,4,3,2,1
            }
        }
    }
}
</listing></div>
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 30.03.2010
	 ]]></author>
<see><![CDATA[org.as3commons.collections.framework.ISortedMap ISortedMap interface - Detailed description of the sorted map features.
	 ]]></see>
<see><![CDATA[org.as3commons.collections.framework.IMapIterator IMapIterator interface - Detailed description of the map iterator features.
	 ]]></see>
<see><![CDATA[org.as3commons.collections.framework.IMap IMap interface - Detailed description of the base map features.
	 ]]></see>
</classRec>
<method name='SortedMap' fullname='org.as3commons.collections:SortedMap/SortedMap' isStatic='false' isFinal='false' isOverride='false'  param_names='comparator' param_types='org.as3commons.collections.framework:IComparator' param_defaults='null' result_type='*'>
<description><![CDATA[
		 SortedMap constructor.
		 
		 ]]></description>
<param><![CDATA[comparator The sort criterion.
		 ]]></param>
</method>
<method name='addNode' fullname='org.as3commons.collections:SortedMap/protected:addNode' isStatic='false' isFinal='false' isOverride='true'  param_names='node' param_types='org.as3commons.collections.framework.core:SortedNode' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 
		 Adds an item to the tree.
		 
		 <p>The method creates a new tree node, inserts the node as the leaf of
		 its successor/predecessor and rotates then the node upwards until
		 the tree becomes consistent again regarding the priority constraint.</p>
		 
		 <p>If the tree is empty, the method simply creates a new root node.</p>
		 
		 ]]></description>
<param><![CDATA[newNode The node to add.
		 ]]></param>
</method>
<method name='add' fullname='org.as3commons.collections:SortedMap/add' isStatic='false' isFinal='false' isOverride='false'  param_names='key;item' param_types='*;*' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[
		 
		 Adds an item to the map.
		 
		 <p>If the map already contains the given key, the method abords with <code>false</code>.</p>
		 
		 <p>The <code>LinkedMap</code> appends the item.</p>
		 
		 <p>The position of items that are added to a <code>SortedMap</code>
		 depends on its sort order.</p>
		 
		 ]]></description>
<param><![CDATA[key The key of the item to add.
		 ]]></param>
<param><![CDATA[item The item to add.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item has been added.
		 ]]></return>
</method>
<method name='clear' fullname='org.as3commons.collections:SortedMap/clear' isStatic='false' isFinal='false' isOverride='true'  result_type='Boolean'>
<description><![CDATA[
		 
		 Removes all items from the collection.
		 
		 <p>If the collection is already empty, the method aborts with <code>false</code>.</p>
		 
		 ]]></description>
<return><![CDATA[<code>true</code> if items have been removed.
		 ]]></return>
</method>
<method name='equalKeys' fullname='org.as3commons.collections:SortedMap/equalKeys' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='Array'>
<description><![CDATA[
		 
		 Returns an array of the keys of all items that are equal to the given item.
		 
		 <p>If there is no equal item, the method returns an empty array.</p>
		 
		 ]]></description>
<param><![CDATA[item The item to test.
		 ]]></param>
<return><![CDATA[An array of the keys of all equal items.
		 ]]></return>
</method>
<method name='getNode' fullname='org.as3commons.collections:SortedMap/protected:getNode' isStatic='false' isFinal='false' isOverride='false'  param_names='key' param_types='*' param_defaults='undefined' result_type='org.as3commons.collections.framework.core:SortedMapNode'>
<description><![CDATA[
		 Returns the node of the given key.
		 
		 ]]></description>
<param><![CDATA[key The key to get the node for.
		 ]]></param>
<return><![CDATA[The node or <code>null</code> if the key is not contained.
		 ]]></return>
</method>
<method name='hasKey' fullname='org.as3commons.collections:SortedMap/hasKey' isStatic='false' isFinal='false' isOverride='false'  param_names='key' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 
		 Returns <code>true</code> if the map contains the given key.
		 
		 ]]></description>
<param><![CDATA[key The key to test.
		 ]]></param>
<return><![CDATA[<code>true</code> if the key is contained.
		 ]]></return>
</method>
<method name='higherKey' fullname='org.as3commons.collections:SortedMap/higherKey' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 
		 Returns the key of the first item that is higher than the given item.
		 
		 ]]></description>
<param><![CDATA[item The item to test.
		 ]]></param>
<return><![CDATA[The key of the next higher item or <code>undefined</code> if there is no higher item.
		 ]]></return>
</method>
<method name='itemFor' fullname='org.as3commons.collections:SortedMap/itemFor' isStatic='false' isFinal='false' isOverride='false'  param_names='key' param_types='*' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 
		 Returns the item associated with the given key.
		 
		 ]]></description>
<param><![CDATA[key The key.
		 ]]></param>
<return><![CDATA[The item if the key is contained, else <code>undefined</code>.
		 ]]></return>
</method>
<method name='iterator' fullname='org.as3commons.collections:SortedMap/iterator' isStatic='false' isFinal='false' isOverride='true'  param_names='cursor' param_types='*' param_defaults='unknown' result_type='org.as3commons.collections.framework:IIterator'>
<description><![CDATA[
		 
		 Returns an iterator over the iterable data structure.
		 
		 <p>The <code>cursor</code> parameter is optional and not considered by all iterable
		 data structures. E.g. the iterator of an unordered collection such as <code>Map</code>
		 or <code>Set</code> starts always with the first item found. Still passing a parameter to
		 such a data structure does not throw an error and will simply show no effect.</p>
		 
		 <p>The type of the cursor is unspecified and depends on the particular data structure.
		 E.g. lists allow to specify an index, sets to specify an item and maps to specify a key.</p>
		 
		 <p>If <code>cursor</code> is specified, the iterator returns the item that is related
		 to that cursor with the first call to <code>next()</code> (and its predecessor with
		 the first call to <code>previous()</code> if the iterator allows bidirectional
		 navigation.</p>
		 
		 ]]></description>
<param><![CDATA[cursor The initial cursor position.
		 ]]></param>
<return><![CDATA[An iterator.
		 ]]></return>
</method>
<method name='keyIterator' fullname='org.as3commons.collections:SortedMap/keyIterator' isStatic='false' isFinal='false' isOverride='false'  result_type='org.as3commons.collections.framework:IIterator'>
<description><![CDATA[
		 
		 Returns an iterator over the keys of the map.
		 
		 <p>The order of keys returned by the iterator is the same as in the particular collection.</p>
		 
		 ]]></description>
<return><![CDATA[An iterator over the map keys.
		 ]]></return>
</method>
<method name='keysToArray' fullname='org.as3commons.collections:SortedMap/keysToArray' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[
		 
		 Returns an array of all keys in the order of the particular map.
		 
		 <p>The order of keys in the array is the same as in the particular collection.</p>
		 
		 ]]></description>
<return><![CDATA[An array of the keys of the map.
		 ]]></return>
</method>
<method name='lesserKey' fullname='org.as3commons.collections:SortedMap/lesserKey' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 
		 Returns the key of the last item that is lesser than the given item.
		 
		 ]]></description>
<param><![CDATA[item The item to test.
		 ]]></param>
<return><![CDATA[The key of the last lesser item or <code>undefined</code> if there is no lesser item.
		 ]]></return>
</method>
<method name='nextKey' fullname='org.as3commons.collections:SortedMap/nextKey' isStatic='false' isFinal='false' isOverride='false'  param_names='key' param_types='*' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 
		 Returns the key of the successor of the item mapped to the given key.
		 
		 <p>If the key is not contained, the method returns <code>undefined</code>.</p>
		 
		 ]]></description>
<param><![CDATA[item The key of item to get its successing key.
		 ]]></param>
<return><![CDATA[The key of the predecessor or <code>undefined</code>.
		 ]]></return>
</method>
<method name='previousKey' fullname='org.as3commons.collections:SortedMap/previousKey' isStatic='false' isFinal='false' isOverride='false'  param_names='key' param_types='*' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 
		 Returns the key of the predecessor of the item mapped to the given key.
		 
		 <p>If the key is not contained, the method returns <code>undefined</code>.</p>
		 
		 ]]></description>
<param><![CDATA[item The key of item to get its predecessing key.
		 ]]></param>
<return><![CDATA[The key of the predecessor or <code>undefined</code>.
		 ]]></return>
</method>
<method name='removeKey' fullname='org.as3commons.collections:SortedMap/removeKey' isStatic='false' isFinal='false' isOverride='false'  param_names='key' param_types='*' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 
		 Removes the given key and its associated item from the map.
		 
		 <p>If the key is not contained the method abords with <code>undefined</code>.</p>
		 ]]></description>
<param><![CDATA[key The key.
		 ]]></param>
<return><![CDATA[The item associated with the removed key or <code>undefined</code> if the key is not contained.
		 ]]></return>
</method>
<method name='removeNode' fullname='org.as3commons.collections:SortedMap/protected:removeNode' isStatic='false' isFinal='false' isOverride='true'  param_names='node' param_types='org.as3commons.collections.framework.core:SortedNode' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 
		 Removes a node from the tree.
		 
		 <p>The method rotates the given node downwards until it becomes a leaf node
		 and gets removed from the tree.</p>
		 
		 ]]></description>
<param><![CDATA[node The node to remove.
		 ]]></param>
</method>
<method name='replaceFor' fullname='org.as3commons.collections:SortedMap/replaceFor' isStatic='false' isFinal='false' isOverride='false'  param_names='key;item' param_types='*;*' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[
		 
		 Replaces the item associated with the given key.
		 
		 <p>If the key is not contained or the given item equals the item
		 stored with the given key, the method abords with <code>false</code>.</p>
		 
		 ]]></description>
<param><![CDATA[key The key.
		 ]]></param>
<param><![CDATA[item The replacing item.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item has been replaced.
		 ]]></return>
</method>
<method name='firstKey' fullname='org.as3commons.collections:SortedMap/firstKey/get' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 
		 Returns the key of the first item, if any.
		 
		 <p>If the key is not contained, the method returns <code>undefined</code>.</p>
		 
		 ]]></description>
<return><![CDATA[The key of the first item or <code>undefined</code>.
		 ]]></return>
</method>
<method name='lastKey' fullname='org.as3commons.collections:SortedMap/lastKey/get' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 
		 Returns the key of the last item, if any.
		 
		 <p>If the key is not contained, the method returns <code>undefined</code>.</p>
		 
		 ]]></description>
<return><![CDATA[The key of the last item or <code>undefined</code>.
		 ]]></return>
</method>
<field name='_items' fullname='org.as3commons.collections:SortedMap/protected:_items' type='flash.utils:Dictionary' isStatic='false' isConst='false' >
<description><![CDATA[
		 The items of the non string keys.
		 ]]></description>
</field>
<field name='_keys' fullname='org.as3commons.collections:SortedMap/protected:_keys' type='flash.utils:Dictionary' isStatic='false' isConst='false' >
<description><![CDATA[
		 The non string keys.
		 ]]></description>
</field>
<field name='_stringMap' fullname='org.as3commons.collections:SortedMap/protected:_stringMap' type='Object' isStatic='false' isConst='false' >
<description><![CDATA[
		 The stringed key item map.
		 ]]></description>
</field>
<packageRec name='org.as3commons.collections.null' fullname='org.as3commons.collections.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<classRec name='LinkedMap' fullname='org.as3commons.collections:LinkedMap' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\LinkedMap.as' namespace='org.as3commons.collections' access='public' baseclass='org.as3commons.collections.framework.core:AbstractLinkedDuplicatesCollection' interfaces='org.as3commons.collections.framework:IOrderedMap' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Insertion order implementation of a map.
	 
	 <p><strong>Description</strong></p>
	 
	 <p>The <code>LinkedMap</code> is a combination of a dictionary and a linked list.</p>
	 
	 <p><strong>Runtime of operations</strong></p>
	 
	 <ul>
	 <li>Adding, getting or removing of items - constant runtime O(1).<br />
	 <code>add(), addFirst(), addLast(), first, last, removeFirst(), removeLast()</code></li>
	 <li>Key lookup operations - constant runtime O(1).<br />
	 hasKey(), addBefore(), addAfter(), itemFor(), replaceFor(), removeKey()</code></li>
	 <li>Item lookup operations - linear runtime O(n).<br />
	 has(), count(), remove(), removeAll()</code></li>
	 </ul>
	 
	 <p><strong>Notes</strong></p>
	 
	 <p>The <code>iterator()</code> method accepts a key as the cursor parameter. If the given
	 key is not contained by the map, it will be ignored.</p>
	 
	 <p>The <code>iterator()</code> method retuns an <code>IOrderedMapIterator</code>.</p>
	 
	 <p><code>null</code> is allowed for keys as well as for values.</p>
	 
	 <p id="link_LinkedMapExample"><strong>LinkedMap example</strong></p>
	 
	 <p>This example shows the specific behaviour of a <code>LinkedMap</code>.
	 The general work with collections and iterators is more detailed illustrated
	 in the <code>Map</code> and <code>ArrayList</code> examples below.</p>
	 
	 <a class="exampleCollapsed" href="#link_LinkedMapExample" onClick="toggleExample(this, 'LinkedMapExample');">Show example</a><br /><div id="LinkedMapExample" style='display:none'><listing version="3.0">package {
    import org.as3commons.collections.LinkedMap;
    import org.as3commons.collections.framework.ICollectionIterator;
    import org.as3commons.collections.framework.IIterator;
    import org.as3commons.collections.framework.IMapIterator;
    import org.as3commons.collections.framework.IOrderedMapIterator;
    import flash.display.Sprite;

    public class LinkedMapExample extends Sprite {

        public function LinkedMapExample() {
            var map : LinkedMap = new LinkedMap();
            
            // Add
            
            map.add(4, "four");
            map.add(1, "one");
            map.add(3, "three");
            map.add(5, "five");
            map.add(2, "two");
            trace (map.keysToArray()); // 4,1,3,5,2
            trace (map.toArray()); // four,one,three,five,two
            
            map.addBefore(3, 6, "six");
            map.addAfter(5, 7, "seven");
            trace (map.keysToArray()); // 4,1,6,3,5,7,2
            trace (map.toArray()); // four,one,six,three,five,seven,two

            map.addFirst(8, "eight");
            map.addLast(9, "nine");
            trace (map.keysToArray()); // 8,4,1,6,3,5,7,2,9
            trace (map.toArray()); // eight,four,one,six,three,five,seven,two,nine

            // Inspection
            
            trace (map.first); // eight
            trace (map.last); // nine
            
            // Iterator

            var iterator : IIterator = map.iterator();
            trace (iterator is IIterator); // true
            trace (iterator is ICollectionIterator); // true
            trace (iterator is IMapIterator); // true
            trace (iterator is IOrderedMapIterator); // true
            
            while (iterator.hasNext()) {
                trace (iterator.next()); // eight,four,one,six,three,five,seven,two,nine
            }

            // Remove

            map.removeFirst();
            map.removeFirst();
            map.removeLast();
            map.removeLast();
            trace (map.keysToArray()); // 1,6,3,5,7
            trace (map.toArray()); // one,six,three,five,seven
        }
    }
}
</listing></div>
	 
	 <p id="link_MapExample"><strong>Map example</strong></p>
	 
	 <a class="exampleCollapsed" href="#link_MapExample" onClick="toggleExample(this, 'MapExample');">Show example</a><br /><div id="MapExample" style='display:none'><listing version="3.0">package {
    import org.as3commons.collections.Map;
    import org.as3commons.collections.framework.ICollectionIterator;
    import org.as3commons.collections.framework.IIterator;
    import org.as3commons.collections.framework.IMapIterator;
    import flash.display.Sprite;

    public class MapExample extends Sprite {

        public function MapExample() {
            var map : Map = new Map();
            
            // Add
            
            map.add(1, "one");
            map.add(2, "two");
            map.add(3, "three");
            map.add("4a", "four");
            map.add("4b", "four");
            map.add("4c", "four");
            
            map.add("4c", "fourC"); // no effect (key already contained)
            
            trace (map.toArray()); // four,four,four,one,two,three
            
            // Replace

            map.replaceFor(3, "three3");
            map.replaceFor("4a", "fourA");
            
            map.replaceFor(1, "one"); // no effect ("one" === "one")
            map.replaceFor(4, "four"); // no effect (key not contained)
            
            trace (map.toArray()); // fourA,four,four,one,two,three3

            // Inspection
            
            trace (map.size); // 6
            trace (map.hasKey(3)); // true
            trace (map.hasKey(4)); // false
            trace (map.itemFor(3)); // three3
            trace (map.itemFor(4)); // undefined
            trace (map.keysToArray()); // 4a,4b,4c,1,2,3

            // Iterator

            var iterator : IIterator = map.iterator();
            trace (iterator is IIterator); // true
            trace (iterator is ICollectionIterator); // true
            trace (iterator is IMapIterator); // true

            while (iterator.hasNext()) {
                trace (iterator.next()); // fourA,four,four,one,two,three3
            }

            // Map iterator

            var mi : IMapIterator = map.iterator() as IMapIterator;
            trace (mi.previousKey + " [" + mi.key + "=" + mi.current + "] " + mi.nextKey);
            while (mi.hasNext()) {
                mi.next();
                trace (mi.previousKey + " [" + mi.key + "=" + mi.current + "] " + mi.nextKey);
            }

            // undefined [undefined=undefined] 4a
            // 4a [4a=fourA] 4b
            // 4b [4b=four] 4c
            // 4c [4c=four] 1
            // 1 [1=one] 2
            // 2 [2=two] 3
            // 3 [3=three3] undefined
            
            // Remove

            map.removeKey(2);
            map.removeKey("4a");            
            map.removeKey(4); // no effect (key not contained)
            
            trace (map.toArray()); // four,four,one,three3

            map.remove("one");            
            map.remove("fourC"); // no effect (item not contained)
            
            trace (map.toArray()); // four,four,three3

            map.removeAll("four");            
            trace (map.toArray()); // three3
        }
    }
}
</listing></div>
	 
	 <p id="link_ArrayListExample"><strong>ArrayList example</strong></p>
	 
	 <a class="exampleCollapsed" href="#link_ArrayListExample" onClick="toggleExample(this, 'ArrayListExample');">Show example</a><br /><div id="ArrayListExample" style='display:none'><listing version="3.0">package {
    import org.as3commons.collections.ArrayList;
    import org.as3commons.collections.framework.ICollectionIterator;
    import org.as3commons.collections.framework.IIterator;
    import org.as3commons.collections.framework.IListIterator;
    import org.as3commons.collections.framework.IOrderedListIterator;
    import org.as3commons.collections.utils.StringComparator;
    import flash.display.Sprite;

    public class ArrayListExample extends Sprite {

        public function ArrayListExample() {
            var list : ArrayList = new ArrayList();
            
            // Add

            list.add("a");
            list.add("b");
            list.addAllAt(1, ["c", "d"]);
            trace (list.toArray()); // a,c,d,b

            list.addFirst("e");
            list.addLast("a");
            list.addAt(3, "a");
            trace (list.toArray()); // e,a,c,a,d,b,a
            
            // Replace

            list.replaceAt(2, "a");
            list.replaceAt(3, "f");
            trace (list.toArray()); // e,a,a,f,d,b,a

            // Inspection

            trace (list.size); // 7
            trace (list.has("b")); // true
            trace (list.itemAt(3)); // f
            trace (list.firstIndexOf("a")); // 1
            trace (list.lastIndexOf("a")); // 6
            trace (list.count("a")); // 3
            
            // Reorder

            list.reverse();
            trace (list.toArray()); // a,b,d,f,a,a,e

            list.sort(new StringComparator());
            trace (list.toArray()); // a,a,a,b,d,e,f
            
            // Iterator

            var iterator : IIterator = list.iterator();
            trace (iterator is IIterator); // true
            trace (iterator is ICollectionIterator); // true
            trace (iterator is IListIterator); // true
            trace (iterator is IOrderedListIterator); // true

            while (iterator.hasNext()) {
                trace (iterator.next()); // a,a,a,b,d,e,f
            }

            // List iterator

            var listIterator : IListIterator = list.iterator() as IListIterator;
            while (listIterator.hasNext()) {
                listIterator.next();
                trace (listIterator.index + "=" + listIterator.current);
            }

            // 0=a
            // 1=a
            // 2=a
            // 3=b
            // 4=d
            // 5=e
            // 6=f

            // Remove

            list.remove("a");
            trace (list.toArray()); // a,a,b,d,e,f

            list.removeAll("a");
            trace (list.toArray()); // b,d,e,f

            list.removeAt(1);
            list.removeFirst();
            list.removeLast();
            trace (list.toArray()); // e

            list.clear();
            trace (list.toArray()); // []
        }
    }
}
</listing></div>
	 
	 <p id="link_ArrayListIteratorExample"><strong>ArrayListIterator example</strong></p>
	 
	 <a class="exampleCollapsed" href="#link_ArrayListIteratorExample" onClick="toggleExample(this, 'ArrayListIteratorExample');">Show example</a><br /><div id="ArrayListIteratorExample" style='display:none'><listing version="3.0">package {
    import org.as3commons.collections.ArrayList;
    import org.as3commons.collections.framework.IOrderedListIterator;
    import flash.display.Sprite;

    public class ArrayListIteratorExample extends Sprite {

        public function ArrayListIteratorExample() {
            var list : ArrayList = new ArrayList();
            var iterator : IOrderedListIterator;
            var item : 
            
            // ^ = cursor, [n] = current
            
            // Navigation
            
            list.array = [1, 2, 3];
            iterator = list.iterator() as IOrderedListIterator;
            
                                      //  ^  1  2  3
            iterator.next();          // [1] ^  2  3
            iterator.next();          //  1 [2] ^  3
            iterator.next();          //  1  2 [3] ^
            iterator.next();          //  1  2  3  ^
            iterator.previous();      //  1  2  ^ [3]
            iterator.previous();      //  1  ^ [2] 3
            iterator.previous();      //  ^ [1] 2  3
            iterator.previous();      //  ^  1  2  3

            iterator.next();          // [1] ^  2  3
            iterator.next();          //  1 [2] ^  3
            iterator.start();         //  ^  1  2  3

            iterator.next();          // [1] ^  2  3
            iterator.next();          //  1 [2] ^  3
            iterator.end();           //  1  2  3  ^
            
            // Current and index

            iterator = list.iterator() as IOrderedListIterator;
            
            with (iterator) {
                trace (index, current, previousIndex, nextIndex);
                // -1 undefined -1 0

                next();
                trace (index, current, previousIndex, nextIndex);
                // 0 1 0 1

                next();
                trace (index, current, previousIndex, nextIndex);
                // 1 2 1 2

                next();
                trace (index, current, previousIndex, nextIndex);
                // 2 3 2 -1

                next();
                trace (index, current, previousIndex, nextIndex);
                // -1 undefined 2 -1
            }
            
            // Start position
            
            iterator = list.iterator() as IOrderedListIterator;   //  ^  1  2  3
            iterator = list.iterator(1) as IOrderedListIterator;  //  1  ^  2  3
            iterator = list.iterator(2) as IOrderedListIterator;  //  1  2  ^  3
            iterator = list.iterator(10) as IOrderedListIterator; //  1  2  3  ^

            // Replace

            iterator = list.iterator() as IOrderedListIterator;

                                      //  ^  1  2  3
            iterator.next();          // [1] ^  2  3
            iterator.next();          //  1 [2] ^  3
            iterator.replace(4);      //  1 [4] ^  3
            iterator.next();          //  1  4 [3] ^
            iterator.replace(5);      //  1  4 [5] ^
            iterator.next();          //  1  4  5  ^
            iterator.replace(6);      //  1  4  5  ^

            // Remove

            list.array = [1, 2, 3];
            iterator = list.iterator() as IOrderedListIterator;
            
                                      //  ^  1  2  3
            iterator.next();          // [1] ^  2  3
            iterator.next();          //  1 [2] ^  3
            iterator.remove();        //  1  ^  3
            iterator.next();          //  1 [3] ^
            iterator.remove();        //  1  ^
            iterator.remove();        //  1  ^

            // Add

            list.array = [1, 2, 3];
            iterator = list.iterator() as IOrderedListIterator;
            
                                      //  ^  1  2  3
            iterator.addAfter(4);     //  ^  4  1  2  3
            iterator.addBefore(5);    //  5  ^  4  1  2  3

            iterator.next();          //  5 [4] ^  1  2  3
            iterator.next();          //  5  4 [1] ^  2  3
            iterator.addBefore(6);    //  5  4  1  6  ^  2  3
            iterator.addAfter(7);     //  5  4  1  6  ^  7  2  3

            iterator.next();          //  5  4  1  6 [7] ^  2  3
            iterator.next();          //  5  4  1  6  7 [2] ^  3
            iterator.next();          //  5  4  1  6  7  2 [3] ^
            iterator.addBefore(8);    //  5  4  1  6  7  2  3  8  ^
            iterator.addAfter(9);     //  5  4  1  6  7  2  3  8  ^  9
            
            // Add during iteration

            list.array = [1, 2, 3];
            iterator = list.iterator() as IOrderedListIterator;
            while (iterator.hasNext()) {
                item = iterator.next();
                trace (item); // 1,2,5,3,7

                if (item == 1) iterator.addBefore(4);   //  1  4  ^  2  3
                if (item == 2) iterator.addAfter(5);    //  1  4  2  ^  5  3
                if (item == 5) iterator.addBefore(6);   //  1  4  2  5  6  ^  3
                if (item == 3) iterator.addAfter(7);    //  1  4  2  5  6  3  ^  7
            }
            trace (list.toArray()); // 1,4,2,5,6,3,7

            // Replace during iteration

            list.array = [1, 2, 3];
            iterator = list.iterator() as IOrderedListIterator;
            while (iterator.hasNext()) {
                item = iterator.next();
                trace (item); // 1,2,3

                if (item == 1) iterator.replace(4);   // [4] ^  2  3
                if (item == 2) iterator.replace(5);   //  4 [5] ^  3
                if (item == 3) iterator.replace(6);   //  4  5 [6] ^
            }
            trace (list.toArray()); // 4,5,6

            // Remove during iteration

            list.array = [1, 2, 3, 4, 5];
            iterator = list.iterator() as IOrderedListIterator;
            while (iterator.hasNext()) {
                item = iterator.next();
                trace (item); // 1,2,3,4,5

                if (item == 1) iterator.remove();   //  ^  2  3  4  5
                if (item == 3) iterator.remove();   //  2  ^  4  5
                if (item == 5) iterator.remove();   //  2  4  ^
            }
            trace (list.toArray()); // 2,4

            // Reverse iteration

            list.array = [1, 2, 3, 4, 5];
            iterator = list.iterator() as IOrderedListIterator;
            iterator.end();
            while (iterator.hasPrevious()) {
                trace (iterator.previous()); // 5,4,3,2,1
            }
        }
    }
}
</listing></div>
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 25.03.2010
	 ]]></author>
<see><![CDATA[org.as3commons.collections.framework.IOrderedMap IOrderedMap interface - Detailed description of the ordered map features.
	 ]]></see>
<see><![CDATA[org.as3commons.collections.framework.IOrderedMapIterator IOrderedMapIterator interface - Detailed description of the ordered map iterator features.
	 ]]></see>
<see><![CDATA[org.as3commons.collections.framework.IMap IMap interface - Detailed description of the base map features.
	 ]]></see>
</classRec>
<method name='LinkedMap' fullname='org.as3commons.collections:LinkedMap/LinkedMap' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 LinkedMap constructor.
		 ]]></description>
</method>
<method name='addAfter' fullname='org.as3commons.collections:LinkedMap/addAfter' isStatic='false' isFinal='false' isOverride='false'  param_names='previousKey;key;item' param_types='*;*;*' param_defaults='undefined;undefined;undefined' result_type='Boolean'>
<description><![CDATA[
		 
		 Adds an item after an existing one.
		 
		 <p>If the key is already contained, the method aborts with <code>false</code>.</p>
		 
		 ]]></description>
<param><![CDATA[previousKey The key of the item to add after.
		 ]]></param>
<param><![CDATA[item The item to add.
		 ]]></param>
<param><![CDATA[key The key of the item to add.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item has been added.
		 ]]></return>
</method>
<method name='addBefore' fullname='org.as3commons.collections:LinkedMap/addBefore' isStatic='false' isFinal='false' isOverride='false'  param_names='nextKey;key;item' param_types='*;*;*' param_defaults='undefined;undefined;undefined' result_type='Boolean'>
<description><![CDATA[
		 
		 Adds an item before an existing one.
		 
		 <p>If the key is already contained, the method aborts with <code>false</code>.</p>
		 
		 ]]></description>
<param><![CDATA[nextKey The key of the item to add before.
		 ]]></param>
<param><![CDATA[item The item to add.
		 ]]></param>
<param><![CDATA[key The key of the item to add.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item has been added.
		 ]]></return>
</method>
<method name='addFirst' fullname='org.as3commons.collections:LinkedMap/addFirst' isStatic='false' isFinal='false' isOverride='false'  param_names='key;item' param_types='*;*' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[
		 
		 Adds an item in front of the map.
		 
		 <p>If the key is already contained, the method aborts with <code>false</code>.</p>
		 
		 ]]></description>
<param><![CDATA[item The item to add.
		 ]]></param>
<param><![CDATA[key The key of the item to add.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item has been added.
		 ]]></return>
</method>
<method name='addLast' fullname='org.as3commons.collections:LinkedMap/addLast' isStatic='false' isFinal='false' isOverride='false'  param_names='key;item' param_types='*;*' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[
		 
		 Adds an item at the end of the map.
		 
		 <p>If the key is already contained, the method aborts with <code>false</code>.</p>
		 
		 ]]></description>
<param><![CDATA[item The item to add.
		 ]]></param>
<param><![CDATA[key The key of the item to add.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item has been added.
		 ]]></return>
</method>
<method name='add_private' fullname='org.as3commons.collections:LinkedMap/private:add_private' isStatic='false' isFinal='false' isOverride='false'  param_names='key;item' param_types='*;*' param_defaults='undefined;undefined' result_type='org.as3commons.collections.framework.core:LinkedMapNode'>
<description><![CDATA[
		 Adds the given item to the internal map.
		 ]]></description>
</method>
<method name='add' fullname='org.as3commons.collections:LinkedMap/add' isStatic='false' isFinal='false' isOverride='false'  param_names='key;item' param_types='*;*' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[
		 
		 Adds an item to the map.
		 
		 <p>If the map already contains the given key, the method abords with <code>false</code>.</p>
		 
		 <p>The <code>LinkedMap</code> appends the item.</p>
		 
		 <p>The position of items that are added to a <code>SortedMap</code>
		 depends on its sort order.</p>
		 
		 ]]></description>
<param><![CDATA[key The key of the item to add.
		 ]]></param>
<param><![CDATA[item The item to add.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item has been added.
		 ]]></return>
</method>
<method name='clear' fullname='org.as3commons.collections:LinkedMap/clear' isStatic='false' isFinal='false' isOverride='true'  result_type='Boolean'>
<description><![CDATA[
		 
		 Removes all items from the collection.
		 
		 <p>If the collection is already empty, the method aborts with <code>false</code>.</p>
		 
		 ]]></description>
<return><![CDATA[<code>true</code> if items have been removed.
		 ]]></return>
</method>
<method name='getNode' fullname='org.as3commons.collections:LinkedMap/protected:getNode' isStatic='false' isFinal='false' isOverride='false'  param_names='key' param_types='*' param_defaults='undefined' result_type='org.as3commons.collections.framework.core:LinkedMapNode'>
<description><![CDATA[
		 Returns the node of the given key.
		 
		 ]]></description>
<param><![CDATA[key The key to get the node for.
		 ]]></param>
<return><![CDATA[The node or <code>null</code> if the key is not contained.
		 ]]></return>
</method>
<method name='hasKey' fullname='org.as3commons.collections:LinkedMap/hasKey' isStatic='false' isFinal='false' isOverride='false'  param_names='key' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 
		 Returns <code>true</code> if the map contains the given key.
		 
		 ]]></description>
<param><![CDATA[key The key to test.
		 ]]></param>
<return><![CDATA[<code>true</code> if the key is contained.
		 ]]></return>
</method>
<method name='itemFor' fullname='org.as3commons.collections:LinkedMap/itemFor' isStatic='false' isFinal='false' isOverride='false'  param_names='key' param_types='*' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 
		 Returns the item associated with the given key.
		 
		 ]]></description>
<param><![CDATA[key The key.
		 ]]></param>
<return><![CDATA[The item if the key is contained, else <code>undefined</code>.
		 ]]></return>
</method>
<method name='iterator' fullname='org.as3commons.collections:LinkedMap/iterator' isStatic='false' isFinal='false' isOverride='true'  param_names='cursor' param_types='*' param_defaults='unknown' result_type='org.as3commons.collections.framework:IIterator'>
<description><![CDATA[
		 
		 Returns an iterator over the iterable data structure.
		 
		 <p>The <code>cursor</code> parameter is optional and not considered by all iterable
		 data structures. E.g. the iterator of an unordered collection such as <code>Map</code>
		 or <code>Set</code> starts always with the first item found. Still passing a parameter to
		 such a data structure does not throw an error and will simply show no effect.</p>
		 
		 <p>The type of the cursor is unspecified and depends on the particular data structure.
		 E.g. lists allow to specify an index, sets to specify an item and maps to specify a key.</p>
		 
		 <p>If <code>cursor</code> is specified, the iterator returns the item that is related
		 to that cursor with the first call to <code>next()</code> (and its predecessor with
		 the first call to <code>previous()</code> if the iterator allows bidirectional
		 navigation.</p>
		 
		 ]]></description>
<param><![CDATA[cursor The initial cursor position.
		 ]]></param>
<return><![CDATA[An iterator.
		 ]]></return>
</method>
<method name='keyIterator' fullname='org.as3commons.collections:LinkedMap/keyIterator' isStatic='false' isFinal='false' isOverride='false'  result_type='org.as3commons.collections.framework:IIterator'>
<description><![CDATA[
		 
		 Returns an iterator over the keys of the map.
		 
		 <p>The order of keys returned by the iterator is the same as in the particular collection.</p>
		 
		 ]]></description>
<return><![CDATA[An iterator over the map keys.
		 ]]></return>
</method>
<method name='keysToArray' fullname='org.as3commons.collections:LinkedMap/keysToArray' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[
		 
		 Returns an array of all keys in the order of the particular map.
		 
		 <p>The order of keys in the array is the same as in the particular collection.</p>
		 
		 ]]></description>
<return><![CDATA[An array of the keys of the map.
		 ]]></return>
</method>
<method name='nextKey' fullname='org.as3commons.collections:LinkedMap/nextKey' isStatic='false' isFinal='false' isOverride='false'  param_names='key' param_types='*' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 
		 Returns the key of the successor of the item mapped to the given key.
		 
		 <p>If the key is not contained, the method returns <code>undefined</code>.</p>
		 
		 ]]></description>
<param><![CDATA[item The key of item to get its successing key.
		 ]]></param>
<return><![CDATA[The key of the predecessor or <code>undefined</code>.
		 ]]></return>
</method>
<method name='previousKey' fullname='org.as3commons.collections:LinkedMap/previousKey' isStatic='false' isFinal='false' isOverride='false'  param_names='key' param_types='*' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 
		 Returns the key of the predecessor of the item mapped to the given key.
		 
		 <p>If the key is not contained, the method returns <code>undefined</code>.</p>
		 
		 ]]></description>
<param><![CDATA[item The key of item to get its predecessing key.
		 ]]></param>
<return><![CDATA[The key of the predecessor or <code>undefined</code>.
		 ]]></return>
</method>
<method name='removeFirst' fullname='org.as3commons.collections:LinkedMap/removeFirst' isStatic='false' isFinal='false' isOverride='true'  result_type='*'>
<description><![CDATA[
		 
		 Removes the first item of the ordered collection.
		 
		 ]]></description>
<return><![CDATA[The formerly first item or <code>undefined</code> if the collection is empty.
		 ]]></return>
</method>
<method name='removeKey_private' fullname='org.as3commons.collections:LinkedMap/private:removeKey_private' isStatic='false' isFinal='false' isOverride='false'  param_names='key' param_types='*' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Removes the given key from the internal map.
		 ]]></description>
</method>
<method name='removeKey' fullname='org.as3commons.collections:LinkedMap/removeKey' isStatic='false' isFinal='false' isOverride='false'  param_names='key' param_types='*' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 
		 Removes the given key and its associated item from the map.
		 
		 <p>If the key is not contained the method abords with <code>undefined</code>.</p>
		 ]]></description>
<param><![CDATA[key The key.
		 ]]></param>
<return><![CDATA[The item associated with the removed key or <code>undefined</code> if the key is not contained.
		 ]]></return>
</method>
<method name='removeLast' fullname='org.as3commons.collections:LinkedMap/removeLast' isStatic='false' isFinal='false' isOverride='true'  result_type='*'>
<description><![CDATA[
		 
		 Removes the last item of the ordered collection.
		 
		 ]]></description>
<return><![CDATA[The formerly last item or <code>undefined</code> if the collection is empty.
		 ]]></return>
</method>
<method name='removeNode' fullname='org.as3commons.collections:LinkedMap/protected:removeNode' isStatic='false' isFinal='false' isOverride='true'  param_names='node' param_types='org.as3commons.collections.framework.core:LinkedNode' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 
		 Unlinks a node and connects predecessor with successor.
		 
		 ]]></description>
<param><![CDATA[node The node to remove
		 ]]></param>
</method>
<method name='replaceFor' fullname='org.as3commons.collections:LinkedMap/replaceFor' isStatic='false' isFinal='false' isOverride='false'  param_names='key;item' param_types='*;*' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[
		 
		 Replaces the item associated with the given key.
		 
		 <p>If the key is not contained or the given item equals the item
		 stored with the given key, the method abords with <code>false</code>.</p>
		 
		 ]]></description>
<param><![CDATA[key The key.
		 ]]></param>
<param><![CDATA[item The replacing item.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item has been replaced.
		 ]]></return>
</method>
<method name='firstKey' fullname='org.as3commons.collections:LinkedMap/firstKey/get' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 
		 Returns the key of the first item, if any.
		 
		 <p>If the key is not contained, the method returns <code>undefined</code>.</p>
		 
		 ]]></description>
<return><![CDATA[The key of the first item or <code>undefined</code>.
		 ]]></return>
</method>
<method name='lastKey' fullname='org.as3commons.collections:LinkedMap/lastKey/get' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 
		 Returns the key of the last item, if any.
		 
		 <p>If the key is not contained, the method returns <code>undefined</code>.</p>
		 
		 ]]></description>
<return><![CDATA[The key of the last item or <code>undefined</code>.
		 ]]></return>
</method>
<field name='_items' fullname='org.as3commons.collections:LinkedMap/protected:_items' type='flash.utils:Dictionary' isStatic='false' isConst='false' >
<description><![CDATA[
		 The items of the non string keys.
		 ]]></description>
</field>
<field name='_keys' fullname='org.as3commons.collections:LinkedMap/protected:_keys' type='flash.utils:Dictionary' isStatic='false' isConst='false' >
<description><![CDATA[
		 The non string keys.
		 ]]></description>
</field>
<field name='_stringMap' fullname='org.as3commons.collections:LinkedMap/protected:_stringMap' type='Object' isStatic='false' isConst='false' >
<description><![CDATA[
		 The stringed key item map.
		 ]]></description>
</field>
<packageRec name='org.as3commons.collections.null' fullname='org.as3commons.collections.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<classRec name='LinkedList' fullname='org.as3commons.collections:LinkedList' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\LinkedList.as' namespace='org.as3commons.collections' access='public' baseclass='org.as3commons.collections.framework.core:AbstractLinkedDuplicatesCollection' interfaces='org.as3commons.collections.framework:ILinkedList' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Linked list data structure implementation.
	 
	 <p><strong>Description</strong></p>
	 
	 <p>The <code>LinkedList</code> is a collection made up of mutually linking nodes
	 where each node holds a reference to the actual item added.</p>
	 
	 <p><strong>Runtime of operations</strong></p>
	 
	 <ul>
	 <li>Adding, getting or removing of items - constant runtime O(1).<br />
	 <code>add(), addFirst(), addLast(), first, last, removeFirst(), removeLast()</code></li>
	 <li>Item lookup operations - linear runtime O(n).<br />
	 has(), count(), remove(), removeAll()</code></li>
	 </ul>
	 
	 <p><strong>Notes</strong></p>
	 
	 <p>The <code>iterator()</code> method does not support (ignores) the cursor parameter.</p>
	 
	 <p>The <code>iterator()</code> method retuns an <code>ILinkedListIterator</code>.</p>
	 
	 <p><code>null</code> is allowed.</p>
	 
	 <p id="link_LinkedListExample"><strong>LinkedList example</strong></p>
	 
	 <p>This example shows the specific behaviour of a <code>LinkedList</code>.
	 The general work with collections and iterators is more detailed illustrated
	 in the <code>ArrayList</code> examples below.</p>
	 
	 <a class="exampleCollapsed" href="#link_LinkedListExample" onClick="toggleExample(this, 'LinkedListExample');">Show example</a><br /><div id="LinkedListExample" style='display:none'><listing version="3.0">package {
    import org.as3commons.collections.LinkedList;
    import org.as3commons.collections.framework.ICollectionIterator;
    import org.as3commons.collections.framework.IIterator;
    import org.as3commons.collections.framework.ILinkedList;
    import org.as3commons.collections.framework.ILinkedListIterator;
    import flash.display.Sprite;

    public class LinkedListExample extends Sprite {

        public function LinkedListExample() {
            var list : ILinkedList = new LinkedList();
            
            // Add
            
            list.add(4);
            list.add(1);
            list.add(3);
            list.add(5);
            list.add(2);
            trace (list.toArray()); // 4,1,3,5,2
            
            list.addFirst(6);
            list.addLast(7);
            trace (list.toArray()); // 6,4,1,3,5,2,7

            // Inspection
            
            trace (list.first); // 6
            trace (list.last); // 7
            
            // Iterator

            var iterator : IIterator = list.iterator();
            trace (iterator is IIterator); // true
            trace (iterator is ICollectionIterator); // true
            trace (iterator is ILinkedListIterator); // true
            
            while (iterator.hasNext()) {
                trace (iterator.next()); // 6,4,1,3,5,2,7
            }

            // Linked list iterator

            var lli : ILinkedListIterator = list.iterator() as ILinkedListIterator;
            trace (lli.previousItem + " [" + lli.current + "] " + lli.nextItem);
            while (lli.hasNext()) {
                lli.next();
                trace (lli.previousItem + " [" + lli.current + "] " + lli.nextItem);
            }

            // undefined [undefined] 6
            // 6 [6] 4
            // 4 [4] 1
            // 1 [1] 3
            // 3 [3] 5
            // 5 [5] 2
            // 2 [2] 7
            // 7 [7] undefined

            // Remove

            list.removeFirst();
            list.removeFirst();
            list.removeLast();
            list.removeLast();
            trace (list.toArray()); // 1,3,5
        }
    }
}
</listing></div>
	 
	 <p id="link_ArrayListExample"><strong>ArrayList example</strong></p>
	 
	 <a class="exampleCollapsed" href="#link_ArrayListExample" onClick="toggleExample(this, 'ArrayListExample');">Show example</a><br /><div id="ArrayListExample" style='display:none'><listing version="3.0">package {
    import org.as3commons.collections.ArrayList;
    import org.as3commons.collections.framework.ICollectionIterator;
    import org.as3commons.collections.framework.IIterator;
    import org.as3commons.collections.framework.IListIterator;
    import org.as3commons.collections.framework.IOrderedListIterator;
    import org.as3commons.collections.utils.StringComparator;
    import flash.display.Sprite;

    public class ArrayListExample extends Sprite {

        public function ArrayListExample() {
            var list : ArrayList = new ArrayList();
            
            // Add

            list.add("a");
            list.add("b");
            list.addAllAt(1, ["c", "d"]);
            trace (list.toArray()); // a,c,d,b

            list.addFirst("e");
            list.addLast("a");
            list.addAt(3, "a");
            trace (list.toArray()); // e,a,c,a,d,b,a
            
            // Replace

            list.replaceAt(2, "a");
            list.replaceAt(3, "f");
            trace (list.toArray()); // e,a,a,f,d,b,a

            // Inspection

            trace (list.size); // 7
            trace (list.has("b")); // true
            trace (list.itemAt(3)); // f
            trace (list.firstIndexOf("a")); // 1
            trace (list.lastIndexOf("a")); // 6
            trace (list.count("a")); // 3
            
            // Reorder

            list.reverse();
            trace (list.toArray()); // a,b,d,f,a,a,e

            list.sort(new StringComparator());
            trace (list.toArray()); // a,a,a,b,d,e,f
            
            // Iterator

            var iterator : IIterator = list.iterator();
            trace (iterator is IIterator); // true
            trace (iterator is ICollectionIterator); // true
            trace (iterator is IListIterator); // true
            trace (iterator is IOrderedListIterator); // true

            while (iterator.hasNext()) {
                trace (iterator.next()); // a,a,a,b,d,e,f
            }

            // List iterator

            var listIterator : IListIterator = list.iterator() as IListIterator;
            while (listIterator.hasNext()) {
                listIterator.next();
                trace (listIterator.index + "=" + listIterator.current);
            }

            // 0=a
            // 1=a
            // 2=a
            // 3=b
            // 4=d
            // 5=e
            // 6=f

            // Remove

            list.remove("a");
            trace (list.toArray()); // a,a,b,d,e,f

            list.removeAll("a");
            trace (list.toArray()); // b,d,e,f

            list.removeAt(1);
            list.removeFirst();
            list.removeLast();
            trace (list.toArray()); // e

            list.clear();
            trace (list.toArray()); // []
        }
    }
}
</listing></div>
	 
	 <p id="link_ArrayListIteratorExample"><strong>ArrayListIterator example</strong></p>
	 
	 <a class="exampleCollapsed" href="#link_ArrayListIteratorExample" onClick="toggleExample(this, 'ArrayListIteratorExample');">Show example</a><br /><div id="ArrayListIteratorExample" style='display:none'><listing version="3.0">package {
    import org.as3commons.collections.ArrayList;
    import org.as3commons.collections.framework.IOrderedListIterator;
    import flash.display.Sprite;

    public class ArrayListIteratorExample extends Sprite {

        public function ArrayListIteratorExample() {
            var list : ArrayList = new ArrayList();
            var iterator : IOrderedListIterator;
            var item : 
            
            // ^ = cursor, [n] = current
            
            // Navigation
            
            list.array = [1, 2, 3];
            iterator = list.iterator() as IOrderedListIterator;
            
                                      //  ^  1  2  3
            iterator.next();          // [1] ^  2  3
            iterator.next();          //  1 [2] ^  3
            iterator.next();          //  1  2 [3] ^
            iterator.next();          //  1  2  3  ^
            iterator.previous();      //  1  2  ^ [3]
            iterator.previous();      //  1  ^ [2] 3
            iterator.previous();      //  ^ [1] 2  3
            iterator.previous();      //  ^  1  2  3

            iterator.next();          // [1] ^  2  3
            iterator.next();          //  1 [2] ^  3
            iterator.start();         //  ^  1  2  3

            iterator.next();          // [1] ^  2  3
            iterator.next();          //  1 [2] ^  3
            iterator.end();           //  1  2  3  ^
            
            // Current and index

            iterator = list.iterator() as IOrderedListIterator;
            
            with (iterator) {
                trace (index, current, previousIndex, nextIndex);
                // -1 undefined -1 0

                next();
                trace (index, current, previousIndex, nextIndex);
                // 0 1 0 1

                next();
                trace (index, current, previousIndex, nextIndex);
                // 1 2 1 2

                next();
                trace (index, current, previousIndex, nextIndex);
                // 2 3 2 -1

                next();
                trace (index, current, previousIndex, nextIndex);
                // -1 undefined 2 -1
            }
            
            // Start position
            
            iterator = list.iterator() as IOrderedListIterator;   //  ^  1  2  3
            iterator = list.iterator(1) as IOrderedListIterator;  //  1  ^  2  3
            iterator = list.iterator(2) as IOrderedListIterator;  //  1  2  ^  3
            iterator = list.iterator(10) as IOrderedListIterator; //  1  2  3  ^

            // Replace

            iterator = list.iterator() as IOrderedListIterator;

                                      //  ^  1  2  3
            iterator.next();          // [1] ^  2  3
            iterator.next();          //  1 [2] ^  3
            iterator.replace(4);      //  1 [4] ^  3
            iterator.next();          //  1  4 [3] ^
            iterator.replace(5);      //  1  4 [5] ^
            iterator.next();          //  1  4  5  ^
            iterator.replace(6);      //  1  4  5  ^

            // Remove

            list.array = [1, 2, 3];
            iterator = list.iterator() as IOrderedListIterator;
            
                                      //  ^  1  2  3
            iterator.next();          // [1] ^  2  3
            iterator.next();          //  1 [2] ^  3
            iterator.remove();        //  1  ^  3
            iterator.next();          //  1 [3] ^
            iterator.remove();        //  1  ^
            iterator.remove();        //  1  ^

            // Add

            list.array = [1, 2, 3];
            iterator = list.iterator() as IOrderedListIterator;
            
                                      //  ^  1  2  3
            iterator.addAfter(4);     //  ^  4  1  2  3
            iterator.addBefore(5);    //  5  ^  4  1  2  3

            iterator.next();          //  5 [4] ^  1  2  3
            iterator.next();          //  5  4 [1] ^  2  3
            iterator.addBefore(6);    //  5  4  1  6  ^  2  3
            iterator.addAfter(7);     //  5  4  1  6  ^  7  2  3

            iterator.next();          //  5  4  1  6 [7] ^  2  3
            iterator.next();          //  5  4  1  6  7 [2] ^  3
            iterator.next();          //  5  4  1  6  7  2 [3] ^
            iterator.addBefore(8);    //  5  4  1  6  7  2  3  8  ^
            iterator.addAfter(9);     //  5  4  1  6  7  2  3  8  ^  9
            
            // Add during iteration

            list.array = [1, 2, 3];
            iterator = list.iterator() as IOrderedListIterator;
            while (iterator.hasNext()) {
                item = iterator.next();
                trace (item); // 1,2,5,3,7

                if (item == 1) iterator.addBefore(4);   //  1  4  ^  2  3
                if (item == 2) iterator.addAfter(5);    //  1  4  2  ^  5  3
                if (item == 5) iterator.addBefore(6);   //  1  4  2  5  6  ^  3
                if (item == 3) iterator.addAfter(7);    //  1  4  2  5  6  3  ^  7
            }
            trace (list.toArray()); // 1,4,2,5,6,3,7

            // Replace during iteration

            list.array = [1, 2, 3];
            iterator = list.iterator() as IOrderedListIterator;
            while (iterator.hasNext()) {
                item = iterator.next();
                trace (item); // 1,2,3

                if (item == 1) iterator.replace(4);   // [4] ^  2  3
                if (item == 2) iterator.replace(5);   //  4 [5] ^  3
                if (item == 3) iterator.replace(6);   //  4  5 [6] ^
            }
            trace (list.toArray()); // 4,5,6

            // Remove during iteration

            list.array = [1, 2, 3, 4, 5];
            iterator = list.iterator() as IOrderedListIterator;
            while (iterator.hasNext()) {
                item = iterator.next();
                trace (item); // 1,2,3,4,5

                if (item == 1) iterator.remove();   //  ^  2  3  4  5
                if (item == 3) iterator.remove();   //  2  ^  4  5
                if (item == 5) iterator.remove();   //  2  4  ^
            }
            trace (list.toArray()); // 2,4

            // Reverse iteration

            list.array = [1, 2, 3, 4, 5];
            iterator = list.iterator() as IOrderedListIterator;
            iterator.end();
            while (iterator.hasPrevious()) {
                trace (iterator.previous()); // 5,4,3,2,1
            }
        }
    }
}
</listing></div>
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 04.03.2010
	 ]]></author>
<see><![CDATA[org.as3commons.collections.framework.ILinkedList ILinkedList interface - Detailed description of the linked list features.
	 ]]></see>
<see><![CDATA[org.as3commons.collections.framework.ILinkedListIterator ILinkedListIterator interface - Detailed description of the linked list iterator features.
	 ]]></see>
</classRec>
<method name='LinkedList' fullname='org.as3commons.collections:LinkedList/LinkedList' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 LinkedList constructor.
		 ]]></description>
</method>
<method name='addFirst' fullname='org.as3commons.collections:LinkedList/addFirst' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 
		 Adds an item in front of the list.
		 
		 ]]></description>
<param><![CDATA[item The item to add.
		 ]]></param>
</method>
<method name='addLast' fullname='org.as3commons.collections:LinkedList/addLast' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 
		 Adds an item at the end of the list.
		 
		 ]]></description>
<param><![CDATA[item The item to add.
		 ]]></param>
</method>
<method name='addNodeBefore_internal' fullname='org.as3commons.collections:LinkedList/as3commons_collections:addNodeBefore_internal' isStatic='false' isFinal='false' isOverride='false'  param_names='next;node' param_types='org.as3commons.collections.framework.core:LinkedNode;org.as3commons.collections.framework.core:LinkedNode' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		 Framework internal method to add a node before an existing one.
		 
		 ]]></description>
<param><![CDATA[next The node to add before.
		 ]]></param>
<param><![CDATA[node The node to add.
		 ]]></param>
</method>
<method name='add' fullname='org.as3commons.collections:LinkedList/add' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 
		 Adds an item at the end of the list.
		 
		 ]]></description>
<param><![CDATA[item The item to add.
		 ]]></param>
</method>
<method name='iterator' fullname='org.as3commons.collections:LinkedList/iterator' isStatic='false' isFinal='false' isOverride='true'  param_names='cursor' param_types='*' param_defaults='unknown' result_type='org.as3commons.collections.framework:IIterator'>
<description><![CDATA[
		 
		 Returns an iterator over the iterable data structure.
		 
		 <p>The <code>cursor</code> parameter is optional and not considered by all iterable
		 data structures. E.g. the iterator of an unordered collection such as <code>Map</code>
		 or <code>Set</code> starts always with the first item found. Still passing a parameter to
		 such a data structure does not throw an error and will simply show no effect.</p>
		 
		 <p>The type of the cursor is unspecified and depends on the particular data structure.
		 E.g. lists allow to specify an index, sets to specify an item and maps to specify a key.</p>
		 
		 <p>If <code>cursor</code> is specified, the iterator returns the item that is related
		 to that cursor with the first call to <code>next()</code> (and its predecessor with
		 the first call to <code>previous()</code> if the iterator allows bidirectional
		 navigation.</p>
		 
		 ]]></description>
<param><![CDATA[cursor The initial cursor position.
		 ]]></param>
<return><![CDATA[An iterator.
		 ]]></return>
</method>
<method name='removeNode_internal' fullname='org.as3commons.collections:LinkedList/as3commons_collections:removeNode_internal' isStatic='false' isFinal='false' isOverride='false'  param_names='node' param_types='org.as3commons.collections.framework.core:LinkedNode' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Framework internal method to remove a node from the list.
		 
		 ]]></description>
<param><![CDATA[node The node to remove.
		 ]]></param>
</method>
<packageRec name='org.as3commons.collections.fx.null' fullname='org.as3commons.collections.fx.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<classRec name='SortedSetFx' fullname='org.as3commons.collections.fx:SortedSetFx' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\fx\SortedSetFx.as' namespace='org.as3commons.collections.fx' access='public' baseclass='org.as3commons.collections:SortedSet' interfaces='org.as3commons.collections.framework:ICollectionFx' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Bindable version of the <code>SortedSet</code> implementation.
	 
	 <p><strong><code>SortedSetFx</code> event kinds</strong></p>
	 
	 <ul>
	 <li><code>CollectionEvent.ITEM_ADDED</code></li>
	 <li><code>CollectionEvent.ITEM_REMOVED</code></li>
	 <li><code>CollectionEvent.RESET</code></li>
	 </ul>
	 
	 <p id="link_SortedSetFxExample"><strong>SortedSetFx example</strong></p>
	 
	 <a class="exampleCollapsed" href="#link_SortedSetFxExample" onClick="toggleExample(this, 'SortedSetFxExample');">Show example</a><br /><div id="SortedSetFxExample" style='display:none'><listing version="3.0">package {
    import org.as3commons.collections.framework.ISetIterator;
    import org.as3commons.collections.fx.SortedSetFx;
    import org.as3commons.collections.fx.events.CollectionEvent;
    import org.as3commons.collections.fx.events.SetEvent;
    import org.as3commons.collections.utils.NumericComparator;
    import flash.display.Sprite;

    public class SortedSetFxExample extends Sprite {

        public function SortedSetFxExample() {
            var theSet : SortedSetFx = new SortedSetFx(new NumericComparator());
            theSet.addEventListener(CollectionEvent.COLLECTION_CHANGED, changedHandler);
            
            theSet.add(5);
            theSet.add(2);
            theSet.add(2); // no event (2 already contained)
            theSet.add(1);
            theSet.add(4);
            theSet.add(5); // no event (5 already contained)

            theSet.removeFirst();
            theSet.removeLast();
            theSet.remove(6); // no event (6 not contained)

            theSet.clear();

            // [5] added                     [5]
            // [2] added before 5            [2 5]
            // [1] added before 2            [1 2 5]
            // [4] added after 2 before 5    [1 2 4 5]
            // [1] removed before 2          [2 4 5]
            // [5] removed after 4           [2 4]
            // Reset                         []
        }
        
        private function changedHandler(e : SetEvent) : void {
            var info : String = "";
            var iterator : ISetIterator;
            
            switch (e.kind) {
                case CollectionEvent.ITEM_ADDED:
                    info += "[" + e.item + "] added";

                    iterator = e.iterator() as ISetIterator;
                    if (iterator.previousItem !== undefined) info += " after " + iterator.previousItem;
                    iterator.next();
                    if (iterator.nextItem !== undefined) info += " before " + iterator.nextItem;
                    break;

                case CollectionEvent.ITEM_REMOVED:
                    info += "[" + e.item + "] removed";

                    iterator = e.iterator() as ISetIterator;
                    if (iterator.previousItem !== undefined) info += " after " + iterator.previousItem;
                    if (iterator.nextItem !== undefined) info += " before " + iterator.nextItem;
                    break;

                case CollectionEvent.RESET:
                    info += ("Reset");
                    break;
            }
            
            for (var i : uint = info.length; i &lt; 30; i++) info += " ";
            info += "[" + e.set.toArray().join(" ") + "]";
            trace (info);
        }
    }
}
</listing></div>
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 30.03.2010
	 ]]></author>
<see><![CDATA[org.as3commons.collections.fx.events.SetEvent SetEvent - Description of the set event properties.
	 ]]></see>
<see><![CDATA[org.as3commons.collections.SortedSet SortedSet - SortedSet description and usage examples.
	 ]]></see>
</classRec>
<method name='SortedSetFx' fullname='org.as3commons.collections.fx:SortedSetFx/SortedSetFx' isStatic='false' isFinal='false' isOverride='false'  param_names='comparator' param_types='org.as3commons.collections.framework:IComparator' param_defaults='null' result_type='*'>
<description><![CDATA[
		 SortedListFx constructor.
		 ]]></description>
</method>
<method name='addEventListener' fullname='org.as3commons.collections.fx:SortedSetFx/addEventListener' isStatic='false' isFinal='false' isOverride='false'  param_names='type;listener;useCapture;priority;useWeakReference' param_types='String;Function;Boolean;int;Boolean' param_defaults='undefined;undefined;false;0;false' result_type='void'>
<description><![CDATA[
		 ]]></description>
<inheritDoc><![CDATA[]]></inheritDoc>
</method>
<method name='add' fullname='org.as3commons.collections.fx:SortedSetFx/add' isStatic='false' isFinal='false' isOverride='true'  param_names='item' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 
		 
		 Adds an item to the set.
		 
		 <p>If the set already contains the given item, the method abords with <code>false</code>.</p>
		 
		 <p>The <code>LinkedSet</code> appends the item.</p>
		 
		 <p>The position of items that are added to a <code>SortedSet</code>
		 depends on its sort order.</p>
		 
		 ]]></description>
<param><![CDATA[item The item to add.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item has been added.
		 ]]></return>
</method>
<method name='clear' fullname='org.as3commons.collections.fx:SortedSetFx/clear' isStatic='false' isFinal='false' isOverride='true'  result_type='Boolean'>
<description><![CDATA[
		 
		 Removes all items from the collection.
		 
		 <p>If the collection is already empty, the method aborts with <code>false</code>.</p>
		 
		 ]]></description>
<return><![CDATA[<code>true</code> if items have been removed.
		 ]]></return>
</method>
<method name='dispatchEvent' fullname='org.as3commons.collections.fx:SortedSetFx/dispatchEvent' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 ]]></description>
<inheritDoc><![CDATA[]]></inheritDoc>
</method>
<method name='hasEventListener' fullname='org.as3commons.collections.fx:SortedSetFx/hasEventListener' isStatic='false' isFinal='false' isOverride='false'  param_names='type' param_types='String' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 ]]></description>
<inheritDoc><![CDATA[]]></inheritDoc>
</method>
<method name='removeEventListener' fullname='org.as3commons.collections.fx:SortedSetFx/removeEventListener' isStatic='false' isFinal='false' isOverride='false'  param_names='type;listener;useCapture' param_types='String;Function;Boolean' param_defaults='undefined;undefined;false' result_type='void'>
<description><![CDATA[
		 ]]></description>
<inheritDoc><![CDATA[]]></inheritDoc>
</method>
<method name='removeNode' fullname='org.as3commons.collections.fx:SortedSetFx/protected:removeNode' isStatic='false' isFinal='false' isOverride='true'  param_names='node' param_types='org.as3commons.collections.framework.core:SortedNode' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 
		 
		 Removes a node from the tree.
		 
		 <p>The method rotates the given node downwards until it becomes a leaf node
		 and gets removed from the tree.</p>
		 
		 ]]></description>
<param><![CDATA[node The node to remove.
		 ]]></param>
</method>
<method name='willTrigger' fullname='org.as3commons.collections.fx:SortedSetFx/willTrigger' isStatic='false' isFinal='false' isOverride='false'  param_names='type' param_types='String' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 ]]></description>
<inheritDoc><![CDATA[]]></inheritDoc>
</method>
<field name='_eventDispatcher' fullname='org.as3commons.collections.fx:SortedSetFx/private:_eventDispatcher' type='flash.events:IEventDispatcher' isStatic='false' isConst='false' >
<description><![CDATA[
		 Event dispatcher.
		 ]]></description>
</field>
<packageRec name='org.as3commons.collections.fx.null' fullname='org.as3commons.collections.fx.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<classRec name='SortedListFx' fullname='org.as3commons.collections.fx:SortedListFx' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\fx\SortedListFx.as' namespace='org.as3commons.collections.fx' access='public' baseclass='org.as3commons.collections:SortedList' interfaces='org.as3commons.collections.framework:ICollectionFx' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Bindable version of the <code>SortedList</code> implementation.
	 
	 <p><strong><code>SortedListFx</code> event kinds</strong></p>
	 
	 <ul>
	 <li><code>CollectionEvent.ITEM_ADDED</code></li>
	 <li><code>CollectionEvent.ITEM_REMOVED</code></li>
	 <li><code>CollectionEvent.RESET</code></li>
	 </ul>
	 
	 <p id="link_SortedListFxExample"><strong>SortedListFx example</strong></p>
	 
	 <a class="exampleCollapsed" href="#link_SortedListFxExample" onClick="toggleExample(this, 'SortedListFxExample');">Show example</a><br /><div id="SortedListFxExample" style='display:none'><listing version="3.0">package {
    import org.as3commons.collections.fx.SortedListFx;
    import org.as3commons.collections.fx.events.CollectionEvent;
    import org.as3commons.collections.fx.events.ListEvent;
    import org.as3commons.collections.utils.NumericComparator;
    import flash.display.Sprite;

    public class SortedListFxExample extends Sprite {

        public function SortedListFxExample() {
            var list : SortedListFx = new SortedListFx(new NumericComparator());
            list.addEventListener(CollectionEvent.COLLECTION_CHANGED, changedHandler);
            
            list.array = [4, 2, 3, 1, 2, 6, 8, 4];
            list.add(5);
            list.add(2);
            list.add(2);
            list.add(1);

            list.removeFirst();
            list.removeLast();
            list.removeAt(5);
            list.removeAt(12); // no event (index &gt; list.size)
            list.removeAllAt(4, 2);

            list.remove(6);
            list.removeAll(2);
            list.removeAll(10); // no event (10 not contained)

            list.clear();

            // Reset                   [1 2 2 3 4 4 6 8]
            // [5] added at 6          [1 2 2 3 4 4 5 6 8]
            // [2] added at 3          [1 2 2 2 3 4 4 5 6 8]
            // [2] added at 4          [1 2 2 2 2 3 4 4 5 6 8]
            // [1] added at 1          [1 1 2 2 2 2 3 4 4 5 6 8]
            // [1] removed at 0        [1 2 2 2 2 3 4 4 5 6 8]
            // [8] removed at 10       [1 2 2 2 2 3 4 4 5 6]
            // [3] removed at 5        [1 2 2 2 2 4 4 5 6]
            // [2,4] removed at 4      [1 2 2 2 4 5 6]
            // [6] removed at 6        [1 2 2 2 4 5]
            // [2] removed at 1        [1 2 2 4 5]
            // [2] removed at 1        [1 2 4 5]
            // [2] removed at 1        [1 4 5]
            // Reset                   []
        }
        
        private function changedHandler(e : ListEvent) : void {
            var info : String = "";
            var items : 
            
            switch (e.kind) {
                case CollectionEvent.ITEM_ADDED:
                    items = e.numItems == 1 ? e.item : e.items;
                    info += "[" + items + "] added at " + e.index;
                    break;

                case CollectionEvent.ITEM_REMOVED:
                    items = e.numItems == 1 ? e.item : e.items;
                    info += "[" + items + "] removed at " + e.index;
                    break;

                case CollectionEvent.ITEM_REPLACED:
                    info += "[" + e.item + "] replaced at " + e.index;
                    break;

                case CollectionEvent.RESET:
                    info += ("Reset");
                    break;
            }
            
            for (var i : uint = info.length; i &lt; 24; i++) info += " ";
            info += "[" + e.list.toArray().join(" ") + "]";
            trace (info);
        }
    }
}
</listing></div>
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 22.03.2010
	 ]]></author>
<see><![CDATA[org.as3commons.collections.fx.events.ListEvent ListEvent - Description of the list event properties.
	 ]]></see>
<see><![CDATA[org.as3commons.collections.SortedList SortedList - SortedList description and usage examples.
	 ]]></see>
</classRec>
<method name='SortedListFx' fullname='org.as3commons.collections.fx:SortedListFx/SortedListFx' isStatic='false' isFinal='false' isOverride='false'  param_names='comparator' param_types='org.as3commons.collections.framework:IComparator' param_defaults='null' result_type='*'>
<description><![CDATA[
		 SortedListFx constructor.
		 
		 ]]></description>
<param><![CDATA[comparator The sort criterion.
		 ]]></param>
</method>
<method name='addEventListener' fullname='org.as3commons.collections.fx:SortedListFx/addEventListener' isStatic='false' isFinal='false' isOverride='false'  param_names='type;listener;useCapture;priority;useWeakReference' param_types='String;Function;Boolean;int;Boolean' param_defaults='undefined;undefined;false;0;false' result_type='void'>
<description><![CDATA[
		 ]]></description>
<inheritDoc><![CDATA[]]></inheritDoc>
</method>
<method name='add' fullname='org.as3commons.collections.fx:SortedListFx/add' isStatic='false' isFinal='false' isOverride='true'  param_names='item' param_types='*' param_defaults='undefined' result_type='uint'>
<description><![CDATA[
		 
		 
		 Adds an item to the list.
		 
		 <p>The <code>ArrayList</code> appends the item.</p>
		 
		 <p>The position of items that are added to a <code>SortedList</code>
		 depends on its sort order.</p>
		 
		 ]]></description>
<param><![CDATA[item The item to add.
		 ]]></param>
<return><![CDATA[The position where the item has been added.
		 ]]></return>
</method>
<method name='clear' fullname='org.as3commons.collections.fx:SortedListFx/clear' isStatic='false' isFinal='false' isOverride='true'  result_type='Boolean'>
<description><![CDATA[
		 
		 Removes all items from the collection.
		 
		 <p>If the collection is already empty, the method aborts with <code>false</code>.</p>
		 
		 ]]></description>
<return><![CDATA[<code>true</code> if items have been removed.
		 ]]></return>
</method>
<method name='dispatchEvent' fullname='org.as3commons.collections.fx:SortedListFx/dispatchEvent' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 ]]></description>
<inheritDoc><![CDATA[]]></inheritDoc>
</method>
<method name='hasEventListener' fullname='org.as3commons.collections.fx:SortedListFx/hasEventListener' isStatic='false' isFinal='false' isOverride='false'  param_names='type' param_types='String' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 ]]></description>
<inheritDoc><![CDATA[]]></inheritDoc>
</method>
<method name='itemRemoved' fullname='org.as3commons.collections.fx:SortedListFx/protected:itemRemoved' isStatic='false' isFinal='false' isOverride='true'  param_names='index;item' param_types='uint;*' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		 
		 Template method to notify subclasses after an item has been removed.
		 
		 ]]></description>
<param><![CDATA[index The former index of the removed item.
		 ]]></param>
<param><![CDATA[item The removed item.
		 ]]></param>
</method>
<method name='removeAllAt' fullname='org.as3commons.collections.fx:SortedListFx/removeAllAt' isStatic='false' isFinal='false' isOverride='true'  param_names='index;numItems' param_types='uint;uint' param_defaults='undefined;undefined' result_type='Array'>
<description><![CDATA[
		 
		 Removes a number of items starting at the specified position.
		 
		 <p>If the given position exceeds the list size, the method aborts with <code>false</code>.</p>
		 
		 <p>If the number of items exceeds the list size, the method
		 removes all items starting at the given index.</p>
		 
		 <p>Returns an empty array if the index is invalid.</p>
		 
		 ]]></description>
<param><![CDATA[index The position of the first item to remove.
		 ]]></param>
<param><![CDATA[numItems The number of items to remove.
		 ]]></param>
<return><![CDATA[An array of all removed items.
		 ]]></return>
</method>
<method name='removeAt' fullname='org.as3commons.collections.fx:SortedListFx/removeAt' isStatic='false' isFinal='false' isOverride='true'  param_names='index' param_types='uint' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 
		 Removes the item at the specified position.
		 
		 ]]></description>
<param><![CDATA[index The position of the item to remove.
		 ]]></param>
<return><![CDATA[The removed item or <code>undefined</code> if there is no item at that position.
		 ]]></return>
</method>
<method name='removeEventListener' fullname='org.as3commons.collections.fx:SortedListFx/removeEventListener' isStatic='false' isFinal='false' isOverride='false'  param_names='type;listener;useCapture' param_types='String;Function;Boolean' param_defaults='undefined;undefined;false' result_type='void'>
<description><![CDATA[
		 ]]></description>
<inheritDoc><![CDATA[]]></inheritDoc>
</method>
<method name='removeFirst' fullname='org.as3commons.collections.fx:SortedListFx/removeFirst' isStatic='false' isFinal='false' isOverride='true'  result_type='*'>
<description><![CDATA[
		 
		 Removes the first item of the ordered collection.
		 
		 ]]></description>
<return><![CDATA[The formerly first item or <code>undefined</code> if the collection is empty.
		 ]]></return>
</method>
<method name='removeLast' fullname='org.as3commons.collections.fx:SortedListFx/removeLast' isStatic='false' isFinal='false' isOverride='true'  result_type='*'>
<description><![CDATA[
		 
		 Removes the last item of the ordered collection.
		 
		 ]]></description>
<return><![CDATA[The formerly last item or <code>undefined</code> if the collection is empty.
		 ]]></return>
</method>
<method name='willTrigger' fullname='org.as3commons.collections.fx:SortedListFx/willTrigger' isStatic='false' isFinal='false' isOverride='false'  param_names='type' param_types='String' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 ]]></description>
<inheritDoc><![CDATA[]]></inheritDoc>
</method>
<method name='array' fullname='org.as3commons.collections.fx:SortedListFx/array/set' isStatic='false' isFinal='false' isOverride='true'  param_names='array' param_types='Array' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 
		 
		 Specifies an array to be maintained by the list.
		 
		 <p>Already contained elements will be removed beforehand.</p>
		 
		 <p>The list stores a copy of the given array not the array itself.</p>
		 
		 ]]></description>
<param><![CDATA[array The array.
		 ]]></param>
</method>
<field name='_eventDispatcher' fullname='org.as3commons.collections.fx:SortedListFx/private:_eventDispatcher' type='flash.events:IEventDispatcher' isStatic='false' isConst='false' >
<description><![CDATA[
		 Event dispatcher.
		 ]]></description>
</field>
<packageRec name='org.as3commons.collections.fx.null' fullname='org.as3commons.collections.fx.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<classRec name='SortedMapFx' fullname='org.as3commons.collections.fx:SortedMapFx' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\fx\SortedMapFx.as' namespace='org.as3commons.collections.fx' access='public' baseclass='org.as3commons.collections:SortedMap' interfaces='org.as3commons.collections.framework:ICollectionFx' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Bindable version of the <code>SortedMap</code> implementation.
	 
	 <p><strong><code>SortedMapFx</code> event kinds</strong></p>
	 
	 <ul>
	 <li><code>CollectionEvent.ITEM_ADDED</code></li>
	 <li><code>CollectionEvent.ITEM_REMOVED</code></li>
	 <li><code>CollectionEvent.RESET</code></li>
	 </ul>
	 
	 <p>As of its sort order, the <code>SortedMap</code> may change the
	 position of a key-value-pair within the map after an item replacement
	 operation (<code>replaceFor()</code>). To anyhow notify a listener about
	 the former position of the old item and the new position of the replacing
	 item, the map dispatches in this case a <code>CollectionEvent.ITEM_REMOVED</code>
	 event immediately followed by a <code>CollectionEvent.ITEM_ADDED</code> event.</p>
	 
	 <p id="link_SortedMapFxExample"><strong>SortedMapFx example</strong></p>
	 
	 <a class="exampleCollapsed" href="#link_SortedMapFxExample" onClick="toggleExample(this, 'SortedMapFxExample');">Show example</a><br /><div id="SortedMapFxExample" style='display:none'><listing version="3.0">package {
    import org.as3commons.collections.framework.IMapIterator;
    import org.as3commons.collections.fx.SortedMapFx;
    import org.as3commons.collections.fx.events.CollectionEvent;
    import org.as3commons.collections.fx.events.MapEvent;
    import org.as3commons.collections.utils.NumericComparator;
    import flash.display.Sprite;

    public class SortedMapFxExample extends Sprite {

        public function SortedMapFxExample() {
            var map : SortedMapFx = new SortedMapFx(new NumericComparator());
            map.addEventListener(CollectionEvent.COLLECTION_CHANGED, changedHandler);
            
            map.add("five", 5);
            map.add("two", 2);
            map.add("threeA", 3);
            map.add("two", 2); // no event (two already contained)
            map.add("four", 4);
            map.add("threeB", 3);
            map.add("one", 1);
            map.add("threeC", 3);

            map.replaceFor("four", -4);
            map.replaceFor("one", 1); // no event (1 === 1)

            map.removeKey("one");
            map.removeFirst();
            map.removeLast();
            map.remove(6); // no event (6 not contained)
            map.removeAll(3);

            map.clear();

            // [5] added                         [5]
            // [2] added before 5                [2 5]
            // [3] added after 2 before 5        [2 3 5]
            // [4] added after 3 before 5        [2 3 4 5]
            // [3] added after 3 before 4        [2 3 3 4 5]
            // [1] added before 2                [1 2 3 3 4 5]
            // [3] added after 3 before 4        [1 2 3 3 3 4 5]
            // [4] removed after 3 before 5      [1 2 3 3 3 5]
            // [-4] added before 1               [-4 1 2 3 3 3 5]
            // [1] removed after -4 before 2     [-4 2 3 3 3 5]
            // [-4] removed before 2             [2 3 3 3 5]
            // [5] removed after 3               [2 3 3 3]
            // [3] removed after 2 before 3      [2 3 3]
            // [3] removed after 2 before 3      [2 3]
            // [3] removed after 2               [2]
            // Reset                             []
        }
        
        private function changedHandler(e : MapEvent) : void {
            var info : String = "";
            var iterator : IMapIterator;
            
            switch (e.kind) {
                case CollectionEvent.ITEM_ADDED:
                    info += "[" + e.item + "] added";

                    iterator = e.iterator() as IMapIterator;
                    if (iterator.previousKey !== undefined) info += " after " + e.map.itemFor(iterator.previousKey);
                    iterator.next();
                    if (iterator.nextKey !== undefined) info += " before " + e.map.itemFor(iterator.nextKey);
                    break;

                case CollectionEvent.ITEM_REMOVED:
                    info += "[" + e.item + "] removed";

                    iterator = e.iterator() as IMapIterator;
                    if (iterator.previousKey !== undefined) info += " after " + e.map.itemFor(iterator.previousKey);
                    if (iterator.nextKey !== undefined) info += " before " + e.map.itemFor(iterator.nextKey);
                    break;

                case CollectionEvent.RESET:
                    info += ("Reset");
                    break;
            }
            
            for (var i : uint = info.length; i &lt; 34; i++) info += " ";
            info += "[" + e.map.toArray().join(" ") + "]";
            trace (info);
        }
    }
}
</listing></div>
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 30.03.2010
	 ]]></author>
<see><![CDATA[org.as3commons.collections.fx.events.MapEvent MapEvent - Description of the map event properties.
	 ]]></see>
<see><![CDATA[org.as3commons.collections.SortedMap SortedMap - SortedMap description and usage examples.
	 ]]></see>
</classRec>
<method name='SortedMapFx' fullname='org.as3commons.collections.fx:SortedMapFx/SortedMapFx' isStatic='false' isFinal='false' isOverride='false'  param_names='comparator' param_types='org.as3commons.collections.framework:IComparator' param_defaults='null' result_type='*'>
<description><![CDATA[
		 SortedMapFx constructor.
		 ]]></description>
</method>
<method name='addEventListener' fullname='org.as3commons.collections.fx:SortedMapFx/addEventListener' isStatic='false' isFinal='false' isOverride='false'  param_names='type;listener;useCapture;priority;useWeakReference' param_types='String;Function;Boolean;int;Boolean' param_defaults='undefined;undefined;false;0;false' result_type='void'>
<description><![CDATA[
		 ]]></description>
<inheritDoc><![CDATA[]]></inheritDoc>
</method>
<method name='addNode' fullname='org.as3commons.collections.fx:SortedMapFx/protected:addNode' isStatic='false' isFinal='false' isOverride='true'  param_names='node' param_types='org.as3commons.collections.framework.core:SortedNode' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 
		 
		 Adds an item to the tree.
		 
		 <p>The method creates a new tree node, inserts the node as the leaf of
		 its successor/predecessor and rotates then the node upwards until
		 the tree becomes consistent again regarding the priority constraint.</p>
		 
		 <p>If the tree is empty, the method simply creates a new root node.</p>
		 
		 ]]></description>
<param><![CDATA[newNode The node to add.
		 ]]></param>
</method>
<method name='clear' fullname='org.as3commons.collections.fx:SortedMapFx/clear' isStatic='false' isFinal='false' isOverride='true'  result_type='Boolean'>
<description><![CDATA[
		 
		 Removes all items from the collection.
		 
		 <p>If the collection is already empty, the method aborts with <code>false</code>.</p>
		 
		 ]]></description>
<return><![CDATA[<code>true</code> if items have been removed.
		 ]]></return>
</method>
<method name='dispatchEvent' fullname='org.as3commons.collections.fx:SortedMapFx/dispatchEvent' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 ]]></description>
<inheritDoc><![CDATA[]]></inheritDoc>
</method>
<method name='hasEventListener' fullname='org.as3commons.collections.fx:SortedMapFx/hasEventListener' isStatic='false' isFinal='false' isOverride='false'  param_names='type' param_types='String' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 ]]></description>
<inheritDoc><![CDATA[]]></inheritDoc>
</method>
<method name='removeEventListener' fullname='org.as3commons.collections.fx:SortedMapFx/removeEventListener' isStatic='false' isFinal='false' isOverride='false'  param_names='type;listener;useCapture' param_types='String;Function;Boolean' param_defaults='undefined;undefined;false' result_type='void'>
<description><![CDATA[
		 ]]></description>
<inheritDoc><![CDATA[]]></inheritDoc>
</method>
<method name='removeNode' fullname='org.as3commons.collections.fx:SortedMapFx/protected:removeNode' isStatic='false' isFinal='false' isOverride='true'  param_names='node' param_types='org.as3commons.collections.framework.core:SortedNode' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 
		 
		 Removes a node from the tree.
		 
		 <p>The method rotates the given node downwards until it becomes a leaf node
		 and gets removed from the tree.</p>
		 
		 ]]></description>
<param><![CDATA[node The node to remove.
		 ]]></param>
</method>
<method name='willTrigger' fullname='org.as3commons.collections.fx:SortedMapFx/willTrigger' isStatic='false' isFinal='false' isOverride='false'  param_names='type' param_types='String' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 ]]></description>
<inheritDoc><![CDATA[]]></inheritDoc>
</method>
<field name='_eventDispatcher' fullname='org.as3commons.collections.fx:SortedMapFx/private:_eventDispatcher' type='flash.events:IEventDispatcher' isStatic='false' isConst='false' >
<description><![CDATA[
		 Event dispatcher.
		 ]]></description>
</field>
<packageRec name='org.as3commons.collections.fx.null' fullname='org.as3commons.collections.fx.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<classRec name='SetFx' fullname='org.as3commons.collections.fx:SetFx' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\fx\SetFx.as' namespace='org.as3commons.collections.fx' access='public' baseclass='org.as3commons.collections:Set' interfaces='org.as3commons.collections.framework:ICollectionFx' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Bindable version of the <code>Set</code> implementation.
	 
	 <p><strong><code>SetFx</code> event kinds</strong></p>
	 
	 <ul>
	 <li><code>CollectionEvent.ITEM_ADDED</code></li>
	 <li><code>CollectionEvent.ITEM_REMOVED</code></li>
	 <li><code>CollectionEvent.RESET</code></li>
	 </ul>
	 
	 <p><strong>Note</strong></p>
	 
	 <p>As of the absence of any order of the <code>Set</code> collection, the <code>iterator()</code>
	 method of the event dispatched by the <code>SetFx</code> returns always <code>null</code>.</p>
	 
	 <p id="link_SetFxExample"><strong>SetFx example</strong></p>
	 
	 <a class="exampleCollapsed" href="#link_SetFxExample" onClick="toggleExample(this, 'SetFxExample');">Show example</a><br /><div id="SetFxExample" style='display:none'><listing version="3.0">package {
    import org.as3commons.collections.fx.SetFx;
    import org.as3commons.collections.fx.events.CollectionEvent;
    import org.as3commons.collections.fx.events.SetEvent;
    import flash.display.Sprite;

    public class SetFxExample extends Sprite {

        public function SetFxExample() {
            var theSet : SetFx = new SetFx();
            theSet.addEventListener(CollectionEvent.COLLECTION_CHANGED, changedHandler);
            
            theSet.add(5);
            theSet.add(2);
            theSet.add(2); // no event (2 already contained)
            theSet.add("one");
            theSet.add("four");
            theSet.add(5); // no event (5 already contained)
            theSet.add(true); // no event (5 already contained)

            theSet.remove(5);
            theSet.remove(6); // no event (6 not contained)
            theSet.remove(true);

            theSet.clear();

            // [5] added                     [5]
            // [2] added                     [2 5]
            // [one] added                   [one 2 5]
            // [four] added                  [four one 2 5]
            // [true] added                  [four one 2 true 5]
            // [5] removed                   [four one 2 true]
            // [true] removed                [four one 2]
            // Reset                         []
        }
        
        private function changedHandler(e : SetEvent) : void {
            var info : String = "";
            
            switch (e.kind) {
                case CollectionEvent.ITEM_ADDED:
                    info += "[" + e.item + "] added";
                    break;

                case CollectionEvent.ITEM_REMOVED:
                    info += "[" + e.item + "] removed";
                    break;

                case CollectionEvent.RESET:
                    info += ("Reset");
                    break;
            }
            
            for (var i : uint = info.length; i &lt; 30; i++) info += " ";
            info += "[" + e.set.toArray().join(" ") + "]";
            trace (info);
        }
    }
}
</listing></div>
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 24.03.2010
	 ]]></author>
<see><![CDATA[org.as3commons.collections.fx.events.SetEvent SetEvent - Description of the set event properties.
	 ]]></see>
<see><![CDATA[org.as3commons.collections.Set Set - Set description and usage examples.
	 ]]></see>
</classRec>
<method name='SetFx' fullname='org.as3commons.collections.fx:SetFx/SetFx' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 SetFx constructor.
		 ]]></description>
</method>
<method name='addEventListener' fullname='org.as3commons.collections.fx:SetFx/addEventListener' isStatic='false' isFinal='false' isOverride='false'  param_names='type;listener;useCapture;priority;useWeakReference' param_types='String;Function;Boolean;int;Boolean' param_defaults='undefined;undefined;false;0;false' result_type='void'>
<description><![CDATA[
		 ]]></description>
<inheritDoc><![CDATA[]]></inheritDoc>
</method>
<method name='add' fullname='org.as3commons.collections.fx:SetFx/add' isStatic='false' isFinal='false' isOverride='true'  param_names='item' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 
		 
		 Adds an item to the set.
		 
		 <p>If the set already contains the given item, the method abords with <code>false</code>.</p>
		 
		 <p>The <code>LinkedSet</code> appends the item.</p>
		 
		 <p>The position of items that are added to a <code>SortedSet</code>
		 depends on its sort order.</p>
		 
		 ]]></description>
<param><![CDATA[item The item to add.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item has been added.
		 ]]></return>
</method>
<method name='clear' fullname='org.as3commons.collections.fx:SetFx/clear' isStatic='false' isFinal='false' isOverride='true'  result_type='Boolean'>
<description><![CDATA[
		 
		 Removes all items from the collection.
		 
		 <p>If the collection is already empty, the method aborts with <code>false</code>.</p>
		 
		 ]]></description>
<return><![CDATA[<code>true</code> if items have been removed.
		 ]]></return>
</method>
<method name='dispatchEvent' fullname='org.as3commons.collections.fx:SetFx/dispatchEvent' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 ]]></description>
<inheritDoc><![CDATA[]]></inheritDoc>
</method>
<method name='hasEventListener' fullname='org.as3commons.collections.fx:SetFx/hasEventListener' isStatic='false' isFinal='false' isOverride='false'  param_names='type' param_types='String' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 ]]></description>
<inheritDoc><![CDATA[]]></inheritDoc>
</method>
<method name='removeEventListener' fullname='org.as3commons.collections.fx:SetFx/removeEventListener' isStatic='false' isFinal='false' isOverride='false'  param_names='type;listener;useCapture' param_types='String;Function;Boolean' param_defaults='undefined;undefined;false' result_type='void'>
<description><![CDATA[
		 ]]></description>
<inheritDoc><![CDATA[]]></inheritDoc>
</method>
<method name='remove' fullname='org.as3commons.collections.fx:SetFx/remove' isStatic='false' isFinal='false' isOverride='true'  param_names='item' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 
		 Removes an item from the collection.
		 
		 <p>Trying to remove an item which is not contained by the collection
		 leaves the collection untouched and returns <code>false</code>.</p>
		 
		 <p>If the collection contains multiple entries of the given item
		 the first occurrence of the item will be removed.</p>
		 
		 ]]></description>
<param><![CDATA[item The item to remove.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item has been removed.
		 ]]></return>
</method>
<method name='willTrigger' fullname='org.as3commons.collections.fx:SetFx/willTrigger' isStatic='false' isFinal='false' isOverride='false'  param_names='type' param_types='String' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 ]]></description>
<inheritDoc><![CDATA[]]></inheritDoc>
</method>
<field name='_eventDispatcher' fullname='org.as3commons.collections.fx:SetFx/private:_eventDispatcher' type='flash.events:IEventDispatcher' isStatic='false' isConst='false' >
<description><![CDATA[
		 Event dispatcher.
		 ]]></description>
</field>
<packageRec name='org.as3commons.collections.fx.null' fullname='org.as3commons.collections.fx.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<classRec name='ArrayListFx' fullname='org.as3commons.collections.fx:ArrayListFx' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\fx\ArrayListFx.as' namespace='org.as3commons.collections.fx' access='public' baseclass='org.as3commons.collections:ArrayList' interfaces='org.as3commons.collections.framework:ICollectionFx' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Bindable version of the <code>ArrayList</code> implementation.
	 
	 <p><strong><code>ArrayListFx</code> event kinds</strong></p>
	 
	 <ul>
	 <li><code>CollectionEvent.ITEM_ADDED</code></li>
	 <li><code>CollectionEvent.ITEM_REPLACED</code></li>
	 <li><code>CollectionEvent.ITEM_REMOVED</code></li>
	 <li><code>CollectionEvent.RESET</code></li>
	 </ul>
	 
	 <p>The <code>ArrayList</code> offers two bulk methods to add or remove
	 a list of items (<code>addAllAt(), removeAllAt()</code>) in one step.
	 In response to either of those operations the event property <code>CollectionEvent.items</code>
	 is set. In all other cases of adding, removing or replacing of items the
	 event property <code>CollectionEvent.item</code> is set.</p>
	 
	 <p id="link_ArrayListFxExample"><strong>ArrayListFx example</strong></p>
	 
	 <a class="exampleCollapsed" href="#link_ArrayListFxExample" onClick="toggleExample(this, 'ArrayListFxExample');">Show example</a><br /><div id="ArrayListFxExample" style='display:none'><listing version="3.0">package {
    import org.as3commons.collections.fx.ArrayListFx;
    import org.as3commons.collections.fx.events.CollectionEvent;
    import org.as3commons.collections.fx.events.ListEvent;
    import org.as3commons.collections.utils.NumericComparator;
    import flash.display.Sprite;

    public class ArrayListFxExample extends Sprite {

        public function ArrayListFxExample() {
            var list : ArrayListFx = new ArrayListFx();
            list.addEventListener(CollectionEvent.COLLECTION_CHANGED, changedHandler);
            
            list.add(1);
            list.addAllAt(1, [2, 2, 4, 4, 5, 5, 6, 6, 8, 8]);
            list.addFirst(10);
            list.addLast(12);

            list.replaceAt(3, 2); // no event (item at 3 is already 2)
            list.replaceAt(6, 2);
            list.replaceAt(7, 2);

            list.removeFirst();
            list.removeLast();
            list.removeAt(2);
            list.removeAt(12); // no event (index &gt; list.size)
            list.removeAllAt(2, 2);

            list.remove(6);
            list.removeAll(2);
            list.removeAll(10); // no event (10 not contained)

            list.reverse();
            list.sort(new NumericComparator());
            list.array = [1, 2, 3, 4, 5];

            list.clear();

            // [1] added at 0                        [1]
            // [2,2,4,4,5,5,6,6,8,8] added at 1      [1 2 2 4 4 5 5 6 6 8 8]
            // [10] added at 0                       [10 1 2 2 4 4 5 5 6 6 8 8]
            // [12] added at 12                      [10 1 2 2 4 4 5 5 6 6 8 8 12]
            // [2] replaced at 6                     [10 1 2 2 4 4 2 5 6 6 8 8 12]
            // [2] replaced at 7                     [10 1 2 2 4 4 2 2 6 6 8 8 12]
            // [10] removed at 0                     [1 2 2 4 4 2 2 6 6 8 8 12]
            // [12] removed at 11                    [1 2 2 4 4 2 2 6 6 8 8]
            // [2] removed at 2                      [1 2 4 4 2 2 6 6 8 8]
            // [4,4] removed at 2                    [1 2 2 2 6 6 8 8]
            // [6] removed at 4                      [1 2 2 2 6 8 8]
            // [2] removed at 1                      [1 2 2 6 8 8]
            // [2] removed at 1                      [1 2 6 8 8]
            // [2] removed at 1                      [1 6 8 8]
            // Reset                                 [8 8 6 1]
            // Reset                                 [1 6 8 8]
            // Reset                                 [1 2 3 4 5]
            // Reset                                 []
        }
        
        private function changedHandler(e : ListEvent) : void {
            var info : String = "";
            var items : 
            
            switch (e.kind) {
                case CollectionEvent.ITEM_ADDED:
                    items = e.numItems == 1 ? e.item : e.items;
                    info += "[" + items + "] added at " + e.index;
                    break;

                case CollectionEvent.ITEM_REMOVED:
                    items = e.numItems == 1 ? e.item : e.items;
                    info += "[" + items + "] removed at " + e.index;
                    break;

                case CollectionEvent.ITEM_REPLACED:
                    info += "[" + e.item + "] replaced at " + e.index;
                    break;

                case CollectionEvent.RESET:
                    info += ("Reset");
                    break;
            }
            
            for (var i : uint = info.length; i &lt; 38; i++) info += " ";
            info += "[" + e.list.toArray().join(" ") + "]";
            trace (info);
        }
    }
}
</listing></div>
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 01.03.2010
	 ]]></author>
<see><![CDATA[org.as3commons.collections.fx.events.ListEvent ListEvent - Description of the list event properties.
	 ]]></see>
<see><![CDATA[org.as3commons.collections.ArrayList ArrayList - ArrayList description and usage examples.
	 ]]></see>
<metadata>
	<Event owner='org.as3commons.collections.fx:ArrayListFx' name='collectionChanged' type='org.as3commons.collections.fx.events.ListEvent' >
<description><![CDATA[
	 ]]></description>
<eventType><![CDATA[org.as3commons.collections.fx.events.CollectionEvent.COLLECTION_CHANGED
	 ]]></eventType>
	</Event>
</metadata>
</classRec>
<method name='ArrayListFx' fullname='org.as3commons.collections.fx:ArrayListFx/ArrayListFx' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 ArrayListFx constructor.
		 ]]></description>
</method>
<method name='addAllAt' fullname='org.as3commons.collections.fx:ArrayListFx/addAllAt' isStatic='false' isFinal='false' isOverride='true'  param_names='index;items' param_types='uint;Array' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[
		 
		 
		 Adds an array of items at a specific position.
		 
		 <p>If the given position exceeds the list size, the method aborts
		 with <code>false</code>.</p>
		 
		 ]]></description>
<param><![CDATA[index The position of the items to add.
		 ]]></param>
<param><![CDATA[items An array of items to add.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item has been added.
		 ]]></return>
</method>
<method name='addAt' fullname='org.as3commons.collections.fx:ArrayListFx/addAt' isStatic='false' isFinal='false' isOverride='true'  param_names='index;item' param_types='uint;*' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[
		 
		 
		 Adds an item at a specific position.
		 
		 <p>If the given position exceeds the list size, the method
		 aborts with <code>false</code>.</p>
		 
		 ]]></description>
<param><![CDATA[index The position of the new item.
		 ]]></param>
<param><![CDATA[item The item to add.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item has been added.
		 ]]></return>
</method>
<method name='addEventListener' fullname='org.as3commons.collections.fx:ArrayListFx/addEventListener' isStatic='false' isFinal='false' isOverride='false'  param_names='type;listener;useCapture;priority;useWeakReference' param_types='String;Function;Boolean;int;Boolean' param_defaults='undefined;undefined;false;0;false' result_type='void'>
<description><![CDATA[
		 ]]></description>
<inheritDoc><![CDATA[]]></inheritDoc>
</method>
<method name='addFirst' fullname='org.as3commons.collections.fx:ArrayListFx/addFirst' isStatic='false' isFinal='false' isOverride='true'  param_names='item' param_types='*' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 
		 
		 Adds an item in front of the list.
		 
		 ]]></description>
<param><![CDATA[item The item to add.
		 ]]></param>
</method>
<method name='addLast' fullname='org.as3commons.collections.fx:ArrayListFx/addLast' isStatic='false' isFinal='false' isOverride='true'  param_names='item' param_types='*' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 
		 
		 Adds an item at the end of the list.
		 
		 ]]></description>
<param><![CDATA[item The item to add.
		 ]]></param>
</method>
<method name='add' fullname='org.as3commons.collections.fx:ArrayListFx/add' isStatic='false' isFinal='false' isOverride='true'  param_names='item' param_types='*' param_defaults='undefined' result_type='uint'>
<description><![CDATA[
		 
		 Adds an item to the list.
		 
		 <p>The <code>ArrayList</code> appends the item.</p>
		 
		 <p>The position of items that are added to a <code>SortedList</code>
		 depends on its sort order.</p>
		 
		 ]]></description>
<param><![CDATA[item The item to add.
		 ]]></param>
<return><![CDATA[The position where the item has been added.
		 ]]></return>
</method>
<method name='clear' fullname='org.as3commons.collections.fx:ArrayListFx/clear' isStatic='false' isFinal='false' isOverride='true'  result_type='Boolean'>
<description><![CDATA[
		 
		 Removes all items from the collection.
		 
		 <p>If the collection is already empty, the method aborts with <code>false</code>.</p>
		 
		 ]]></description>
<return><![CDATA[<code>true</code> if items have been removed.
		 ]]></return>
</method>
<method name='dispatchEvent' fullname='org.as3commons.collections.fx:ArrayListFx/dispatchEvent' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 ]]></description>
<inheritDoc><![CDATA[]]></inheritDoc>
</method>
<method name='hasEventListener' fullname='org.as3commons.collections.fx:ArrayListFx/hasEventListener' isStatic='false' isFinal='false' isOverride='false'  param_names='type' param_types='String' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 ]]></description>
<inheritDoc><![CDATA[]]></inheritDoc>
</method>
<method name='itemRemoved' fullname='org.as3commons.collections.fx:ArrayListFx/protected:itemRemoved' isStatic='false' isFinal='false' isOverride='true'  param_names='index;item' param_types='uint;*' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		 
		 Template method to notify subclasses after an item has been removed.
		 
		 ]]></description>
<param><![CDATA[index The former index of the removed item.
		 ]]></param>
<param><![CDATA[item The removed item.
		 ]]></param>
</method>
<method name='removeAllAt' fullname='org.as3commons.collections.fx:ArrayListFx/removeAllAt' isStatic='false' isFinal='false' isOverride='true'  param_names='index;numItems' param_types='uint;uint' param_defaults='undefined;undefined' result_type='Array'>
<description><![CDATA[
		 
		 Removes a number of items starting at the specified position.
		 
		 <p>If the given position exceeds the list size, the method aborts with <code>false</code>.</p>
		 
		 <p>If the number of items exceeds the list size, the method
		 removes all items starting at the given index.</p>
		 
		 <p>Returns an empty array if the index is invalid.</p>
		 
		 ]]></description>
<param><![CDATA[index The position of the first item to remove.
		 ]]></param>
<param><![CDATA[numItems The number of items to remove.
		 ]]></param>
<return><![CDATA[An array of all removed items.
		 ]]></return>
</method>
<method name='removeAt' fullname='org.as3commons.collections.fx:ArrayListFx/removeAt' isStatic='false' isFinal='false' isOverride='true'  param_names='index' param_types='uint' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 
		 Removes the item at the specified position.
		 
		 ]]></description>
<param><![CDATA[index The position of the item to remove.
		 ]]></param>
<return><![CDATA[The removed item or <code>undefined</code> if there is no item at that position.
		 ]]></return>
</method>
<method name='removeEventListener' fullname='org.as3commons.collections.fx:ArrayListFx/removeEventListener' isStatic='false' isFinal='false' isOverride='false'  param_names='type;listener;useCapture' param_types='String;Function;Boolean' param_defaults='undefined;undefined;false' result_type='void'>
<description><![CDATA[
		 ]]></description>
<inheritDoc><![CDATA[]]></inheritDoc>
</method>
<method name='removeFirst' fullname='org.as3commons.collections.fx:ArrayListFx/removeFirst' isStatic='false' isFinal='false' isOverride='true'  result_type='*'>
<description><![CDATA[
		 
		 Removes the first item of the ordered collection.
		 
		 ]]></description>
<return><![CDATA[The formerly first item or <code>undefined</code> if the collection is empty.
		 ]]></return>
</method>
<method name='removeLast' fullname='org.as3commons.collections.fx:ArrayListFx/removeLast' isStatic='false' isFinal='false' isOverride='true'  result_type='*'>
<description><![CDATA[
		 
		 Removes the last item of the ordered collection.
		 
		 ]]></description>
<return><![CDATA[The formerly last item or <code>undefined</code> if the collection is empty.
		 ]]></return>
</method>
<method name='replaceAt' fullname='org.as3commons.collections.fx:ArrayListFx/replaceAt' isStatic='false' isFinal='false' isOverride='true'  param_names='index;item' param_types='uint;*' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[
		 
		 
		 Replaces the item at the specified position.
		 
		 <p>If the item at the position strictly equals the given item or the index
		 exceeds the list length, this method aborts with <code>false</code>.</p>
		 
		 ]]></description>
<param><![CDATA[index The position of the item to replace.
		 ]]></param>
<param><![CDATA[item The replacing item.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item has been replaced.
		 ]]></return>
</method>
<method name='reverse' fullname='org.as3commons.collections.fx:ArrayListFx/reverse' isStatic='false' isFinal='false' isOverride='true'  result_type='Boolean'>
<description><![CDATA[
		 
		 
		 Reverses the collection order.
		 
		 <p>If the collection size is less than 2, the method aborts with <code>false</code>.</p>
		 
		 ]]></description>
<return><![CDATA[<code>true</code> if the collection has been reversed.
		 ]]></return>
</method>
<method name='sort' fullname='org.as3commons.collections.fx:ArrayListFx/sort' isStatic='false' isFinal='false' isOverride='true'  param_names='comparator' param_types='org.as3commons.collections.framework:IComparator' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 
		 
		 Sorts the linked collection using the given comparator.
		 
		 <p>The sort algorithm used by implementors of this interface is stable which
		 means that equal items are sorted in the same order they had before the sorting.</p>
		 
		 <p>If the collection size is less than 2, the method aborts with <code>false</code>.</p>
		 
		 ]]></description>
<param><![CDATA[comparator The sort criterion.
		 ]]></param>
<return><![CDATA[<code>true</code> if the linked collection has been sorted.
		 ]]></return>
</method>
<method name='willTrigger' fullname='org.as3commons.collections.fx:ArrayListFx/willTrigger' isStatic='false' isFinal='false' isOverride='false'  param_names='type' param_types='String' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 ]]></description>
<inheritDoc><![CDATA[]]></inheritDoc>
</method>
<method name='array' fullname='org.as3commons.collections.fx:ArrayListFx/array/set' isStatic='false' isFinal='false' isOverride='true'  param_names='array' param_types='Array' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 
		 Specifies an array to be maintained by the list.
		 
		 <p>Already contained elements will be removed beforehand.</p>
		 
		 <p>The list stores a copy of the given array not the array itself.</p>
		 
		 ]]></description>
<param><![CDATA[array The array.
		 ]]></param>
</method>
<field name='_eventDispatcher' fullname='org.as3commons.collections.fx:ArrayListFx/private:_eventDispatcher' type='flash.events:IEventDispatcher' isStatic='false' isConst='false' >
<description><![CDATA[
		 Event dispatcher.
		 ]]></description>
</field>
<packageRec name='org.as3commons.collections.fx.null' fullname='org.as3commons.collections.fx.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<classRec name='MapFx' fullname='org.as3commons.collections.fx:MapFx' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\fx\MapFx.as' namespace='org.as3commons.collections.fx' access='public' baseclass='org.as3commons.collections:Map' interfaces='org.as3commons.collections.framework:ICollectionFx' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Bindable version of the <code>Map</code> implementation.
	 
	 <p><strong><code>MapFx</code> event kinds</strong></p>
	 
	 <ul>
	 <li><code>CollectionEvent.ITEM_ADDED</code></li>
	 <li><code>CollectionEvent.ITEM_REPLACED</code></li>
	 <li><code>CollectionEvent.ITEM_REMOVED</code></li>
	 <li><code>CollectionEvent.RESET</code></li>
	 </ul>
	 
	 <p><strong>Note</strong></p>
	 
	 <p>As of the absence of any order of the <code>Map</code> collection, the <code>iterator()</code>
	 method of the event dispatched by the <code>MapFx</code> returns always <code>null</code>.</p>
	 
	 <p id="link_MapFxExample"><strong>MapFx example</strong></p>
	 
	 <a class="exampleCollapsed" href="#link_MapFxExample" onClick="toggleExample(this, 'MapFxExample');">Show example</a><br /><div id="MapFxExample" style='display:none'><listing version="3.0">package {
    import org.as3commons.collections.fx.MapFx;
    import org.as3commons.collections.fx.events.CollectionEvent;
    import org.as3commons.collections.fx.events.MapEvent;
    import flash.display.Sprite;

    public class MapFxExample extends Sprite {

        public function MapFxExample() {
            var map : MapFx = new MapFx();
            map.addEventListener(CollectionEvent.COLLECTION_CHANGED, changedHandler);
            
            map.add("five", 5);
            map.add("two", 2);
            map.add("threeA", "three");
            map.add("two", 2); // no event (two already contained)
            map.add("four", 4);
            map.add("threeB", "three");
            map.add("one", 1);
            map.add("threeC", "three");

            map.replaceFor("four", -4);
            map.replaceFor("one", 1); // no event (1 === 1)

            map.removeKey("one");
            map.remove(6); // no event (6 not contained)
            map.removeAll("three");

            map.clear();

            // [five=5] added                    [5]
            // [two=2] added                     [2 5]
            // [threeA=three] added              [2 5 three]
            // [four=4] added                    [2 4 5 three]
            // [threeB=three] added              [2 4 5 three three]
            // [one=1] added                     [2 4 1 5 three three]
            // [threeC=three] added              [2 three 5 three 4 1 three]
            // [four=-4] replaced                [2 three 5 three -4 1 three]
            // [one=1] removed                   [2 three 5 three -4 three]
            // [threeC=three] removed            [2 5 three -4 three]
            // [threeA=three] removed            [2 5 -4 three]
            // [threeB=three] removed            [2 5 -4]
            // Reset                             []
        }
        
        private function changedHandler(e : MapEvent) : void {
            var info : String = "";
            
            switch (e.kind) {
                case CollectionEvent.ITEM_ADDED:
                    info += "[" + e.key + "=" + e.item + "] added";
                    break;

                case CollectionEvent.ITEM_REMOVED:
                    info += "[" + e.key + "=" + e.item + "] removed";
                    break;

                case CollectionEvent.ITEM_REPLACED:
                    info += "[" + e.key + "=" + e.item + "] replaced";
                    break;

                case CollectionEvent.RESET:
                    info += ("Reset");
                    break;
            }
            
            for (var i : uint = info.length; i &lt; 34; i++) info += " ";
            info += "[" + e.map.toArray().join(" ") + "]";
            trace (info);
        }
    }
}
</listing></div>
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 24.03.2010
	 ]]></author>
<see><![CDATA[org.as3commons.collections.fx.events.MapEvent MapEvent - Description of the map event properties.
	 ]]></see>
<see><![CDATA[org.as3commons.collections.Map Map - Map description and usage examples.
	 ]]></see>
</classRec>
<method name='MapFx' fullname='org.as3commons.collections.fx:MapFx/MapFx' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 MapFx constructor.
		 ]]></description>
</method>
<method name='addEventListener' fullname='org.as3commons.collections.fx:MapFx/addEventListener' isStatic='false' isFinal='false' isOverride='false'  param_names='type;listener;useCapture;priority;useWeakReference' param_types='String;Function;Boolean;int;Boolean' param_defaults='undefined;undefined;false;0;false' result_type='void'>
<description><![CDATA[
		 ]]></description>
<inheritDoc><![CDATA[]]></inheritDoc>
</method>
<method name='add' fullname='org.as3commons.collections.fx:MapFx/add' isStatic='false' isFinal='false' isOverride='true'  param_names='key;item' param_types='*;*' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[
		 
		 
		 Adds an item to the map.
		 
		 <p>If the map already contains the given key, the method abords with <code>false</code>.</p>
		 
		 <p>The <code>LinkedMap</code> appends the item.</p>
		 
		 <p>The position of items that are added to a <code>SortedMap</code>
		 depends on its sort order.</p>
		 
		 ]]></description>
<param><![CDATA[key The key of the item to add.
		 ]]></param>
<param><![CDATA[item The item to add.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item has been added.
		 ]]></return>
</method>
<method name='clear' fullname='org.as3commons.collections.fx:MapFx/clear' isStatic='false' isFinal='false' isOverride='true'  result_type='Boolean'>
<description><![CDATA[
		 
		 Removes all items from the collection.
		 
		 <p>If the collection is already empty, the method aborts with <code>false</code>.</p>
		 
		 ]]></description>
<return><![CDATA[<code>true</code> if items have been removed.
		 ]]></return>
</method>
<method name='dispatchEvent' fullname='org.as3commons.collections.fx:MapFx/dispatchEvent' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 ]]></description>
<inheritDoc><![CDATA[]]></inheritDoc>
</method>
<method name='hasEventListener' fullname='org.as3commons.collections.fx:MapFx/hasEventListener' isStatic='false' isFinal='false' isOverride='false'  param_names='type' param_types='String' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 ]]></description>
<inheritDoc><![CDATA[]]></inheritDoc>
</method>
<method name='itemRemoved' fullname='org.as3commons.collections.fx:MapFx/protected:itemRemoved' isStatic='false' isFinal='false' isOverride='true'  param_names='key;item' param_types='*;*' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		 
		 Template method to notify subclasses after an item has been removed.
		 
		 ]]></description>
<param><![CDATA[item The removed item.
		 ]]></param>
<param><![CDATA[node The former index of the removed item.
		 ]]></param>
</method>
<method name='removeEventListener' fullname='org.as3commons.collections.fx:MapFx/removeEventListener' isStatic='false' isFinal='false' isOverride='false'  param_names='type;listener;useCapture' param_types='String;Function;Boolean' param_defaults='undefined;undefined;false' result_type='void'>
<description><![CDATA[
		 ]]></description>
<inheritDoc><![CDATA[]]></inheritDoc>
</method>
<method name='removeKey' fullname='org.as3commons.collections.fx:MapFx/removeKey' isStatic='false' isFinal='false' isOverride='true'  param_names='key' param_types='*' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 
		 
		 Removes the given key and its associated item from the map.
		 
		 <p>If the key is not contained the method abords with <code>undefined</code>.</p>
		 ]]></description>
<param><![CDATA[key The key.
		 ]]></param>
<return><![CDATA[The item associated with the removed key or <code>undefined</code> if the key is not contained.
		 ]]></return>
</method>
<method name='replaceFor' fullname='org.as3commons.collections.fx:MapFx/replaceFor' isStatic='false' isFinal='false' isOverride='true'  param_names='key;item' param_types='*;*' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[
		 
		 
		 Replaces the item associated with the given key.
		 
		 <p>If the key is not contained or the given item equals the item
		 stored with the given key, the method abords with <code>false</code>.</p>
		 
		 ]]></description>
<param><![CDATA[key The key.
		 ]]></param>
<param><![CDATA[item The replacing item.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item has been replaced.
		 ]]></return>
</method>
<method name='willTrigger' fullname='org.as3commons.collections.fx:MapFx/willTrigger' isStatic='false' isFinal='false' isOverride='false'  param_names='type' param_types='String' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 ]]></description>
<inheritDoc><![CDATA[]]></inheritDoc>
</method>
<field name='_eventDispatcher' fullname='org.as3commons.collections.fx:MapFx/private:_eventDispatcher' type='flash.events:IEventDispatcher' isStatic='false' isConst='false' >
<description><![CDATA[
		 Event dispatcher.
		 ]]></description>
</field>
<packageRec name='org.as3commons.collections.fx.null' fullname='org.as3commons.collections.fx.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<classRec name='LinkedSetFx' fullname='org.as3commons.collections.fx:LinkedSetFx' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\fx\LinkedSetFx.as' namespace='org.as3commons.collections.fx' access='public' baseclass='org.as3commons.collections:LinkedSet' interfaces='org.as3commons.collections.framework:ICollectionFx' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Bindable version of the <code>LinkedSet</code> implementation.
	 
	 <p><strong><code>LinkedSetFx</code> event kinds</strong></p>
	 
	 <ul>
	 <li><code>CollectionEvent.ITEM_ADDED</code></li>
	 <li><code>CollectionEvent.ITEM_REPLACED</code></li>
	 <li><code>CollectionEvent.ITEM_REMOVED</code></li>
	 <li><code>CollectionEvent.RESET</code></li>
	 </ul>
	 
	 <p id="link_LinkedSetFxExample"><strong>LinkedSetFx example</strong></p>
	 
	 <a class="exampleCollapsed" href="#link_LinkedSetFxExample" onClick="toggleExample(this, 'LinkedSetFxExample');">Show example</a><br /><div id="LinkedSetFxExample" style='display:none'><listing version="3.0">package {
    import org.as3commons.collections.framework.ISetIterator;
    import org.as3commons.collections.fx.LinkedSetFx;
    import org.as3commons.collections.fx.events.CollectionEvent;
    import org.as3commons.collections.fx.events.SetEvent;
    import org.as3commons.collections.utils.NumericComparator;
    import flash.display.Sprite;

    public class LinkedSetFxExample extends Sprite {

        public function LinkedSetFxExample() {
            var theSet : LinkedSetFx = new LinkedSetFx();
            theSet.addEventListener(CollectionEvent.COLLECTION_CHANGED, changedHandler);
            
            theSet.add(1);
            theSet.add(3);
            theSet.add(2);
            theSet.add(2); // no event (2 already contained)
            
            theSet.addFirst(4);
            theSet.addLast(5);

            theSet.addBefore(2, 6);
            theSet.addAfter(2, 7);

            theSet.replace(3, 8);
            theSet.replace(1, 9);

            theSet.removeFirst();
            theSet.removeLast();
            theSet.remove(8);
            theSet.remove(6);
            theSet.remove(10); // no event (10 not contained)

            theSet.reverse();
            theSet.sort(new NumericComparator());

            theSet.clear();

            // [1] added                         [1]
            // [3] added after 1                 [1 3]
            // [2] added after 3                 [1 3 2]
            // [4] added before 1                [4 1 3 2]
            // [5] added after 2                 [4 1 3 2 5]
            // [6] added after 3 before 2        [4 1 3 6 2 5]
            // [7] added after 2 before 5        [4 1 3 6 2 7 5]
            // [8] replaced after 1 before 6     [4 1 8 6 2 7 5]
            // [9] replaced after 4 before 8     [4 9 8 6 2 7 5]
            // [4] removed before 9              [9 8 6 2 7 5]
            // [5] removed after 7               [9 8 6 2 7]
            // [8] removed after 9 before 6      [9 6 2 7]
            // [6] removed after 9 before 2      [9 2 7]
            // Reset                             [7 2 9]
            // Reset                             [2 7 9]
            // Reset                             []
        }

        private function changedHandler(e : SetEvent) : void {
            var info : String = "";
            var iterator : ISetIterator;
            
            switch (e.kind) {
                case CollectionEvent.ITEM_ADDED:
                    info += "[" + e.item + "] added";

                    iterator = e.iterator() as ISetIterator;
                    if (iterator.previousItem !== undefined) info += " after " + iterator.previousItem;
                    iterator.next();
                    if (iterator.nextItem !== undefined) info += " before " + iterator.nextItem;
                    break;

                case CollectionEvent.ITEM_REMOVED:
                    info += "[" + e.item + "] removed";

                    iterator = e.iterator() as ISetIterator;
                    if (iterator.previousItem !== undefined) info += " after " + iterator.previousItem;
                    if (iterator.nextItem !== undefined) info += " before " + iterator.nextItem;
                    break;

                case CollectionEvent.ITEM_REPLACED:
                    info += "[" + e.item + "] replaced";

                    iterator = e.iterator() as ISetIterator;
                    if (iterator.previousItem !== undefined) info += " after " + iterator.previousItem;
                    iterator.next();
                    if (iterator.nextItem !== undefined) info += " before " + iterator.nextItem;
                    break;

                case CollectionEvent.RESET:
                    info += ("Reset");
                    break;
            }
            
            for (var i : uint = info.length; i &lt; 34; i++) info += " ";
            info += "[" + e.set.toArray().join(" ") + "]";
            trace (info);
        }
    }
}
</listing></div>
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 25.03.2010
	 ]]></author>
<see><![CDATA[org.as3commons.collections.fx.events.SetEvent SetEvent - Description of the set event properties.
	 ]]></see>
<see><![CDATA[org.as3commons.collections.LinkedSet LinkedSet - LinkedSet description and usage examples.
	 ]]></see>
</classRec>
<method name='LinkedSetFx' fullname='org.as3commons.collections.fx:LinkedSetFx/LinkedSetFx' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 LinkedSetFx constructor.
		 ]]></description>
</method>
<method name='addEventListener' fullname='org.as3commons.collections.fx:LinkedSetFx/addEventListener' isStatic='false' isFinal='false' isOverride='false'  param_names='type;listener;useCapture;priority;useWeakReference' param_types='String;Function;Boolean;int;Boolean' param_defaults='undefined;undefined;false;0;false' result_type='void'>
<description><![CDATA[
		 ]]></description>
<inheritDoc><![CDATA[]]></inheritDoc>
</method>
<method name='addFirst' fullname='org.as3commons.collections.fx:LinkedSetFx/addFirst' isStatic='false' isFinal='false' isOverride='true'  param_names='item' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 
		 
		 Adds an item in front of the set.
		 
		 <p>If the item is already contained, the method aborts with <code>false</code>.</p>
		 
		 ]]></description>
<param><![CDATA[item The item to add.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item has been added.
		 ]]></return>
</method>
<method name='addLast' fullname='org.as3commons.collections.fx:LinkedSetFx/addLast' isStatic='false' isFinal='false' isOverride='true'  param_names='item' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 
		 
		 Adds an item at the end of the set.
		 
		 <p>If the item is already contained, the method aborts with <code>false</code>.</p>
		 
		 ]]></description>
<param><![CDATA[item The item to add.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item has been added.
		 ]]></return>
</method>
<method name='addNodeAfter' fullname='org.as3commons.collections.fx:LinkedSetFx/protected:addNodeAfter' isStatic='false' isFinal='false' isOverride='true'  param_names='previous;node' param_types='org.as3commons.collections.framework.core:LinkedNode;org.as3commons.collections.framework.core:LinkedNode' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		 
		 Inserts a new node after an existing node.
		 
		 <p>For convenience, the <code>next</code> may be null, which adds the node
		 at begin of the list.</p>
		 
		 ]]></description>
<param><![CDATA[left The existing node.
		 ]]></param>
<param><![CDATA[node The new node to be added after.
		 ]]></param>
</method>
<method name='addNodeBefore' fullname='org.as3commons.collections.fx:LinkedSetFx/protected:addNodeBefore' isStatic='false' isFinal='false' isOverride='true'  param_names='next;node' param_types='org.as3commons.collections.framework.core:LinkedNode;org.as3commons.collections.framework.core:LinkedNode' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		 
		 Inserts a new node before an existing node.
		 
		 <p>For convenience, the <code>next</code> may be null, which appends the node
		 to the list.</p>
		 
		 ]]></description>
<param><![CDATA[right The existing node.
		 ]]></param>
<param><![CDATA[node The node to be added before.
		 ]]></param>
</method>
<method name='add' fullname='org.as3commons.collections.fx:LinkedSetFx/add' isStatic='false' isFinal='false' isOverride='true'  param_names='item' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 
		 
		 Adds an item to the set.
		 
		 <p>If the set already contains the given item, the method abords with <code>false</code>.</p>
		 
		 <p>The <code>LinkedSet</code> appends the item.</p>
		 
		 <p>The position of items that are added to a <code>SortedSet</code>
		 depends on its sort order.</p>
		 
		 ]]></description>
<param><![CDATA[item The item to add.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item has been added.
		 ]]></return>
</method>
<method name='clear' fullname='org.as3commons.collections.fx:LinkedSetFx/clear' isStatic='false' isFinal='false' isOverride='true'  result_type='Boolean'>
<description><![CDATA[
		 
		 Removes all items from the collection.
		 
		 <p>If the collection is already empty, the method aborts with <code>false</code>.</p>
		 
		 ]]></description>
<return><![CDATA[<code>true</code> if items have been removed.
		 ]]></return>
</method>
<method name='dispatchEvent' fullname='org.as3commons.collections.fx:LinkedSetFx/dispatchEvent' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 ]]></description>
<inheritDoc><![CDATA[]]></inheritDoc>
</method>
<method name='hasEventListener' fullname='org.as3commons.collections.fx:LinkedSetFx/hasEventListener' isStatic='false' isFinal='false' isOverride='false'  param_names='type' param_types='String' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 ]]></description>
<inheritDoc><![CDATA[]]></inheritDoc>
</method>
<method name='removeEventListener' fullname='org.as3commons.collections.fx:LinkedSetFx/removeEventListener' isStatic='false' isFinal='false' isOverride='false'  param_names='type;listener;useCapture' param_types='String;Function;Boolean' param_defaults='undefined;undefined;false' result_type='void'>
<description><![CDATA[
		 ]]></description>
<inheritDoc><![CDATA[]]></inheritDoc>
</method>
<method name='removeFirst' fullname='org.as3commons.collections.fx:LinkedSetFx/removeFirst' isStatic='false' isFinal='false' isOverride='true'  result_type='*'>
<description><![CDATA[
		 
		 
		 Removes the first item of the ordered collection.
		 
		 ]]></description>
<return><![CDATA[The formerly first item or <code>undefined</code> if the collection is empty.
		 ]]></return>
</method>
<method name='removeLast' fullname='org.as3commons.collections.fx:LinkedSetFx/removeLast' isStatic='false' isFinal='false' isOverride='true'  result_type='*'>
<description><![CDATA[
		 
		 
		 Removes the last item of the ordered collection.
		 
		 ]]></description>
<return><![CDATA[The formerly last item or <code>undefined</code> if the collection is empty.
		 ]]></return>
</method>
<method name='removeNode' fullname='org.as3commons.collections.fx:LinkedSetFx/protected:removeNode' isStatic='false' isFinal='false' isOverride='true'  param_names='node' param_types='org.as3commons.collections.framework.core:LinkedNode' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 
		 
		 Unlinks a node and connects predecessor with successor.
		 
		 ]]></description>
<param><![CDATA[node The node to remove
		 ]]></param>
</method>
<method name='replace' fullname='org.as3commons.collections.fx:LinkedSetFx/replace' isStatic='false' isFinal='false' isOverride='true'  param_names='oldItem;item' param_types='*;*' param_defaults='undefined;undefined' result_type='Boolean'>
</method>
<method name='reverse' fullname='org.as3commons.collections.fx:LinkedSetFx/reverse' isStatic='false' isFinal='false' isOverride='true'  result_type='Boolean'>
<description><![CDATA[
		 
		 Reverses the collection order.
		 
		 <p>If the collection size is less than 2, the method aborts with <code>false</code>.</p>
		 
		 ]]></description>
<return><![CDATA[<code>true</code> if the collection has been reversed.
		 ]]></return>
</method>
<method name='sort' fullname='org.as3commons.collections.fx:LinkedSetFx/sort' isStatic='false' isFinal='false' isOverride='true'  param_names='comparator' param_types='org.as3commons.collections.framework:IComparator' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 
		 Sorts the linked collection using the given comparator.
		 
		 <p>The sort algorithm used by implementors of this interface is stable which
		 means that equal items are sorted in the same order they had before the sorting.</p>
		 
		 <p>If the collection size is less than 2, the method aborts with <code>false</code>.</p>
		 
		 ]]></description>
<param><![CDATA[comparator The sort criterion.
		 ]]></param>
<return><![CDATA[<code>true</code> if the linked collection has been sorted.
		 ]]></return>
</method>
<method name='willTrigger' fullname='org.as3commons.collections.fx:LinkedSetFx/willTrigger' isStatic='false' isFinal='false' isOverride='false'  param_names='type' param_types='String' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 ]]></description>
<inheritDoc><![CDATA[]]></inheritDoc>
</method>
<field name='_eventDispatcher' fullname='org.as3commons.collections.fx:LinkedSetFx/private:_eventDispatcher' type='flash.events:IEventDispatcher' isStatic='false' isConst='false' >
<description><![CDATA[
		 Event dispatcher.
		 ]]></description>
</field>
<packageRec name='org.as3commons.collections.fx.null' fullname='org.as3commons.collections.fx.null'>
<description><![CDATA[
 Copyright 2010 The original author or authors.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ]]></description>
</packageRec>
<classRec name='LinkedMapFx' fullname='org.as3commons.collections.fx:LinkedMapFx' sourcefile='C:\Users\Admin\Desktop\Dropbox\projects\my\site\as3libs\as3-commons\as3commons-collections-master\tmp\src\org\as3commons\collections\fx\LinkedMapFx.as' namespace='org.as3commons.collections.fx' access='public' baseclass='org.as3commons.collections:LinkedMap' interfaces='org.as3commons.collections.framework:ICollectionFx' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Bindable version of the <code>LinkedMap</code> implementation.
	 
	 <p><strong><code>LinkedMapFx</code> event kinds</strong></p>
	 
	 <ul>
	 <li><code>CollectionEvent.ITEM_ADDED</code></li>
	 <li><code>CollectionEvent.ITEM_REPLACED</code></li>
	 <li><code>CollectionEvent.ITEM_REMOVED</code></li>
	 <li><code>CollectionEvent.RESET</code></li>
	 </ul>
	 
	 <p id="link_LinkedMapFxExample"><strong>LinkedMapFx example</strong></p>
	 
	 <a class="exampleCollapsed" href="#link_LinkedMapFxExample" onClick="toggleExample(this, 'LinkedMapFxExample');">Show example</a><br /><div id="LinkedMapFxExample" style='display:none'><listing version="3.0">package {
    import org.as3commons.collections.framework.IMapIterator;
    import org.as3commons.collections.fx.LinkedMapFx;
    import org.as3commons.collections.fx.events.CollectionEvent;
    import org.as3commons.collections.fx.events.MapEvent;
    import org.as3commons.collections.utils.NumericComparator;
    import flash.display.Sprite;

    public class LinkedMapFxExample extends Sprite {

        public function LinkedMapFxExample() {
            var map : LinkedMapFx = new LinkedMapFx();
            map.addEventListener(CollectionEvent.COLLECTION_CHANGED, changedHandler);
            
            map.add("fourA", 4);
            map.add("one", 1);
            map.add("threeA", 3);
            map.add("two", 2);
            map.add("two", 2); // no event (two already contained)
            
            map.addFirst("threeD", 3);
            map.addLast("fourB", 4);

            map.addBefore("two", "threeB", 3);
            map.addAfter("two", "threeC", 3);

            map.replaceFor("two", 22);
            map.replaceFor("one", 11);
            map.replaceFor("one", 11); // no event (11 == 11)

            map.removeFirst();
            map.removeLast();
            map.remove(6); // no event (6 not contained)
            map.removeAll(3);

            map.reverse();
            map.sort(new NumericComparator());

            map.clear();

            // [4] added                         [4]
            // [1] added after 4                 [4 1]
            // [3] added after 1                 [4 1 3]
            // [2] added after 3                 [4 1 3 2]
            // [3] added before 4                [3 4 1 3 2]
            // [4] added after 2                 [3 4 1 3 2 4]
            // [3] added after 3 before 2        [3 4 1 3 3 2 4]
            // [3] added after 2 before 4        [3 4 1 3 3 2 3 4]
            // [22] replaced after 3 before 3    [3 4 1 3 3 22 3 4]
            // [11] replaced after 4 before 3    [3 4 11 3 3 22 3 4]
            // [3] removed before 4              [4 11 3 3 22 3 4]
            // [4] removed after 3               [4 11 3 3 22 3]
            // [3] removed after 11 before 3     [4 11 3 22 3]
            // [3] removed after 11 before 22    [4 11 22 3]
            // [3] removed after 22              [4 11 22]
            // Reset                             [22 11 4]
            // Reset                             [4 11 22]
            // Reset                             []
        }

        private function changedHandler(e : MapEvent) : void {
            var info : String = "";
            var iterator : IMapIterator;
            
            switch (e.kind) {
                case CollectionEvent.ITEM_ADDED:
                    info += "[" + e.item + "] added";

                    iterator = e.iterator() as IMapIterator;
                    if (iterator.previousKey !== undefined) info += " after " + e.map.itemFor(iterator.previousKey);
                    iterator.next();
                    if (iterator.nextKey !== undefined) info += " before " + e.map.itemFor(iterator.nextKey);
                    break;

                case CollectionEvent.ITEM_REMOVED:
                    info += "[" + e.item + "] removed";

                    iterator = e.iterator() as IMapIterator;
                    if (iterator.previousKey !== undefined) info += " after " + e.map.itemFor(iterator.previousKey);
                    if (iterator.nextKey !== undefined) info += " before " + e.map.itemFor(iterator.nextKey);
                    break;

                case CollectionEvent.ITEM_REPLACED:
                    info += "[" + e.item + "] replaced";

                    iterator = e.iterator() as IMapIterator;
                    if (iterator.previousKey !== undefined) info += " after " + e.map.itemFor(iterator.previousKey);
                    iterator.next();
                    if (iterator.nextKey !== undefined) info += " before " + e.map.itemFor(iterator.nextKey);
                    break;

                case CollectionEvent.RESET:
                    info += ("Reset");
                    break;
            }
            
            for (var i : uint = info.length; i &lt; 34; i++) info += " ";
            info += "[" + e.map.toArray().join(" ") + "]";
            trace (info);
        }
    }
}
</listing></div>
	 
	 ]]></description>
<author><![CDATA[Jens Struwe 29.03.2010
	 ]]></author>
<see><![CDATA[org.as3commons.collections.fx.events.MapEvent MapEvent - Description of the map event properties.
	 ]]></see>
<see><![CDATA[org.as3commons.collections.LinkedMap LinkedMap - LinkedMap description and usage examples.
	 ]]></see>
</classRec>
<method name='LinkedMapFx' fullname='org.as3commons.collections.fx:LinkedMapFx/LinkedMapFx' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 LinkedMapFx constructor.
		 ]]></description>
</method>
<method name='addAfter' fullname='org.as3commons.collections.fx:LinkedMapFx/addAfter' isStatic='false' isFinal='false' isOverride='true'  param_names='previousKey;key;item' param_types='*;*;*' param_defaults='undefined;undefined;undefined' result_type='Boolean'>
<description><![CDATA[
		 
		 
		 Adds an item after an existing one.
		 
		 <p>If the key is already contained, the method aborts with <code>false</code>.</p>
		 
		 ]]></description>
<param><![CDATA[previousKey The key of the item to add after.
		 ]]></param>
<param><![CDATA[item The item to add.
		 ]]></param>
<param><![CDATA[key The key of the item to add.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item has been added.
		 ]]></return>
</method>
<method name='addBefore' fullname='org.as3commons.collections.fx:LinkedMapFx/addBefore' isStatic='false' isFinal='false' isOverride='true'  param_names='nextKey;key;item' param_types='*;*;*' param_defaults='undefined;undefined;undefined' result_type='Boolean'>
<description><![CDATA[
		 
		 
		 Adds an item before an existing one.
		 
		 <p>If the key is already contained, the method aborts with <code>false</code>.</p>
		 
		 ]]></description>
<param><![CDATA[nextKey The key of the item to add before.
		 ]]></param>
<param><![CDATA[item The item to add.
		 ]]></param>
<param><![CDATA[key The key of the item to add.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item has been added.
		 ]]></return>
</method>
<method name='addEventListener' fullname='org.as3commons.collections.fx:LinkedMapFx/addEventListener' isStatic='false' isFinal='false' isOverride='false'  param_names='type;listener;useCapture;priority;useWeakReference' param_types='String;Function;Boolean;int;Boolean' param_defaults='undefined;undefined;false;0;false' result_type='void'>
<description><![CDATA[
		 ]]></description>
<inheritDoc><![CDATA[]]></inheritDoc>
</method>
<method name='addFirst' fullname='org.as3commons.collections.fx:LinkedMapFx/addFirst' isStatic='false' isFinal='false' isOverride='true'  param_names='key;item' param_types='*;*' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[
		 
		 
		 Adds an item in front of the map.
		 
		 <p>If the key is already contained, the method aborts with <code>false</code>.</p>
		 
		 ]]></description>
<param><![CDATA[item The item to add.
		 ]]></param>
<param><![CDATA[key The key of the item to add.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item has been added.
		 ]]></return>
</method>
<method name='addLast' fullname='org.as3commons.collections.fx:LinkedMapFx/addLast' isStatic='false' isFinal='false' isOverride='true'  param_names='key;item' param_types='*;*' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[
		 
		 
		 Adds an item at the end of the map.
		 
		 <p>If the key is already contained, the method aborts with <code>false</code>.</p>
		 
		 ]]></description>
<param><![CDATA[item The item to add.
		 ]]></param>
<param><![CDATA[key The key of the item to add.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item has been added.
		 ]]></return>
</method>
<method name='add' fullname='org.as3commons.collections.fx:LinkedMapFx/add' isStatic='false' isFinal='false' isOverride='true'  param_names='key;item' param_types='*;*' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[
		 
		 
		 Adds an item to the map.
		 
		 <p>If the map already contains the given key, the method abords with <code>false</code>.</p>
		 
		 <p>The <code>LinkedMap</code> appends the item.</p>
		 
		 <p>The position of items that are added to a <code>SortedMap</code>
		 depends on its sort order.</p>
		 
		 ]]></description>
<param><![CDATA[key The key of the item to add.
		 ]]></param>
<param><![CDATA[item The item to add.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item has been added.
		 ]]></return>
</method>
<method name='clear' fullname='org.as3commons.collections.fx:LinkedMapFx/clear' isStatic='false' isFinal='false' isOverride='true'  result_type='Boolean'>
<description><![CDATA[
		 
		 Removes all items from the collection.
		 
		 <p>If the collection is already empty, the method aborts with <code>false</code>.</p>
		 
		 ]]></description>
<return><![CDATA[<code>true</code> if items have been removed.
		 ]]></return>
</method>
<method name='dispatchEvent' fullname='org.as3commons.collections.fx:LinkedMapFx/dispatchEvent' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 ]]></description>
<inheritDoc><![CDATA[]]></inheritDoc>
</method>
<method name='hasEventListener' fullname='org.as3commons.collections.fx:LinkedMapFx/hasEventListener' isStatic='false' isFinal='false' isOverride='false'  param_names='type' param_types='String' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 ]]></description>
<inheritDoc><![CDATA[]]></inheritDoc>
</method>
<method name='removeEventListener' fullname='org.as3commons.collections.fx:LinkedMapFx/removeEventListener' isStatic='false' isFinal='false' isOverride='false'  param_names='type;listener;useCapture' param_types='String;Function;Boolean' param_defaults='undefined;undefined;false' result_type='void'>
<description><![CDATA[
		 ]]></description>
<inheritDoc><![CDATA[]]></inheritDoc>
</method>
<method name='removeFirst' fullname='org.as3commons.collections.fx:LinkedMapFx/removeFirst' isStatic='false' isFinal='false' isOverride='true'  result_type='*'>
<description><![CDATA[
		 
		 
		 Removes the first item of the ordered collection.
		 
		 ]]></description>
<return><![CDATA[The formerly first item or <code>undefined</code> if the collection is empty.
		 ]]></return>
</method>
<method name='removeLast' fullname='org.as3commons.collections.fx:LinkedMapFx/removeLast' isStatic='false' isFinal='false' isOverride='true'  result_type='*'>
<description><![CDATA[
		 
		 
		 Removes the last item of the ordered collection.
		 
		 ]]></description>
<return><![CDATA[The formerly last item or <code>undefined</code> if the collection is empty.
		 ]]></return>
</method>
<method name='removeNode' fullname='org.as3commons.collections.fx:LinkedMapFx/protected:removeNode' isStatic='false' isFinal='false' isOverride='true'  param_names='node' param_types='org.as3commons.collections.framework.core:LinkedNode' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 
		 
		 Unlinks a node and connects predecessor with successor.
		 
		 ]]></description>
<param><![CDATA[node The node to remove
		 ]]></param>
</method>
<method name='replaceFor' fullname='org.as3commons.collections.fx:LinkedMapFx/replaceFor' isStatic='false' isFinal='false' isOverride='true'  param_names='key;item' param_types='*;*' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[
		 
		 
		 Replaces the item associated with the given key.
		 
		 <p>If the key is not contained or the given item equals the item
		 stored with the given key, the method abords with <code>false</code>.</p>
		 
		 ]]></description>
<param><![CDATA[key The key.
		 ]]></param>
<param><![CDATA[item The replacing item.
		 ]]></param>
<return><![CDATA[<code>true</code> if the item has been replaced.
		 ]]></return>
</method>
<method name='reverse' fullname='org.as3commons.collections.fx:LinkedMapFx/reverse' isStatic='false' isFinal='false' isOverride='true'  result_type='Boolean'>
<description><![CDATA[
		 
		 Reverses the collection order.
		 
		 <p>If the collection size is less than 2, the method aborts with <code>false</code>.</p>
		 
		 ]]></description>
<return><![CDATA[<code>true</code> if the collection has been reversed.
		 ]]></return>
</method>
<method name='sort' fullname='org.as3commons.collections.fx:LinkedMapFx/sort' isStatic='false' isFinal='false' isOverride='true'  param_names='comparator' param_types='org.as3commons.collections.framework:IComparator' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 
		 Sorts the linked collection using the given comparator.
		 
		 <p>The sort algorithm used by implementors of this interface is stable which
		 means that equal items are sorted in the same order they had before the sorting.</p>
		 
		 <p>If the collection size is less than 2, the method aborts with <code>false</code>.</p>
		 
		 ]]></description>
<param><![CDATA[comparator The sort criterion.
		 ]]></param>
<return><![CDATA[<code>true</code> if the linked collection has been sorted.
		 ]]></return>
</method>
<method name='willTrigger' fullname='org.as3commons.collections.fx:LinkedMapFx/willTrigger' isStatic='false' isFinal='false' isOverride='false'  param_names='type' param_types='String' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 ]]></description>
<inheritDoc><![CDATA[]]></inheritDoc>
</method>
<field name='_eventDispatcher' fullname='org.as3commons.collections.fx:LinkedMapFx/private:_eventDispatcher' type='flash.events:IEventDispatcher' isStatic='false' isConst='false' >
<description><![CDATA[
		 Event dispatcher.
		 ]]></description>
</field>
</asdoc>
